#!/usr/bin/env ruby
require 'thor'
require 'yaml'
require 'shell'
require 'fileutils'
require 'open3'

CONTEXT_CONFIG_PATH = "#{ENV["HOME"]}/workspace/.scribe-context"

class Scribe < Thor

  map '--version' => :version
  map '--help' => :help

  desc "help", "Show this help message"

  desc "context", "Set or display the available contexts"
  method_option :context , :aliases => "c" , :desc => "Context" 
  def context(new_context=nil)
    list_contexts && return if new_context.nil?
    # wip_stash unless git_changes?
    # if status is not empty - wip_stash
    if config.yaml.include?(new_context)
      write_context(current_context, new_context)
    else
      scribe_error("Bad context match", new_context)
    end
  end

  desc "story", "show git status in the repos within this context"
  def story
    unless current_context
      puts "Please set your context with `scribe context [new context name]`"
      exit 1
    end
      puts "    Here are the changes to repos in #{set_color(current_context, :green)} context:"
    each_repo do |name, repo_config|
      Dir.chdir("#{ENV["HOME"]}/workspace/#{name}")
      stdout, stdeerr, status = Open3.capture3("git status --porcelain")

      if stdout.empty?
        puts set_color("#{name}: - âˆš", :magenta)
        next 
      else
      end
      
      puts set_color("\n#{name}: - CHANGES", :magenta)
      puts "#{stdout}\n"
    end

  end


  no_commands do

    def wip_stash
      puts "WIP STASH IS HERE"
      # on context change if status is not empty - wip_stash
      # "git checkout -b #{context}-dev-null-wip"
      # "git add -A"
      # "git commit -m 'auto generated wip'"
      # "git checkout <NEW-CONTEXT>"
    end

    # def wip_pop
      # upon return to context - wip_pop
      # "git checkout #{context}-dev-null-wip"
      # "git reset HEAD~1"
      # "git checkout #{context}"
    # end
    def write_context(current_context, new_context)
      File.open(CONTEXT_CONFIG_PATH, "r+") do |file|
        from = "(was #{current_context})" unless current_context.empty?
        puts "Changing context to #{set_color(new_context, :blue)} #{from}"

        File.truncate(file, 0)
        file.write new_context
      end
    end

    def scribe_error(msg, data)
      puts set_color("==================================================", :red)
      puts set_color("#{msg}", :red)
      puts set_color("==================================================", :red)
      puts set_color("=>#{data}", :red, :bold) + " does not match scribe context list:"
      list_contexts
      raise Thor::Error, set_color("Please set new contexts in the .scribe config.", :magenta)
    end

    def list_contexts
      config.yaml.each do |context, _|
        if context == current_context
          print "* "
        else
          print "  "
        end

        puts context
      end
    end

    def each_repo
      config_hash_for_context = config.yaml[current_context]
      config_hash_for_context["repositories"].each do |repo_config|
        yield(repo_config["repository"]["name"], repo_config["repository"])
      end
    end

    def current_context
      return @current_context if @current_context
      FileUtils.touch(CONTEXT_CONFIG_PATH) unless File.exist?(CONTEXT_CONFIG_PATH)

      File.open(CONTEXT_CONFIG_PATH, "r+") do |file|
        @current_context = file.read.chomp
      end

      raise Thor::Error unless @current_context

      @current_context
    end

    def config
      return @config if @config

      @config = ScribeConfig.new
    end
  end
  # desc "coare", ""
  # def coare
  #    config.yaml[current_context]["repositories"].each do |k,v|
  #       puts k #["name"]
  #     end
  #   # puts "#{current_context}"
  # end


end

class ScribeConfig
  def yaml
    return @yaml if @yaml

    Dir.chdir("#{ENV["HOME"]}/workspace/docs-utility-scripts")
    @yaml = YAML.load_file('.scribe')
  end
end

Scribe.start(ARGV)