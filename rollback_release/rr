#!/usr/bin/env ruby
require 'thor'
require 'yaml'
require 'shell'
require 'fileutils'
require 'open3'
require 'pp'

# CONTEXT_CONFIG_PATH = "#{ENV["HOME"]}/workspace/.scribe-context"

class RollbackRelease < Thor

  map '--version' => :version
  map '--help' => :help

  # desc "help", "Show this help message"

  # interactively choose non-running rollback app from .rr_config
  # requires valid, pushed, unstarted, yellow and/or rose colored rollback apps 
  # cf start, scale, and re-route to prod, stops green and or blue
  # rr ripcord
  desc "ripcord", "Pull ripcord -- relax, and roll back like a boss."


  def ripcord
    ripcord_text_description
    set_product 
    roll_back rollback_choice if rollback_choices?
  end


  desc "prime", "Pushes app to product space and org, and maps the app to an out-of-the-way route for review. \nRR Prime also starts the app with one instance."
  def prime
    prime_release_text_description 
    set_product
    prime_app if verify_app_dir? && verify_prime_candidate?
  end

  desc "release", "Releases primed apps to production. \nScales primed app and switches route according to blue-green CI/CD rule set. \nUnmaps and stops old blue or green version."
  def release
    prime_release_text_description
    set_product
    set_release_candidate
    release_app if verify_release_candidate?
  end

  no_commands do

    def release_app
      if release_choice == false
        puts "There is no app to roll back. Exiting." 
        exit 1
      end
      puts "Executing release with arguments; #{release_choice} for #{product}."
      exec("
        export RELEASE_APP='#{release_choice}'; 
        export SPACE='#{config.yaml[product]['space']}'; 
        export ORG='#{config.yaml[product]['org']}'; 
        export ROUTE_PATH='#{config.yaml[product]['route_path']}'; 
        export DOMAIN='#{config.yaml[product]['domain']}'; 
        export HOSTNAME='#{config.yaml[product]['hostname']}'; 
        sh #{ENV["HOME"]}/workspace/docs-utility-scripts/rollback_release/lib/release.sh")
    end

    def roll_back(rollback_app)
      if rollback_app == false
        puts "There is no app to roll back. Exiting." 
        exit 1
      end
      puts "Executing rollback with arguments: #{rollback_app} for #{product}."
      exec("
        export ROLLBACKAPP='#{rollback_app}'; 
        export SPACE='#{config.yaml[product]['space']}'; 
        export ORG='#{config.yaml[product]['org']}'; 
        export ROUTE_PATH='#{config.yaml[product]['route_path']}'; 
        export DOMAIN='#{config.yaml[product]['domain']}'; 
        export HOSTNAME='#{config.yaml[product]['hostname']}';  
        sh #{ENV["HOME"]}/workspace/docs-utility-scripts/rollback_release/lib/ripcord.sh")
    end

    def prime_app
      puts "\n#{set_color("  =>", :magenta)} OK, here we go!"
      exec("
        export RR_DIR='#{rr_dir}'; 
        export PRIMEDAPP='#{primed_app_name}'; 
        export SPACE='#{config.yaml[product]['space']}'; 
        export ORG='#{config.yaml[product]['org']}'; 
        export ROUTE_PATH='#{config.yaml[product]['route_path']}'; 
        export DOMAIN='#{config.yaml[product]['domain']}'; 
        export HOSTNAME='#{config.yaml[product]['hostname']}'; 
        sh #{ENV["HOME"]}/workspace/docs-utility-scripts/rollback_release/lib/prime.sh")
    end

    def set_product    
      show_product_list
      product 
      exit 1 unless verify_product_name?
    end

    def product
      return @product if @product

      @product = get_product_name(choose_app_num)
    end

    def set_release_candidate
      target_space_and_org  
      show_app_space_org_details
      release_choice
    end

    def verify_release_candidate?
      yes?("\n  #{set_color("=> ", :magenta)}Please verify:\n  #{set_color("=> ", :magenta)}Release #{set_color(release_app, :magenta)} in #{set_color(config.yaml[product]['space'], :magenta)} space, #{set_color(config.yaml[product]['org'], :magenta)} org? [y/N]")
    end

    def release_choice
      return @release_choice if @release_choice
      @release_choice = "#{config.yaml[product]['app_name']}-"
      @release_choice << ask("\n  #{set_color("=> ", :magenta)}Ok, which app do you want to re-route and release to production for #{set_color(product, :magenta)}, #{set_color(config.yaml[product]['app_name'] + '-blue', :blue)} or #{set_color(config.yaml[product]['app_name'] + '-green', :green)}?", :limited_to => ["blue", "green"])
      @release_choice
    end

    def rollback_choice
      return @rollback_choice if @rollback_choice
      show_app_space_org_details
      @rollback_choice = "#{config.yaml[product]['app_name']}-"
      @rollback_choice << ask("\n  #{set_color("=> ", :magenta)}Ok, what app do you want to roll back to production for #{set_color(config.yaml[product]['app_name'], :magenta)}? The other app(s) will be stopped.", :limited_to => @rollback_choices)
    end


    def rollback_choices?
      target_space_and_org  
      stdout, stderr, status = Open3.capture3("cf apps")
      possibilities = []
      possibilities << "rose" if stdout.include?("#{config.yaml[product]['app_name']}-rose") 
      possibilities << "blue" if stdout.include?("#{config.yaml[product]['app_name']}-blue")
      possibilities << "green" if stdout.include?("#{config.yaml[product]['app_name']}-green")
      possibilities << "yellow" if stdout.include?("#{config.yaml[product]['app_name']}-yellow")
      @rollback_choices = possibilities
      possibilities.length > 0 ? true : false
    end

    def primed_app_name
      return @primed_app_name if @primed_app_name

      @primed_app_name = config.yaml[product]['app_name'] + "-" + blue_or_green
    end

    def verify_product_name?
      yes?("\n  #{set_color("=> ", :magenta)}#{set_color(product, :magenta)}\n\n  #{set_color("=> ", :magenta)}Please verify you want to select an app for this product: [y/n] ")  
    end

    def verify_app_dir?
      puts "\n#{rr_dir}"
      system("ls -l #{rr_dir}")
      yes?("\n  #{set_color("=> ", :magenta)}Are the files above the correct contents of the app? [y/N]")
    end

    def verify_prime_candidate?
      target_space_and_org
      show_app_space_org_details
      yes?("\n  #{set_color("=> ", :magenta)}Prime this app as #{set_color(primed_app_name, :magenta)} in #{set_color(config.yaml[product]['space'], :magenta)} space, #{set_color(config.yaml[product]['org'], :magenta)} org? [y/N]")
    end


    def prime_release_text_description
     puts "\n  #{set_color("rr prime", :magenta)} and #{set_color("rr release", :magenta)} work together. Prime an app to prepare it for prod, verify it works as expected, and then release it. The #{set_color(".rr_config", :magenta)} file sets the app names, orgs, spaces, branches, and books that #{set_color("rr", :magenta)} manages."
     puts "\n#{set_color("  rr prime", :magenta)}"
     puts "  The prime function pushes an app to the correct production space, starts it, and assigns it a test route in the #{set_color("cfapps.io", :magenta)} domain."
     puts "  After you check that it is running properly, flip the routing switch to map it to production with #{set_color("rr release", :magenta)}."
     puts "\n#{set_color("  rr release", :magenta)}"
     puts "  The release function scales a primed app, maps it to production, and stops the apps with the same root name."
    end

    def ripcord_text_description
      puts set_color("\n  You pulled the ripcord!\n\n  Relax, breathe, and let's roll that app back like a boss!", :magenta)
    end

    def blue_or_green
      ask("\n  #{set_color("=> ", :magenta)}Ok, should the app be #{set_color(config.yaml[product]['app_name'] + "-green", :green)} or #{set_color(config.yaml[product]['app_name'] + "-blue", :blue, :bold)}?\n  (Normally, you would push an app for which there is a stopped app of the same name.)", :limited_to => ["blue", "green"])
    end

    def choose_app_num
      ask("\n  #{set_color("=> ", :magenta)}Which product would you like to select?",  :limited_to => products_to_numbered_array )
    end

    def target_space_and_org
      puts "\n  #{set_color("=> ", :magenta)}OK, targeting the #{set_color(config.yaml[product]['space'], :magenta)} space in the #{set_color(config.yaml[product]['org'], :magenta)} org for #{set_color(product, :magenta)}...\n\n"
      system ("cf target -o #{config.yaml[product]['org']} -s #{config.yaml[product]['space']}")
    end

    def show_app_space_org_details
      puts "\n  #{set_color("=> ", :magenta)}OK, checking the apps in the #{set_color(config.yaml[product]['space'], :magenta)} space in the #{set_color(config.yaml[product]['org'], :magenta)} org...\n\n"
      system("cf apps")
    end

    def products_to_numbered_array
      config.yaml.each_with_index.map { |x,i| (i+1).to_s }
    end

    def show_product_list
      puts "\nProduct list:"
      index = 1
      config.yaml.each do |key, _|
        puts "  #{index}: #{key}"
        index += 1
      end
    end

    def get_product_name(num)
      product_name = ''
      config.yaml.each_with_index do |(key,value),index|
        product_name << key if (index + 1) == num.to_i
      end
      product_name
    end

    def some_error
      raise Thor::Error, set_color("Please set new contexts in the .scribe config.", :magenta)
    end 

    def config
      return @config if @config

      @config = RRConfig.new
    end

    def rr_dir
      return @rr_dir if @rr_dir

      @rr_dir = ENV["PWD"]
    end

  end

end

class RRConfig
  def yaml
    return @yaml if @yaml

    Dir.chdir("#{ENV["HOME"]}/workspace/docs-utility-scripts/rollback_release")
    @yaml = YAML.load_file('.rr_config')
  end
end



RollbackRelease.start(ARGV)
