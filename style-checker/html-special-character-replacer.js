var doreplacement;

module.exports = {
	activate: function() {
		return atom.commands.add('atom-text-editor', 'html-special-character-replacer:replace', function() {
			var editor;
			editor = atom.workspace.getActiveTextEditor();
			return replace(editor);
		});
	}
};

function replace(editor)
{

	var text;

	if (editor.getSelectedText()) {

		text = editor.getSelectedText();
		return editor.insertText(doreplacement(text));

	} else {

		text = editor.getText();
		return editor.setText(doreplacement(text));

	}

}

function doreplacement(text)
{

// Last updated: January 29, 2021

// Substitute 2 spaces for each tab that does not precede a variable.

text = text.replace(/\t(?!<%= vars)/gm,'  ');

// Comment on layout errors.

text = text.replace(/(:\n[\*\+\-]\s)/gm,'$1<%# Insert an empty newline before a bullet list. %>');
text = text.replace(/((```|\<\/code\>|\<\/pre\>)\n{2,}\s*Where)/gm,'$1<%# Place |Where| immediately below the closing code tag. %>');
text = text.replace(/([^\.][\:\.](?!\<br)\n[^\n]+```)/gm,'$1<%# Insert an empty newline before the snippet or, if inside a nested list, use |<br>| instead. %>');
text = text.replace(/([A-z](?!\n)\s(?!\n)\s[A-z])/gm,'$1<%# Delete the double space. %>');
text = text.replace(/(\b[a-z]+\b\s\b[a-z]+\b[:\.]\n[^\n]+(```|<pre))/gm,'$1<%# Put an empty newline between the stem and the opening code tag. %>');
text = text.replace(/(\d\.\s.*\n\s{4}\*[^\.]*[^\<]\n\s{4}.*\n\s{4}.*\n\s{4}.*\n\s{4}.*\n\s{4}.*)/gm,'$1<%# Consider using <br><br> between nested bullets that are many and/or wordy. %>');
text = text.replace(/(\n\n[A-Z][^:\d\*]*:\n\n\s+(?=(```|<pre|<code|<t|\|)))/gm,'$1<%# Check if this indentation is definitely needed. %>');
text = text.replace(/(\n\n\s*```\n\s*Where:)/gm,'$1<%# Delete the empty newline before the Markdown code snippet closing tag. %>');
text = text.replace(/(^(?!\n)(\s{1,3}|\s{5,7}|\s{9}|\s{11}|\s{13,})(?=(```|<p class|<code|\|)))/gm,'$1<%# Indent 0, 4, 8, or 12 spaces. %>');
text = text.replace(/(^(?!\n)\d\.[^:]*\n\n(?=\s+\d\.))/gm,'$1<%# Place a colon at the end of the step that precedes the nested steps. %>');
text = text.replace(/(^(?!\n)\d\.[^\n]*\n\n(?!\n)(\s{0,3}|\s{5,})[A-Z][^#]*\n+\d\.)/gm,'$1<%# Replace the empty newline above with |<br><br>|. %>');
text = text.replace(/(^(?!\n)\s{1,3}\d\.)/gm,'$1<%# Place this step at the start of the line or, if nested, indent it 4 spaces. %>');
text = text.replace(/(^(?!\n)\s{1,4}[\*\+\-\d][\.\s](.+\n){1,}\n[^\n]\s{4,})/gm,'$1<%# Do not insert an empty newline inside a nested list. %>');
text = text.replace(/(^(?!\n)\s{10}[\*\+]\s`[^\*\+]*\.\n(?!\n)(\s{0,7}|\s{9,})[\*\+]\s\*\*)/gm,'$1<%# Indent this bullet 8 spaces: it is not part of the |Where| bullet list. %>');
text = text.replace(/(^(?!\n)\s{4}(```|<\/code>|<\/pre>|<\/t|\|)\n(?!\n)(\s{0,3}|\s{5,})[^\s\d])/gm,'$1<%# Indent this text as much as the closing tag above and place it immediately below it. %>');
text = text.replace(/(^(?!\n)\s{4}(```|<\/code>|<\/pre>|<\/t|\|)\n\n(\s{0,3}|\s{5,})[A-Z](?=[^#]*\d\.))/gm,'$1<%# Indent this sentence the same number of spaces as the closing tag immediately above. %>');
text = text.replace(/(^(?!\n)\s{4}[^\s]+\n(\s{0,3}|\s{5,})[\*\+](?!\s\*\*))/gm,'$1<%# Indent this bullet the same amount as the line above. %>');
text = text.replace(/(^(?!\n)\s{4}\d\..*(?=\n\n(\s{0,7}|\s{9,})\<p[^\d]*\n\n[^#]*\n\n\s{4}\d\.))/gm,'$1<%# Indent the paragraph 8 spaces to maintain the numbered step sequence. %>');
text = text.replace(/(^(?!\n)\s{4}\d\..*\n(?!\n)(\s{0,7}|\s{9,})[\*\+])/gm,'$1<%# Indent a bullet beneath a nested step 8 spaces. %>');
text = text.replace(/(^(?!\n)\s{5,}```\n(?=\s*Where))/gm,'$1<%# If this snippet is within a nested list, add |<br>| after the closing tag and write |Where| immediately below it. %>');
text = text.replace(/(^(?!\n)\s{5,}```<br>\n(?=\s*Where))/gm,'$1<%# If this snippet is within a nested list, remove empty newlines between the closing code tag and |Where|. %>');
text = text.replace(/(^(?!\n)\s{8}(```|<\/code>|<\/pre>|<\/t|\|)\n(?!\n)(\s{0,7}|\s{9,})[^\s\d])/gm,'$1<%# Indent this text as much as the closing tag above and place it immediately below it. %>');
text = text.replace(/(^(?!\n)\s{8}(```|<\/code>|<\/pre>|<\/t|\|)\n\n(\s{0,7}|\s{9,})[A-Z](?=[^#]*\d\.))/gm,'$1<%# Indent this sentence the same number of spaces as the closing tag immediately above. %>');
text = text.replace(/(^(?!\n)\s{8}[\*\+]\s`[^\*\+]*\.\n(?!\n)\s+[\*\+]\s\*\*)/gm,'$1<%# Do not indent this bullet: it is not part of the |Where| bullet list. %>');
text = text.replace(/(^(?!\n)\s{8}[\d\*\+](.+\n){1,}\n(\s{0,11}|\s{13,})(?=(```|<pre|<t|\|)))/gm,'$1<%# Indent this code snippet beneath a nested bullet beneath a nested step 12 spaces. %>');
text = text.replace(/(^(?!\n)\s{8}[^\s]+\n(\s{0,7}|\s{9,})[\*\+](?!\s\*\*))/gm,'$1<%# Indent this bullet the same amount as the line above. %>');
text = text.replace(/(^(?!\n)\s{8}\d\..*(?=\n\n(\s{0,11}|\s{13,})\<p[^\d]*\n\n[^#]*\n\n\s{8}\d\.))/gm,'$1<%# Indent the paragraph 12 spaces to maintain the numbered step sequence. %>');
text = text.replace(/(^(?!\n)\s*\d\..*\n\n\s+[A-Z`](.+\n){1,}\n[A-Z](.+\n){1,}\n\s+(.+\n){1,}\n\s*\d\.\s)/gm,'$1<%# If some text is indented between steps, indent the rest to preserve the numbered step sequence. %>');
text = text.replace(/(^(?!\n)\s+[\*\+\-\d].*\n\n(?!\n)\s+[\*\+\-\d])/gm,'$1<%# Delete the empty newline before this nested bullet or step. %>');
text = text.replace(/(^(?!\n)\s+\d\.[^:1]*:\n\n(\s{0,7}|\s{9,})(?=(```|<pre|<code|<t|\|)))/gm,'$1<%# Indent 8 spaces. %>');
text = text.replace(/(^(\s{0,3}|\s{5,})<\/p[^>]*>(?=\n\n\d\.))/gm,'$1<%# Indent this block 4 spaces to preserve the numbered step sequence it is in. %>');
text = text.replace(/(^\d\.[^:\n]*:\n\n(\s{0,3}|\s{5,})(?=(\d\.)))/gm,'$1<%# Indent this nested step 4 spaces. %>');
text = text.replace(/(^\d\.[^:\n]*:\n\n(\s{0,3}|\s{5,})(?=(```|<pre|<code|<t|\|)))/gm,'$1<%# Indent 4 spaces. %>');
text = text.replace(/(<br>\n*[^#:]*:\n\n[\*\+\-])/gm,'$1<%# Format these bullets in HTML to align them with the stem above. %>');

// Comment on style errors within code outside terminal snippets

text = text.replace(/(---\n\n[^#\n]*(?=(#[^#]|###))(?![^<]*<\/pre>))/gm,'$1<%# The first header must be ## -- no smaller, no larger. %>');
text = text.replace(/(-APP-NAME\b(?![^<]*<\/pre>))/gm,'$1<%# |APP-NAME| is preferred. %>');
text = text.replace(/(-SERVICE-INSTANCE-NAME\b(?![^<]*<\/pre>))/gm,'$1<%# |SERVICE-INSTANCE-NAME| is preferred. %>');
text = text.replace(/(:alt =\> .[^\{\)]*\<%= vars\.[^\)]*\) %\>(?![^<]*<\/pre>))/gm,'$1<%# Use #{} to escape ERB variables within ERB image tags, as in #{vars.product_short}. %>');
text = text.replace(/(!\[.{0,44}\]\([^\.]*\.png\)(?![^<]*<\/pre>))/gm,'$1<%# Alt text must describe the image in detail. %>');
text = text.replace(/([\*\+\-] `[A-Za-z]*_(?![^<]*<\/pre>))/gm,'$1<%# Use dashes for spacing in placeholders, not underscores.  %>');
text = text.replace(/([\n\s]\*\*[^*]{96}(?![^<]*<\/pre>))/gm,'$1<%# Consider reducing this run-in heading to fewer than 100 characters. %>');
text = text.replace(/([^-]CLIENT-SECRET\b(?![^<]*<\/pre>))/gm,'$1<%# Specify the server, as in |BOSH-CLIENT-SECRET| or |CREDHUB-CLIENT-SECRET|. %>');
text = text.replace(/([^-]DEPLOYMENT\b(?![^<]*<\/pre>))/gm,'$1<%# |BOSH-DEPLOYMENT| is preferred. %>');
text = text.replace(/([^-]ENVIRONMENT\b(?![^<]*<\/pre>))/gm,'$1<%# |BOSH-ENVIRONMENT| is preferred. %>');
text = text.replace(/([^`\n]{100,}[^`]*```(?=\n\n)(?![^<]*<\/pre>))/gm,'$1<%# Consider using // to break up every 100-character line in this snippet. %>');
text = text.replace(/(\.\/[a-z-]*#[a-z-]*\.html(?![^<]*<\/pre>))/gm,'$1<%# Broken link -- the correct syntax is |page-name.html#anchor-name|. %>');
text = text.replace(/(\(https:..discuss.pivotal.io.*\).*$(?![^<]*<\/pre>))/gm,'$1<%# Discuss Pivotal is a deprecated URL. Contact Knowledge Base staff for its replacement. %>');
text = text.replace(/(\(https:..github.com.*\)(?!.*\n?.*GitHub).*$(?![^<]*<\/pre>))/gm,'$1<%# Type |in GitHub| somewhere in the cross-reference sentence. %>');
text = text.replace(/(\(https:..pvtl.force.com.*\).*$(?![^<]*<\/pre>))/gm,'$1<%# Pivotal Force is a deprecated URL. Contact Knowledge Base staff for its replacement. %>');
text = text.replace(/(\[(?!.*\n?.*BOSH documentation).*\]\(https:..bosh.io.*\)(?![^<]*<\/pre>))/gm,'$1<%# The link name must be |BOSH documentation|. %>');
text = text.replace(/(\[(?!.*\n?.*cert-manager documentation).*\]\(https:..cert-manager.io.docs.*\)(?![^<]*<\/pre>))/gm,'$1<%# The link name must be |cert-manager documentation|. %>');
text = text.replace(/(\[(?!.*\n?.*Cloud Foundry documentation).*\]\(https:..docs.cloudfoundry.org.*\)(?![^<]*<\/pre>))/gm,'$1<%# The link name must be |Cloud Foundry documentation|. %>');
text = text.replace(/(\[(?!.*\n?.*Concourse documentation).*\]\(https:..concourse-ci.org.*\)(?![^<]*<\/pre>))/gm,'$1<%# The link name must be |Concourse documentation|. %>');
text = text.replace(/(\[(?!.*\n?.*Docker documentation).*\]\(https:..docs.docker.com.*\)(?![^<]*<\/pre>))/gm,'$1<%# The link name must be |Docker documentation|. %>');
text = text.replace(/(\[(?!.*\n?.*GCP documentation).*\]\(https:..cloud.google.com.*\)(?![^<]*<\/pre>))/gm,'$1<%# The link name must be |GCP documentation|. %>');
text = text.replace(/(\[(?!.*\n?.*Istio documentation).*\]\(https:..istio.io.latest.docs.*\)(?![^<]*<\/pre>))/gm,'$1<%# The link name must be |Istio documentation|. %>');
text = text.replace(/(\[(?!.*\n?.*Kubernetes documentation).*\]\(https:..kubernetes.io.docs.*\)(?![^<]*<\/pre>))/gm,'$1<%# The link name must be |Kubernetes documentation|. %>');
text = text.replace(/(\[(?!.*\n?.*Microsoft documentation).*\]\(https:..docs.microsoft.com.*\)(?![^<]*<\/pre>))/gm,'$1<%# The link name must be |Microsoft documentation|. %>');
text = text.replace(/(\[(?!.*\n?.*Percona documentation).*\]\(https:..www.percona.com.doc.*\)(?![^<]*<\/pre>))/gm,'$1<%# The link name must be |Percona documentation|. %>');
text = text.replace(/(\[(?!.*\n?.*RabbitMQ documentation).*\]\(https:..www.rabbitmq.com.*\)(?![^<]*<\/pre>))/gm,'$1<%# The link name must be |RabbitMQ documentation|. %>');
text = text.replace(/(\[(?!.*\n?.*Terraform documentation).*\]\(https:..www.terraform.io.docs.*\)(?![^<]*<\/pre>))/gm,'$1<%# The link name must be |Terraform documentation|. %>');
text = text.replace(/(\[(?!.*\n?.*VMware Tanzu Support knowledge base).*\]\(https:..community.pivotal.io.*\)(?![^<]*<\/pre>))/gm,'$1<%# The link name must be |VMware Tanzu Support documentation|. %>');
text = text.replace(/(\[[a-z]+\](?![^<]*<\/pre>))/gm,'$1<%# See https://docs-wiki.cfapps.io/wiki/style/cross-ref-style.html %>');
text = text.replace(/(\<!--(?![^<]*<\/pre>))/gm,'$1<%# HTML comments sometimes slip through to the webpage. Use ERB tags instead. %>');
text = text.replace(/(\<%= image_tag(?![^\)]*:alt)[^%]*%\>(?![^<]*<\/pre>))/gm,'$1<%# Images require alt text. %>');
text = text.replace(/(\<%= image_tag[^\)]*:alt => \W.{0,44}\W\) %\>(?![^<]*<\/pre>))/gm,'$1<%# Alt text must describe the image in detail. %>');
text = text.replace(/(\<%= var.[\w]* %\>(?![^<]*<\/pre>))/gm,'$1<%# ERB variables start with |vars.|, not |var|. %>');
text = text.replace(/(\<%= vars.platform_name %\> v2.0 and later\b(?![^<]*<\/pre>))/gm,'$1<%# |<%= vars.platform_name %> (formerly <%= vars.platform_old %>)| is preferred. %>');
text = text.replace(/(\<%= vars.platform_old %\> v2.0 and later\b(?![^<]*<\/pre>))/gm,'$1<%# |<%= vars.platform_name %> (formerly <%= vars.platform_old %>)| is preferred. %>');
text = text.replace(/(\<%= vars.runtime_abbr %\>(?![^<]*<\/pre>))/gm,'$1<%# Use <%= vars.app_runtime_abbr %>');
text = text.replace(/(\<a href=.https:..bosh.io[^\>]*\>(?!.*\n?.*BOSH documentation).*$(?![^<]*<\/pre>))/gm,'$1<%# The link name must be |BOSH documentation|. %>');
text = text.replace(/(\<a href=.https:..cert-manager.io.docs[^\>]*\>(?!.*\n?.*cert-manager documentation).*$(?![^<]*<\/pre>))/gm,'$1<%# The link name must be |cert-manager documentation|. %>');
text = text.replace(/(\<a href=.https:..cloud.google.com[^\>]*\>(?!.*\n?.*GCP documentation).*\<.a\>(?![^<]*<\/pre>))/gm,'$1<%# The link name must be |GCP documentation|. %>');
text = text.replace(/(\<a href=.https:..community.pivotal.io[^\>]*\>(?!.*\n?.*VMware Tanzu Support knowledge base).*$(?![^<]*<\/pre>))/gm,'$1<%# Type |in the VMware Tanzu Support knowledge base| somewhere in the cross-reference sentence. %>');
text = text.replace(/(\<a href=.https:..concourse-ci.org[^\>]*\>(?!.*\n?.*Concourse documentation).*\<.a\>(?![^<]*<\/pre>))/gm,'$1<%# The link name must be |Concourse documentation|. %>');
text = text.replace(/(\<a href=.https:..discuss.pivotal.io[^\>]*\>.*$(?![^<]*<\/pre>))/gm,'$1<%# Discuss Pivotal is a deprecated URL. Contact Knowledge Base staff for its replacement. %>');
text = text.replace(/(\<a href=.https:..docs.aws.amazon.com[^\>]*\>(?!.*\n?.*AWS documentation).*\<.a\>(?![^<]*<\/pre>))/gm,'$1<%# The link name must be |AWS documentation|. %>');
text = text.replace(/(\<a href=.https:..docs.cloudfoundry.org[^\>]*\>(?!.*\n?.*Cloud Foundry documentation).*\<.a\>(?![^<]*<\/pre>))/gm,'$1<%# The link name must be |Cloud Foundry documentation|. %>');
text = text.replace(/(\<a href=.https:..docs.docker.com[^\>]*\>(?!.*\n?.*Docker documentation).*\<.a\>(?![^<]*<\/pre>))/gm,'$1<%# The link name must be |Docker documentation|. %>');
text = text.replace(/(\<a href=.https:..docs.spring.io[^\>]*\>(?!.*\n?.*Spring AMQP documentation).*\<.a\>(?![^<]*<\/pre>))/gm,'$1<%# The link name must be |Spring AMQP documentation|. %>');
text = text.replace(/(\<a href=.https:..en.wikipedia[^\>]*\>(?!.*\n?.*Wikipedia).*$(?![^<]*<\/pre>))/gm,'$1<%# Type |in Wikipedia| somewhere in the cross-reference sentence. %>');
text = text.replace(/(\<a href=.https:..github.com[^\>]*\>(?!.*\n?.*GitHub).*$(?![^<]*<\/pre>))/gm,'$1<%# Type |in GitHub| somewhere in the cross-reference sentence. %>');
text = text.replace(/(\<a href=.https:..istio.io.latest.docs[^\>]*\>(?!.*\n?.*Istio documentation).*\<.a\>(?![^<]*<\/pre>))/gm,'$1<%# The link name must be |Istio documentation|. %>');
text = text.replace(/(\<a href=.https:..kubernetes.io.docs[^\>]*\>(?!.*\n?.*Kubernetes documentation).*\<.a\>(?![^<]*<\/pre>))/gm,'$1<%# The link name must be |Kubernetes documentation|. %>');
text = text.replace(/(\<a href=.https:..pvtl.force.com[^\>]*\>.*$(?![^<]*<\/pre>))/gm,'$1<%# Pivotal Force is a deprecated URL. Contact Knowledge Base staff for its replacement. %>');
text = text.replace(/(\<a href=.https:..www.percona.com.doc[^\>]*\>(?!.*\n?.*Percona documentation).*\<.a\>(?![^<]*<\/pre>))/gm,'$1<%# The link name must be |Percona documentation|. %>');
text = text.replace(/(\<a href=.https:..www.rabbitmq.com[^\>]*\>(?!.*\n?.*RabbitMQ documentation).*\<.a\>(?![^<]*<\/pre>))/gm,'$1<%# The link name must be |RabbitMQ documentation|. %>');
text = text.replace(/(\<a id=[^\>]*\.(?![^<]*<\/pre>))/gm,'$1<%# Do not use periods in anchors. %>');
text = text.replace(/(\<a id=[^\d\>]*\d\d[^\>]*\>(?![^<]*<\/pre>))/gm,'$1<%# Place dashes between digits in release notes anchor IDs. %>');
text = text.replace(/(\<a id=[^>]*\>(?!\<\/a\>)(?![^<]*<\/pre>))/gm,'$1<%# Add the closing anchor ID tag immediately after the opening tag. %>');
text = text.replace(/(\<code\>kubectl\<\/code\>(?![^<]*<\/pre>))/gm,'$1<%# Do not format |kubectl| as code. %>');
text = text.replace(/(\<h\d\>\s*\d\.(?![^<]*<\/pre>))/gm,'$1<%# Do not format a numbered step as a header. %>');
text = text.replace(/(\<h1\>(?![^<]*<\/pre>))/gm,'$1<%# H1 headers are not allowed within topics. %>');
text = text.replace(/(\<img src=.[^\.]*\.png. alt=\W.{0,44}\W\>(?![^<]*<\/pre>))/gm,'$1<%# Alt text must describe the image in detail. %>');
text = text.replace(/(\<img src=(?!.*alt=.).*$(?![^<]*<\/pre>))/gm,'$1<%# Images require alt text. %>');
text = text.replace(/(\<strong\>Important\b(?![^<]*<\/pre>))/gm,'$1<%# The only boxes we use are Note and Warning. %>');
text = text.replace(/(\<td\>\<\/td\>(?![^<]*<\/pre>))/gm,'$1<%# Insert |<em>n/a</em>| within purposefully empty cells. %>');
text = text.replace(/(\<td\>\s*n\/a(?![^<]*<\/pre>))/gm,'$1<%# Insert |<em>n/a</em>| within purposefully empty cells. %>');
text = text.replace(/(\|(?!(\n))\s*\|(?![^<]*<\/pre>))/gm,'$1<%# Insert |_n/a_| within purposefully empty cells. %>');
text = text.replace(/(\|(?!(\n))\s*n\/a(?![^<]*<\/pre>))/gm,'$1<%# Insert |_n/a_| within purposefully empty cells. %>');
text = text.replace(/(\bAPP(?!-NAME)(?![^<]*<\/pre>))/gm,'$1<%# |APP-NAME| is preferred. %>');
text = text.replace(/(\bENV\b(?![^<]*<\/pre>))/gm,'$1<%# |BOSH-ENVIRONMENT| is preferred. %>');
text = text.replace(/(\bHOST\b(?![^<]*<\/pre>))/gm,'$1<%# |BOSH-DIRECTOR-IP| is preferred. %>');
text = text.replace(/(\bPRIVATE-KEY-FILE\b(?![^<]*<\/pre>))/gm,'$1<%# |PATH-TO-PRIVATE-KEY| is preferred. %>');
text = text.replace(/(\brun:[\s\n]*\<code\>[\s\n\~]*\$(?![^<]*<\/pre>))/gm,'$1<%# We only include dollar signs in terminal snippet examples. %>');
text = text.replace(/(\brun:[\s\n]*`+[\s\n\~]*\$(?![^<]*<\/pre>))/gm,'$1<%# We only include dollar signs in terminal snippet examples. %>');
text = text.replace(/(\brun[^:]*:[\s\n]*\<pre class(?![^<]*<\/pre>))/gm,'$1<%# Commands are formatted in triple backtick blocks, not terminal snippets. %>');
text = text.replace(/(\brunning[^:]*:[\s\n]*\<code\>[\s\n\~]*\$(?![^<]*<\/pre>))/gm,'$1<%# We only include dollar signs in terminal snippet examples. %>');
text = text.replace(/(\brunning[^:]*:[\s\n]*`+[\s\n\~]*\$(?![^<]*<\/pre>))/gm,'$1<%# We only include dollar signs in terminal snippet examples. %>');
text = text.replace(/(\bSERVICE-INSTANCE(?!-NAME)(?![^<]*<\/pre>))/gm,'$1<%# |SERVICE-INSTANCE-NAME| is preferred. %>');
text = text.replace(/(\bVERSION(?!-NUMBER)(?![^<]*<\/pre>))/gm,'$1<%# |VERSION-NUMBER| is preferred. %>');
text = text.replace(/(\bversion[\s\n][\d\.]+(?![^<]*<\/pre>))/gm,'$1<%# |v#| is the preferred style. %>');
text = text.replace(/(\bVersion[\s\n][\d\.]+(?![^<]*<\/pre>))/gm,'$1<%# |v#| is the preferred style. %>');
text = text.replace(/(\bversions[\s\n][\d\.]+(?![^<]*<\/pre>))/gm,'$1<%# |v#| is the preferred style. %>');
text = text.replace(/(\bVersions[\s\n][\d\.]+(?![^<]*<\/pre>))/gm,'$1<%# |v#| is the preferred style. %>');
text = text.replace(/(\bVersions[\s\n]\<\= [\d\.]+(?![^<]*<\/pre>))/gm,'$1<%# |v#| is the preferred style. %>');
text = text.replace(/(\bversions[\s\n]\<\= [\d\.]+(?![^<]*<\/pre>))/gm,'$1<%# |v# or earlier| is the preferred style. %>');
text = text.replace(/(\bVersions[\s\n]\>\=[\s\n][\d\.]+(?![^<]*<\/pre>))/gm,'$1<%# |v#| is the preferred style. %>');
text = text.replace(/(\bversions[\s\n]\>\=[\s\n][\d\.]+(?![^<]*<\/pre>))/gm,'$1<%# |v# or earlier| is the preferred style. %>');
text = text.replace(/(\bYOUR-PRIVATE-KEY\b(?![^<]*<\/pre>))/gm,'$1<%# |PATH-TO-PRIVATE-KEY| is preferred. %>');
text = text.replace(/(\bYOUR-VM\b(?![^<]*<\/pre>))/gm,'$1<%# Specify the VM, as in |OPS-MANAGER-VM| or |STEMCELL-BASE-VM|. %>');
text = text.replace(/(\n```[^`]*[A-Z][A-Z]+[^`]*```(?![\s\n]*Where)(?![^<]*<\/pre>))/gm,'$1<%# Define any non-obvious placeholders present in the code snippet in the style of |Where PLACEHOLDER is...| %>');
text = text.replace(/(\sCVE-\d{4}(?!.*\n?([^\[]*\]|[^\>]*\<\/a\>)).*$(?![^<]*<\/pre>))/gm,'$1<%# Link to the CVE page at tanzu.vmware.com/security or cve.mitre.org. %>');
text = text.replace(/(##+[^\n]*\>\s*[A-Z][a-z-]+ing\W(?![^<]*<\/pre>))/gm,'$1<%# Procedure headers use imperatives, not gerunds. %>');
text = text.replace(/(##+\s*\d\.(?![^<]*<\/pre>))/gm,'$1<%# Do not format a numbered step as a header. %>');
text = text.replace(/(`.*[_\A-Z].*`[\s\n]errand\b(?![^<]*<\/pre>))/gm,'$1<%# Errands tend to be lowercase and they use dashes instead of underscores or spaces. %>');
text = text.replace(/(`.*[_\A-Z].*`[\s\n]errands\b(?![^<]*<\/pre>))/gm,'$1<%# Errands tend to be lowercase and they use dashes instead of underscores or spaces. %>');
text = text.replace(/(`kubectl`(?![^<]*<\/pre>))/gm,'$1<%# Do not format |kubectl| as code. %>');
text = text.replace(/(`pdc`[\s\n]CLI tool\b(?![^<]*<\/pre>))/gm,'$1<%# |<%= vars.product_abbr %> CLI tool| is preferred. %>');
text = text.replace(/(`pdc`[\s\n]cli tool\b(?![^<]*<\/pre>))/gm,'$1<%# |<%= vars.product_abbr %> CLI tool| is preferred. %>');
text = text.replace(/(`pdc`[\s\n]CLI Tool\b(?![^<]*<\/pre>))/gm,'$1<%# |<%= vars.product_abbr %> CLI tool| is preferred. %>');
text = text.replace(/(^[\s]*(?!\<li\>)[^\<]*\<a href=.#[^\>]*.>(?![^\.]*\n?[^\.]*(above|below|earlier|previously|before|later)).*$(?![^<]*<\/pre>))/gm,'$1<%# After giving the anchor, state whether it is |above| or |below|. %>');
text = text.replace(/(^[^\n#]+#{2,6}(?![^<]*<\/pre>))/gm,'$1<%# Delete any whitespace or other characters before this header. %>');
text = text.replace(/(^\[[^\]]*\]\(#[^\)]*\)(?![^\.]*\n?[^\.]*(above|below|earlier|previously|before|later)).*$(?![^<]*<\/pre>))/gm,'$1<%# After giving the anchor, state whether it is |above| or |below|. %>');
text = text.replace(/(^##\s*[A-Z](?!(eatures|ecurity Fix|esolved Issue|nown Issue|ompatibility|ackages)).*$(?![^<]*<\/pre>))/gm,'$1<%# Make this header an anchor unless the subnav is unusually long. %>');
text = text.replace(/(^###\s*[A-Z](?!(eatures|ecurity Fix|esolved Issue|nown Issue|ompatibility|ackages)).*$(?![^<]*<\/pre>))/gm,'$1<%# Make this header an anchor unless the subnav is unusually long. %>');
text = text.replace(/(Amazon documentation\](?![^<]*<\/pre>))/gm,'$1<%# The xref link name must be |AWS documentation|. %>');
text = text.replace(/(docs-pcf-staging.cfapps.io.*$(?![^<]*<\/pre>))/gm,'$1<%# Do not link to staging versions of the docs. %>');
text = text.replace(/(html#[a-z-]*\)[\s\n]above\b(?![^<]*<\/pre>))/gm,'$1<%# Delete |above|: the reference is in another topic. %>');
text = text.replace(/(html#[a-z-]*\)[\s\n]below\b(?![^<]*<\/pre>))/gm,'$1<%# Delete |below|: the reference is in another topic. %>');
text = text.replace(/(PATH-TO-MANIFEST[^\.](?![^<]*<\/pre>))/gm,'$1<%# Include the file extension, as in |PATH-TO-MANIFEST.yml|. %>');
text = text.replace(/(PATH-TO-VARIABLES[^\.](?![^<]*<\/pre>))/gm,'$1<%# Include the file extension, as in |PATH-TO-VARIABLES.yml|. %>');
text = text.replace(/(Where `[A-Za-z]*_(?![^<]*<\/pre>))/gm,'$1<%# Use dashes for spacing in placeholders, not underscores.  %>');

// Comment on Markdown tags between HTML tags

text = text.replace(/(__(?=[^<]*<\/))/gm,'$1<%# Do not use Markdown tags inside HTML tags. %>');
text = text.replace(/(\!\[(?=[^<]*<\/))/gm,'$1<%# Do not use Markdown tags inside HTML tags. %>');
text = text.replace(/(\[.*\]\(.*\)(?=[^<]*<\/))/gm,'$1<%# Do not use Markdown tags inside HTML tags. %>');
text = text.replace(/(\*\*(?=[^<]*<\/))/gm,'$1<%# Do not use Markdown tags inside HTML tags. %>');
text = text.replace(/(`(?=[^<]*<\/))/gm,'$1<%# Do not use Markdown tags inside HTML tags. %>');

// Comment on style errors outside code

text = text.replace(/(,(?=[\s\n]then[^\.]*\.\n)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Consider deleting |then| or writing |and| after the comma. %>');
text = text.replace(/((^|[^r][\s\n])PCF(?![\s\n](Dev|Development|Solutions))(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.platform_old %>');
text = text.replace(/((^|[^r][\s\n])Pivotal[\s\n]Cloud[\s\n]Foundry(?![\s\n](Dev|Development|Solutions))(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.platform_old %>');
text = text.replace(/((^|[^r][\s\n])Pivotal[\s\n]Platform\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.platform_name %>');
text = text.replace(/((fix|fixes|issue|issues|this[\s\n]release):\n\n\*\s[^\*](?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# In release notes, each feature, KI, and resolved issue needs a run-in heading. %>');
text = text.replace(/([\s\.]\d+\-\d+(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use &ndash; for a range, not a regular dash. %>');
text = text.replace(/([\s\n]\/[^\s\/\*](?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Consider putting in code tags. %>');
text = text.replace(/([\w][\s\n]{0,1}On-demand(?!(\n|\s)(Broker|broker))(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |On-Demand| is preferred -- capitalize the |D| if you capitalized the |O|. %>');
text = text.replace(/([^:]\n\n\s*\d\.\sRun:(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Write what this command does. As in |Do x by running:| or |To do x, run:|. %>');
text = text.replace(/([^\.\*\+:-]*,[^\.\*\+:-]*,[^\.\*\+:-]*,[^\.\*\+:-]*,[^\.\*\+:-]*,(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# If a list, reformat it as bullets. If this is a rambling sentence, break it up into smaller sentences. %>');
text = text.replace(/([^\.\n]\s\bChart\b(?=[\s\n][\.a-z]+[\s\n][\.a-z]+)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |chart| is preferred unless part of a pronoun. %>');
text = text.replace(/([^\.`]yaml\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |YAML| is preferred. %>');
text = text.replace(/([^\s\n]\<\/em\>(?![\s\n\<\.:,])(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# A space is likely missing here. %>');
text = text.replace(/([^\s\n]\<\/strong\>(?![\s\n\<\.:,])(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# A space is likely missing here. %>');
text = text.replace(/([^\s\n\>]\<em\>(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# A space is likely missing here. %>');
text = text.replace(/([^\s\n\>]\<strong\>(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# A space is likely missing here. %>');
text = text.replace(/([^bo][\s\n]button(?![^\[\(]*[\]\)])(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Delete |button| if redundant. For example, write |click Save| instead of |Click the Save button|. %>');
text = text.replace(/([^f][\s\n]the[\s\n]following:(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# To introduce steps just write |To do x:| %>');
text = text.replace(/([^l][\s\n]Compliance[\s\n]Scanner(?![^\(]*\)[\s\n]%\>)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_short or, if in alt text, #{vars.product_short} %>');
text = text.replace(/([^l][\s\n]Concourse(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_short or, if in alt text, #{vars.product_short} %>');
text = text.replace(/([^l][\s\n]Developer[\s\n]Console(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_short or, if in alt text, #{vars.product_short} %>');
text = text.replace(/([^l][\s\n]Event[\s\n]Alerts(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_short or, if in alt text, #{vars.product_short} %>');
text = text.replace(/([^l][\s\n]FIM(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_abbr or, if in alt text, #{vars.product_abbr} %>');
text = text.replace(/([^l][\s\n]GemFire(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_short or, if in alt text, #{vars.product_short} %>');
text = text.replace(/([^l][\s\n]Greenplum(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_short or, if in alt text, #{vars.product_short} %>');
text = text.replace(/([^l][\s\n]Healthwatch(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_short or, if in alt text, #{vars.product_short} %>');
text = text.replace(/([^l][\s\n]IPsec(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_short or, if in alt text, #{vars.product_short} %>');
text = text.replace(/([^l][\s\n]Isolation[\s\n]Segment(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_short or, if in alt text, #{vars.product_short} %>');
text = text.replace(/([^l][\s\n]On-Demand[\s\n]Services[\s\n]SDK(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_short or, if in alt text, #{vars.product_short} %>');
text = text.replace(/([^l][\s\n]on-demand[\s\n]services[\s\n]SDK(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_short or, if in alt text, #{vars.product_short} %>');
text = text.replace(/([^l][\s\n]On[\s\n]Demand[\s\n]Services[\s\n]SDK(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_short or, if in alt text, #{vars.product_short} %>');
text = text.replace(/([^l][\s\n]on[\s\n]demand[\s\n]services[\s\n]SDK(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_short or, if in alt text, #{vars.product_short} %>');
text = text.replace(/([^l][\s\n]Ops[\s\n]Manager(?![\s\n][Dd]irector)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.ops_manager or, if in alt text, #{vars.ops_manager} %>');
text = text.replace(/([^l][\s\n]Postgre[Ss](?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_short or, if in alt text, #{vars.product_short} %>');
text = text.replace(/([^l][\s\n]Push[\s\n]Notification(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_short or, if in alt text, #{vars.product_short} %>');
text = text.replace(/([^l][\s\n]Service[\s\n]Instance[\s\n]Manager(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_short or, if in alt text, #{vars.product_short} %>');
text = text.replace(/([^l][\s\n]Single[\s\n]Sign-On(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_short or, if in alt text, #{vars.product_short} %>');
text = text.replace(/([^r][\s\n]image[\s\n]registry\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# If generic, |container image registry| on first use. If VMware-provided, |Tanzu Network Registry| on first use. In both cases, |registry| thereafter except where risking ambiguity. %>');
text = text.replace(/([^r][a-z][\s\n]Tanzu[\s\n]Network(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_network or, if in alt text, #{vars.product_network} %>');
text = text.replace(/([^r][a-z][\s\n]Tanzu[\s\n]network(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_network or, if in alt text, #{vars.product_network} %>');
text = text.replace(/([^s][\s\n]marketplace\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Marketplace| is preferred. %>');
text = text.replace(/([^u][^b][\s\n]Maestro\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not shorten |CredHub Maestro| to just |Maestro| %>');
text = text.replace(/([A-Z][A-Z]+'s\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# To make an abbreviation a plural, just add a lowercase |s| without an apostrophe. %>');
text = text.replace(/([a-z]*[\s\n]or[\s\n][a-z]*[\s\n]not\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Redundant? %>');
text = text.replace(/([A-Z]+[a-z]+[\s\n]style(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Check if |style| needs a hyphen. %>');
text = text.replace(/([a-z`\*]+,[\s\n][a-z`\*]+[\s\n]and[\s\n][a-z`\*]+(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Insert the Oxford comma if it is missing here. %>');
text = text.replace(/([a-z`\*]+,[\s\n][a-z`\*]+[\s\n]or[\s\n][a-z`\*]+(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Insert the Oxford comma if it is missing here. %>');
text = text.replace(/([A-Za-z][a-z]+teen\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use numerals for numbers greater than nine. %>');
text = text.replace(/(\(Go\)[\s\n]Router\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Gorouter| is preferred. %>');
text = text.replace(/(\(s\)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not combine a singular and a plural. Maybe write |one or more| instead. %>');
text = text.replace(/(\|[\s\n]*\*(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Put the asterisk in superscript tags. %>');
text = text.replace(/(\b[^-]check[\s\n](?!mark)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |verify|, |ensure|, and |confirm| are all preferred. %>');
text = text.replace(/(\b[a-z]\.\s[A-Z](?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Write all ordered steps as numbers. %>');
text = text.replace(/(\ba[\s\n]deploy\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |a deployment| is preferred. %>');
text = text.replace(/(\bA[\s\n]deploy\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |A deployment| is preferred. %>');
text = text.replace(/(\ba[\s\n]given\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Redundant? %>');
text = text.replace(/(\ba[\s\n]previous[\s\n]step\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Write |earlier in this procedure| or, if referring to a separate procedure, link to it. %>');
text = text.replace(/(\ba[\s\n]RSU\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |an RSU| is preferred. %>');
text = text.replace(/(\bA[\s\n]RSU\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |an RSU| is preferred. %>');
text = text.replace(/(\ba[\s\n]SQL\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |an SQL| is preferred. %>');
text = text.replace(/(\baddon\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |add-on| is preferred. %>');
text = text.replace(/(\bADFS\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Write |AD FS| per the Microsoft preference. %>');
text = text.replace(/(\badministrate\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |administer| is preferred or, ideally, a plainer synonym such as |manage|. %>');
text = text.replace(/(\bAdministrate\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Administer| is preferred or, ideally, a plainer synonym such as |Manage|. %>');
text = text.replace(/(\badministrated\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |administered| is preferred or, ideally, a plainer synonym such as |managed|. %>');
text = text.replace(/(\badministrates\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |administers| is preferred or, ideally, a plainer synonym such as |manages|. %>');
text = text.replace(/(\badministrating\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |administering| is preferred or, ideally, a plainer synonym such as |managing|. %>');
text = text.replace(/(\bAdministrating\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Administering| is preferred or, ideally, a plainer synonym such as |Managing|. %>');
text = text.replace(/(\badministrator\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |admin| is preferred. %>');
text = text.replace(/(\bAdministrator\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Admin| is preferred. %>');
text = text.replace(/(\bAdministrators\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Admins| is preferred. %>');
text = text.replace(/(\badministrators\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |admins| is preferred. %>');
text = text.replace(/(\baffect\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Consider using a more precise verb. %>');
text = text.replace(/(\bafter[\s\n]you[\s\n]are[\s\n]satisfied\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Redundant? %>');
text = text.replace(/(\bAfter[\s\n]you[\s\n]are[\s\n]satisfied\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Redundant? %>');
text = text.replace(/(\bAI\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |application instance| is preferred. %>');
text = text.replace(/(\bair-gap\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The noun is |air gap|. %>');
text = text.replace(/(\bair[\s\n]gapped\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |air-gapped| is preferred. %>');
text = text.replace(/(\bAir[\s\n]gapped\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Air-gapped| is preferred. %>');
text = text.replace(/(\bairgap\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |air-gap| is preferred. %>');
text = text.replace(/(\bAirgap\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Air-gap| is preferred. %>');
text = text.replace(/(\bairgapped\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |air-gapped| is preferred. %>');
text = text.replace(/(\bAirgapped\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Air-gapped| is preferred. %>');
text = text.replace(/(\balert[\s\n]box\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |dialog box| is preferred. %>');
text = text.replace(/(\bAlert[\s\n]box\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |dialog box| is preferred. %>');
text = text.replace(/(\bAlert[\s\n]window\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |dialog box| is preferred. %>');
text = text.replace(/(\balert[\s\n]window\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |dialog box| is preferred. %>');
text = text.replace(/(\ball[\s\n]the[\s\n]necessary\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |all| might be redundant %>');
text = text.replace(/(\bAll[\s\n]the[\s\n]necessary\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |All| might be redundant %>');
text = text.replace(/(\ballow[\s\n]list\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |allowlist| is preferred. No space. %>');
text = text.replace(/(\balpha-numeric\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |alphanumeric| is preferred. %>');
text = text.replace(/(\bAmazon[\s\n]Web[\s\n]Service\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Amazon Web Services| on first use and |AWS| thereafter. %>');
text = text.replace(/(\bAmazon[\s\n]Web[\s\n]Services(?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |AWS| after the first use. %>');
text = text.replace(/(\ban[\s\n]earlier[\s\n]step\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Write |earlier in this procedure| or, if referring to a separate procedure, link to it. %>');
text = text.replace(/(\ban[\s\n]UAA\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |a UAA| is preferred. %>');
text = text.replace(/(\bAn[\s\n]UAA\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |A UAA| is preferred. %>');
text = text.replace(/(\band\/or\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |or| is preferred. %>');
text = text.replace(/(\banti-virus\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |antivirus| is preferred. %>');
text = text.replace(/(\bapi\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |API| is preferred. %>');
text = text.replace(/(\bApi\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |API| is preferred. %>');
text = text.replace(/(\bapp[\s\n]container\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |application container| is preferred. %>');
text = text.replace(/(\bApp[\s\n]Developer\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |app developer| is preferred. %>');
text = text.replace(/(\bApp[\s\n]manager\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Apps Manager| is preferred. %>');
text = text.replace(/(\bapp[\s\n]runtime(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.app_runtime_full or, if in alt text, #{vars.app_runtime_full} %>');
text = text.replace(/(\bapplication[\s\n]developer\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |app developer| is preferred. %>');
text = text.replace(/(\bapplication[\s\n]program[\s\n]interface\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |API| is preferred. %>');
text = text.replace(/(\bapplication[\s\n]security[\s\n]group\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |ASG| is preferred. %>');
text = text.replace(/(\bApplication[\s\n]Transformation\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |App Modernization| is preferred. %>');
text = text.replace(/(\bApplication[\s\n]VM\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |host VM| is preferred. %>');
text = text.replace(/(\bapplications(?![\s\n][Mm]anager)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |apps| is preferred. %>');
text = text.replace(/(\bApplications(?![\s\n][Mm]anager)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Apps| is preferred. %>');
text = text.replace(/(\bAppTX\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |App Modernization| is preferred. %>');
text = text.replace(/(\bApr\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |April| is preferred. %>');
text = text.replace(/(\baren't\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bartefact\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |artifact| is preferred. %>');
text = text.replace(/(\bArtefact\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Artifact| is preferred. %>');
text = text.replace(/(\bassist[\s\n]with\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Simply |help| is preferred. %>');
text = text.replace(/(\bassistance\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |help| is preferred. %>');
text = text.replace(/(\bassists[\s\n]with\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Simply |helps| is preferred. %>');
text = text.replace(/(\bAssuming\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |If| might be better here. %>');
text = text.replace(/(\bat[\s\n]the[\s\n]moment\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# 1st preference: delete. 2nd preference: replace these words with |currently|. %>');
text = text.replace(/(\bAt[\s\n]the[\s\n]moment\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# 1st preference: delete. 2nd preference: replace these words with |Currently|. %>');
text = text.replace(/(\bat[\s\n]the[\s\n]time[\s\n]of[\s\n]writing\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# 1st preference: delete. 2nd preference: replace these words with |currently|. %>');
text = text.replace(/(\bAt[\s\n]the[\s\n]time[\s\n]of[\s\n]writing\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# 1st preference: delete. 2nd preference: replace these words with |Currently|. %>');
text = text.replace(/(\bAug\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |August| is preferred. %>');
text = text.replace(/(\bauth\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |authentication| is preferred. %>');
text = text.replace(/(\bavailability[\s\n]zone[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |AZ| after the first use. %>');
text = text.replace(/(\bAvailability[\s\n]zone[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |AZ| after the first use. %>');
text = text.replace(/(\bAvailability[\s\n]Zone\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |availability zone (AZ)| on first use and |AZ| thereafter. %>');
text = text.replace(/(\bavailability[\s\n]zones[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |AZ| after the first use. %>');
text = text.replace(/(\bAvailability[\s\n]zones[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |AZ| after the first use. %>');
text = text.replace(/(\bAWS[\s\n]S3(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Amazon S3| is preferred. %>');
text = text.replace(/(\bback-up\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The noun is |backup| and the verb is |back up|. %>');
text = text.replace(/(\bBack-up\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The noun is |backup| and the verb is |back up|. %>');
text = text.replace(/(\bbe[\s\n][a-z-]*ed[\s\n]by\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Active voice is preferred. %>');
text = text.replace(/(\bbe[\s\n]sure\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Redundant? |ensure| or even |before| might be better. %>');
text = text.replace(/(\bBe[\s\n]sure\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Redundant? |Ensure| or even |Before| might be better. %>');
text = text.replace(/(\bBefore\b[^,]*,[\s\n]first\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |first| is likely redundant. %>');
text = text.replace(/(\bbefore\b[^,]*,[\s\n]first\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |first| is likely redundant. %>');
text = text.replace(/(\bBest[\s\n]Practices\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Best Practice sections are discouraged. Check if the material could be placed somewhere else. %>');
text = text.replace(/(\bBeta\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |beta| is preferred. %>');
text = text.replace(/(\bBETA\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |beta| is preferred. %>');
text = text.replace(/(\bBig[\s\n]Data\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |big data| is preferred. %>');
text = text.replace(/(\bblack[\s\n]list\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Vmware insists on |denylist|. No space. %>');
text = text.replace(/(\bblacklist\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Vmware insists on |denylist|. No space. %>');
text = text.replace(/(\bblob[\s\n]store\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |blobstore| is preferred. %>');
text = text.replace(/(\bBlue-Green[\s\n]deployment\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |blue-green deployment| is preferred. %>');
text = text.replace(/(\bboot[\s\n]the\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |start up the| is preferred. %>');
text = text.replace(/(\bBOSH-init\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |bosh-init| is preferred. %>');
text = text.replace(/(\bBosh(?![\n\s-]lite)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |BOSH| is preferred. %>');
text = text.replace(/(\bbosh[\s\n](?![\n\s-]lite)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |BOSH| is preferred. %>');
text = text.replace(/(\bBOSH[\s\n]director\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |BOSH Director| is preferred. %>');
text = text.replace(/(\bBOSH[\s\n]Health[\s\n]Monitor[\s\n]metrics\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |BOSH health metrics| is preferred. %>');
text = text.replace(/(\bbosh[\s\n]lite\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |BOSH-Lite| is preferred. %>');
text = text.replace(/(\bBOSH[\s\n]lite\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |BOSH-Lite| is preferred. %>');
text = text.replace(/(\bBOSH[\s\n]Lite\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |BOSH-Lite| is preferred. %>');
text = text.replace(/(\bBOSH[\s\n]metrics\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |BOSH health metrics| is preferred. %>');
text = text.replace(/(\bBOSH[\s\n]System[\s\n]Metrics\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |BOSH health metrics| is preferred. %>');
text = text.replace(/(\bBPM\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |bpm| is preferred as this is the BOSH docs style. %>');
text = text.replace(/(\bBrokerpak\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Only capitalize |brokerpak| when it is in a title or starts a sentence. %>');
text = text.replace(/(\bBrokerpaks\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Only capitalize |brokerpaks| when it is in a title or starts a sentence. %>');
text = text.replace(/(\bbug\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |issue| is preferred. %>');
text = text.replace(/(\bBug\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Issue| is preferred. %>');
text = text.replace(/(\bbugs\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |issue| is preferred. %>');
text = text.replace(/(\bBugs\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Issue| is preferred. %>');
text = text.replace(/(\bbump\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |update| is preferred. %>');
text = text.replace(/(\bBump\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Update| is preferred. %>');
text = text.replace(/(\bBumped\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Updated| is preferred. %>');
text = text.replace(/(\bbumped\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |updated| is preferred. %>');
text = text.replace(/(\bbumps\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |updates| is preferred. %>');
text = text.replace(/(\bBumps\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Updates| is preferred. %>');
text = text.replace(/(\bcan't\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bcan[\s\n]be\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Consider switching to active voice. %>');
text = text.replace(/(\bcan[\s\n]get[\s\n][a-z-]*ed\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |could be| is likely the correct grammar here if sticking with passive voice. %>');
text = text.replace(/(\bcatalogue\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |catalog| is preferred. %>');
text = text.replace(/(\bcauses[\s\n]downtime[\s\n]of[\s\n]the\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |causes downtime for the| is preferred. %>');
text = text.replace(/(\bcauses[\s\n]downtime[\s\n]on[\s\n]the\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |causes downtime for the| is preferred. %>');
text = text.replace(/(\bcauses[\s\n]downtime[\s\n]to[\s\n]the\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |causes downtime for the| is preferred. %>');
text = text.replace(/(\bCC[\s\n]API\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |CAPI| is preferred. %>');
text = text.replace(/(\bCell[\s\n]VM\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |host VM| is preferred. %>');
text = text.replace(/(\bcert\b[^-`](?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |certificate| is preferred. %>');
text = text.replace(/(\bcertificate[\s\n]authority[\s\n]certificate[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |certificate authority (CA) certificate| on first use. |CA certificate| thereafter. %>');
text = text.replace(/(\bCertificate[\s\n]Authority[\s\n]certificate[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |certificate authority (CA) certificate| on first use. |CA certificate| thereafter. %>');
text = text.replace(/(\bcertificate[\s\n]authority[\s\n]certificates[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |certificate authority (CA) certificate| on first use. |CA certificate| thereafter. %>');
text = text.replace(/(\bCertificate[\s\n]Authority[\s\n]certificates[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |certificate authority (CA) certificate| on first use. |CA certificate| thereafter. %>');
text = text.replace(/(\bcertificate[\s\n]signing[\s\n]request[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |CSR| after first use. %>');
text = text.replace(/(\bCertificate[\s\n]signing[\s\n]request[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |CSR| after first use. %>');
text = text.replace(/(\bCertificate[\s\n]Signing[\s\n]Request[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |CSR| after first use. %>');
text = text.replace(/(\bcertificate[\s\n]signing[\s\n]requests[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |CSR| after first use. %>');
text = text.replace(/(\bCertificate[\s\n]signing[\s\n]requests[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |CSR| after first use. %>');
text = text.replace(/(\bCertificate[\s\n]Signing[\s\n]Requests[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |CSR| after first use. %>');
text = text.replace(/(\bcerts\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |certificates| is preferred. %>');
text = text.replace(/(\bCF-compatible[\s\n]CNB[\s\n]buildpack\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |CF-compatible CNB| is preferred. %>');
text = text.replace(/(\bCF[\s\n](?![Cc][Ll][Ii])(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Cloud Foundry| is preferred. %>');
text = text.replace(/(\bcf[\s\n]cli\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The brand name is shortened as |cf CLI|. %>');
text = text.replace(/(\bCF[\s\n]CLI\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The brand name is shortened as |cf CLI|. %>');
text = text.replace(/(\bcf[\s\n]push\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# If code, add code tags and sandwich between |the| and |command|. %>');
text = text.replace(/(\bchart[\s\n]museum\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |ChartMuseum| is preferred. %>');
text = text.replace(/(\bChart[\s\n]Museum\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |ChartMuseum| is preferred. %>');
text = text.replace(/(\bchartmuseum\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |ChartMuseum| is preferred. %>');
text = text.replace(/(\bcheck[\s\n]box\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |checkbox| is preferred. %>');
text = text.replace(/(\bCheck\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Verify|, |Ensure|, and |Confirm| are all preferred. %>');
text = text.replace(/(\bcheckmark\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |check mark| is preferred. %>');
text = text.replace(/(\bchooses[\s\n]to\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Consider if |choose| is redundant. %>');
text = text.replace(/(\bclean-up\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The verb is |clean up|. The noun and adjective are both |cleanup|. %>');
text = text.replace(/(\bclear[\s\n]text\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Unencrypted text is |plaintext|. Unformatted text is |plain text|. %>');
text = text.replace(/(\bClear[\s\n]text\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Unencrypted text is |plaintext|. Unformatted text is |plain text|. %>');
text = text.replace(/(\bclick[\s\n][A-Z](?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Embolden the names of UI elements. %>');
text = text.replace(/(\bClick[\s\n][A-Z](?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Embolden the names of UI elements. %>');
text = text.replace(/(\bclick[\s\n]on\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |click| is preferred. %>');
text = text.replace(/(\bclick[\s\n]the[\s\n][A-Z](?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Embolden the names of UI elements. %>');
text = text.replace(/(\bClick[\s\n]the[\s\n][A-Z](?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Embolden the names of UI elements. %>');
text = text.replace(/(\bcloud-native-buildpack\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Cloud Native Buildpack| is preferred. %>');
text = text.replace(/(\bCloud-Native-buildpack\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Cloud Native Buildpack| is preferred. %>');
text = text.replace(/(\bCloud-Native-Buildpack\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Cloud Native Buildpack| is preferred. %>');
text = text.replace(/(\bcloud-native[\s\n]application[\s\n]bundle\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Cloud Native Application Bundle| has no hyphen and is capitalized. Shorten to |CNAB| after first use. %>');
text = text.replace(/(\bCloud-native[\s\n]application[\s\n]bundle\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Cloud Native Application Bundle| has no hyphen and is capitalized. Shorten to |CNAB| after first use. %>');
text = text.replace(/(\bCloud-native[\s\n]Buildpack\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Cloud Native Buildpack| is preferred. %>');
text = text.replace(/(\bCloud-Native[\s\n]Buildpack\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Cloud Native Buildpack| is preferred. %>');
text = text.replace(/(\bCloud-Native[\s\n]buildpack\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Cloud Native Buildpack| is preferred. %>');
text = text.replace(/(\bCloud[\s\n]Controller[\s\n]API\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# 1st use: |Cloud Foundry API (CAPI)|. Subsequent uses: |CAPI|. %>');
text = text.replace(/(\bCloud[\s\n]Controller[\s\n]Database\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Cloud Controller database| is preferred. %>');
text = text.replace(/(\bcloud[\s\n]controller\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Cloud Controller| is preferred. %>');
text = text.replace(/(\bCloud[\s\n]Foundries\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Cloud Foundry| has no plural. |Cloud Foundry deployments| is likely what is meant. %>');
text = text.replace(/(\bcloud[\s\n]foundries\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Cloud Foundry| has no plural. |Cloud Foundry deployments| is likely what is meant. %>');
text = text.replace(/(\bCloud[\s\n]foundries\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Cloud Foundry| has no plural. |Cloud Foundry deployments| is likely what is meant. %>');
text = text.replace(/(\bCloud[\s\n]Foundry[\s\n]API(?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |CAPI| after the first use. %>');
text = text.replace(/(\bCloud[\s\n]Foundry[\s\n]Organisation\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Cloud Foundry org| or just |org| is preferred. %>');
text = text.replace(/(\bCloud[\s\n]Foundry[\s\n]Organization\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Cloud Foundry org| or just |org| is preferred. %>');
text = text.replace(/(\bCloud[\s\n]Native-Buildpack\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Cloud Native Buildpack| is preferred. %>');
text = text.replace(/(\bCloud[\s\n]Native-buildpack\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Cloud Native Buildpack| is preferred. %>');
text = text.replace(/(\bCloud[\s\n]native-Buildpack\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Cloud Native Buildpack| is preferred. %>');
text = text.replace(/(\bcloud[\s\n]native(?!(-|\s)(buildpack|Buildpack|application[\s\n]bundle|Applicable[\s\n]Bundle))(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |cloud-native| is preferred. %>');
text = text.replace(/(\bCloud[\s\n]native[\s\n]application[\s\n]bundle\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Cloud Native Application Bundle| is capitalized. Shorten to |CNAB| after first use. %>');
text = text.replace(/(\bcloud[\s\n]native[\s\n]application[\s\n]bundle\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Cloud Native Application Bundle| is capitalized. Shorten to |CNAB| after first use. %>');
text = text.replace(/(\bcloud[\s\n]native[\s\n]buildpack\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Cloud Native Buildpack| is preferred. %>');
text = text.replace(/(\bCloud[\s\n]Native[\s\n]buildpack\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Cloud Native Buildpack| is preferred. %>');
text = text.replace(/(\bCloud[\s\n]Service[\s\n]Broker(?![\s\n]for)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_short or, if in alt text, #{vars.product_short} %>');
text = text.replace(/(\bCloud[\s\n]Service[\s\n]Broker[\s\n]for[\s\n]VMware[\s\n]Tanzu(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bCloudController\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Cloud Controller| is preferred. %>');
text = text.replace(/(\bCloudformation\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |CloudFormation| is preferred. %>');
text = text.replace(/(\bCloudFoundry\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Cloud Foundry| is preferred %>');
text = text.replace(/(\bCNAB[\s\n]bundle\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Delete |bundle| -- it is already in the acronym |CNAB|. %>');
text = text.replace(/(\bCNAB[\s\n]Bundle\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Delete |Bundle| -- it is already in the acronym |CNAB|. %>');
text = text.replace(/(\bcollocate\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |co-locate| is now preferred. %>');
text = text.replace(/(\bcollocated\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |co-located| is now preferred. %>');
text = text.replace(/(\bcollocates\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |co-locates| is now preferred. %>');
text = text.replace(/(\bcollocating\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |co-locating| is preferred. %>');
text = text.replace(/(\bCollocating\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Co-locating| is preferred. %>');
text = text.replace(/(\bcolocate\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |co-locate| is now preferred. %>');
text = text.replace(/(\bcolocated\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |co-located| is now preferred. %>');
text = text.replace(/(\bcolocates\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |co-locates| is now preferred. %>');
text = text.replace(/(\bcolocating\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |co-locating| is preferred. %>');
text = text.replace(/(\bColocating\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Co-locating| is preferred. %>');
text = text.replace(/(\bcoming[\s\n]soon\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Only document what exists. There are legal ramifications to making promises. %>');
text = text.replace(/(\bcommand[\s\n]below\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |To X, run:| and |X by running:| are preferred. %>');
text = text.replace(/(\bCommand[\s\n]Line[\s\n]Interface[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |CLI| after first use. %>');
text = text.replace(/(\bCommand[\s\n]line[\s\n]interface[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |CLI| after first use. %>');
text = text.replace(/(\bcommand[\s\n]line[\s\n]interface[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |CLI| after first use. %>');
text = text.replace(/(\bcommand[\s\n]shell\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |shell| is preferred. %>');
text = text.replace(/(\bcompiletime\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |compile time| is preferred. %>');
text = text.replace(/(\bcomplete[\s\n](\w+[\s\n]|\w+[\s\n]\w+[\s\n])procedure\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |follow| is preferred over |complete|. %>');
text = text.replace(/(\bComplete[\s\n](\w+[\s\n]|\w+[\s\n]\w+[\s\n])procedure\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Follow| is preferred over |Complete|. %>');
text = text.replace(/(\bcomplete[\s\n](\w+[\s\n]|\w+[\s\n]\w+[\s\n])procedures\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |follow| is preferred over |complete|. %>');
text = text.replace(/(\bComplete[\s\n](\w+[\s\n]|\w+[\s\n]\w+[\s\n])procedures\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Follow| is preferred over |Complete|. %>');
text = text.replace(/(\bcomplete[\s\n](\w+[\s\n]|\w+[\s\n]\w+[\s\n])steps\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |follow| is preferred over |complete|. %>');
text = text.replace(/(\bComplete[\s\n](\w+[\s\n]|\w+[\s\n]\w+[\s\n])steps\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Follow| is preferred over |Complete|. %>');
text = text.replace(/(\bcomponent[\s\n]VM\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# All VMs are component VMs except for the host VMs. %>');
text = text.replace(/(\bconceivably\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Redundant? %>');
text = text.replace(/(\bConceivably\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Redundant? %>');
text = text.replace(/(\bConfig\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |config| is preferred. %>');
text = text.replace(/(\bConfirm[\s\n]if\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Confirm that| is better. %>');
text = text.replace(/(\bconfirm[\s\n]if\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |confirm that| is better. %>');
text = text.replace(/(\bcontainer[\s\n]networking\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |CF Networking| is preferred. %>');
text = text.replace(/(\bcontainer[\s\n]registry\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# If generic, |container image registry| on first use. If VMware-provided, |Tanzu Network Registry| on first use. In both cases, |registry| thereafter except where risking ambiguity. %>');
text = text.replace(/(\bContinuous[\s\n]Integration\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |continuous integration| is preferred. %>');
text = text.replace(/(\bcontrol-C\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Ctrl-C| is preferred. %>');
text = text.replace(/(\bControl-C\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Ctrl-C| is preferred. %>');
text = text.replace(/(\bcould've\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bcouldn't\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bcpu\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |CPU| is preferred. %>');
text = text.replace(/(\bcredhub\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The CF component is named |CredHub| %>');
text = text.replace(/(\bCredhub\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The CF component is named |CredHub| %>');
text = text.replace(/(\bCSB\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_abbr or, if in alt text, #{vars.product_abbr} %>');
text = text.replace(/(\bcURL\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |cURL| is the project. |curl| is the CLI. %>');
text = text.replace(/(\bCustom[\s\n]resource[\s\n]definition[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |CRD| after first use. %>');
text = text.replace(/(\bCustom[\s\n]Resource[\s\n]Definition[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |CRD| after first use. %>');
text = text.replace(/(\bcustom[\s\n]resource[\s\n]definition[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |CRD| after first use. %>');
text = text.replace(/(\bdata[\s\n]set\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |dataset| is preferred. %>');
text = text.replace(/(\bdata[\s\n]store\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |datastore| is preferred. %>');
text = text.replace(/(\bdatacenter\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |data center| is preferred. %>');
text = text.replace(/(\bDatacenter\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |data center| is preferred. %>');
text = text.replace(/(\bDate:[\s\n]X\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Missing the date? %>');
text = text.replace(/(\bdate:[\s\n]x\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Missing the date? %>');
text = text.replace(/(\bDate:[\s\n]x\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Missing the date? %>');
text = text.replace(/(\bdate:[\s\n]X\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Missing the date? %>');
text = text.replace(/(\bDB\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |database| is preferred. %>');
text = text.replace(/(\bDBs\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |databases| is preferred. %>');
text = text.replace(/(\bDec\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |December| is preferred. %>');
text = text.replace(/(\bdedicated[\s\n]VM[\s\n]plan\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |dedicated-VM plan| is preferred. %>');
text = text.replace(/(\bDedicated[\s\n]VM[\s\n]plan\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |dedicated-VM plan| is preferred. %>');
text = text.replace(/(\bDedicated[\s\n]VM[\s\n]Plan\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |dedicated-VM plan| is preferred. %>');
text = text.replace(/(\bdedicated[\s\n]VM[\s\n]Plan\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |dedicated-VM plan| is preferred. %>');
text = text.replace(/(\bdelimited\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |separated| is preferred. %>');
text = text.replace(/(\bDelimited\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Separated| is preferred. %>');
text = text.replace(/(\bdeny[\s\n]list\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |denylist| is preferred. No space. %>');
text = text.replace(/(\bdesire\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |want| is preferred. %>');
text = text.replace(/(\bdetails[\s\n]on\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |details about| is preferred. %>');
text = text.replace(/(\bDetails[\s\n]on\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Details about| is preferred. %>');
text = text.replace(/(\bdetermine\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Should this actually be |discover| or |learn|? %>');
text = text.replace(/(\bDetermine\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Should this actually be |discover| or |learn|? %>');
text = text.replace(/(\bDev[\s\n]Connect(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_short or, if in alt text, #{vars.product_short} %>');
text = text.replace(/(\bdevconnect(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_short or, if in alt text, #{vars.product_short} %>');
text = text.replace(/(\bDevconnect(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_short or, if in alt text, #{vars.product_short} %>');
text = text.replace(/(\bDevConnect(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_short or, if in alt text, #{vars.product_short} %>');
text = text.replace(/(\bdevelopment[\s\n]environment\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# If this simply refers to the user machine, |local machine| is preferred. If drawing a distinction from a production environment, leave as is. %>');
text = text.replace(/(\bdevops\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |DevOps| is preferred. %>');
text = text.replace(/(\bDevops\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |DevOps| is preferred. %>');
text = text.replace(/(\bdidn't\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bDiego[\s\n]BBS\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |BBS| is preferred. %>');
text = text.replace(/(\bDiego[\s\n]brain\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Diego Brain| is now preferred. %>');
text = text.replace(/(\bDiego[\s\n]cell\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Diego Cell| is now preferred. %>');
text = text.replace(/(\bDiego[\s\n]cells\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Diego Cells| is now preferred. %>');
text = text.replace(/(\bDigital[\s\n]Transformation\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |digital transformation| is preferred. %>');
text = text.replace(/(\bdisc\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |disk| is preferred. %>');
text = text.replace(/(\bdisk[\s\n]IO\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |disk I/O| is preferred. %>');
text = text.replace(/(\bdistro\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |distribution| is preferred. %>');
text = text.replace(/(\bdo[\s\n](\w+[\s\n]|\w+[\s\n]\w+[\s\n])procedure\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |follow| is preferred over |do|. %>');
text = text.replace(/(\bDo[\s\n](\w+[\s\n]|\w+[\s\n]\w+[\s\n])procedure\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Follow| is preferred over |Do|. %>');
text = text.replace(/(\bdo[\s\n](\w+[\s\n]|\w+[\s\n]\w+[\s\n])procedures\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |follow| is preferred over |do|. %>');
text = text.replace(/(\bDo[\s\n](\w+[\s\n]|\w+[\s\n]\w+[\s\n])procedures\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Follow| is preferred over |Do|. %>');
text = text.replace(/(\bdo[\s\n](\w+[\s\n]|\w+[\s\n]\w+[\s\n])steps\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |follow| is preferred over |do|. %>');
text = text.replace(/(\bDo[\s\n](\w+[\s\n]|\w+[\s\n]\w+[\s\n])steps\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Follow| is preferred over |Do|. %>');
text = text.replace(/(\bdo[\s\n]manual\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |manually| might be better. %>');
text = text.replace(/(\bDo[\s\n]manual\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Manually might be better. %>');
text = text.replace(/(\bdo[\s\n]operations\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |perform operations| or just |operate| might read better. %>');
text = text.replace(/(\bdoc\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |documentation| is preferred. %>');
text = text.replace(/(\bDocker[\s\n]trusted[\s\n]registry\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Docker Registry| is preferred. %>');
text = text.replace(/(\bdocker\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Docker| is preferred. %>');
text = text.replace(/(\bdocs(?!\.\w)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |documentation| is preferred. %>');
text = text.replace(/(\bDocs\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Documentation| is preferred. %>');
text = text.replace(/(\bdoesn't\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bdon't\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bDon't\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bDoppler[\s\n]server\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Doppler| is preferred. %>');
text = text.replace(/(\bDoppler[\s\n]VM\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Doppler| is preferred. %>');
text = text.replace(/(\bdoppler\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Doppler| is preferred. %>');
text = text.replace(/(\bdouble-parens[\s\n]expression\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |double-parentheses expression| is preferred. %>');
text = text.replace(/(\bdouble[\s\n]click\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |double-click| is preferred. %>');
text = text.replace(/(\bdown[\s\n]time\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |downtime| is preferred. %>');
text = text.replace(/(\bdownscale\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |scale down| is preferred. %>');
text = text.replace(/(\bdrop-down\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |dropdown| is preferred -- without a hyphen and without |list| or |menu| %>');
text = text.replace(/(\bdropdown[\s\n]list\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |dropdown| is preferred -- without a hyphen and without |list| or |menu| %>');
text = text.replace(/(\bdropdown[\s\n]menu\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |dropdown| is preferred -- without a hyphen and without |list| or |menu| %>');
text = text.replace(/(\bdropdown[\s\n]menus\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |dropdowns| is preferred. %>');
text = text.replace(/(\bDropdown[\s\n]menus\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Dropdowns| is preferred. %>');
text = text.replace(/(\bdue[\s\n]to[\s\n]the[\s\n]fact[\s\n]that\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |because| might be better. %>');
text = text.replace(/(\bduring[\s\n]the[\s\n]boot[\s\n]sequence\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |during startup| is preferred. %>');
text = text.replace(/(\be-mail\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |email| is preferred. %>');
text = text.replace(/(\beasily\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Avoid when describing an instruction. %>');
text = text.replace(/(\beasy\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Avoid when describing an instruction. %>');
text = text.replace(/(\beighty\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use numerals for numbers greater than nine. %>');
text = text.replace(/(\beither\b[^:]*:[\n\s]*\*.*[\n\s]*\*.*[\n\s]*\*(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |either| applies to two items only. If the list exceeds two, use |any|. %>');
text = text.replace(/(\beither\b[^:]*:[\n\s]*\<.l\>.*[\n\s]*\<li\>.*[\n\s]*\<li\>.*[\n\s]*\<li\>(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |either| applies to two items only. If the list exceeds two, use |any|. %>');
text = text.replace(/(\bElastic[\s\n]Runtime(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.app_runtime_full or, if in alt text, #{vars.app_runtime_full} %>');
text = text.replace(/(\beligible\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Might the plainer |able| be better? %>');
text = text.replace(/(\benter[\s\n]in\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Consider shortening to just |enter|. %>');
text = text.replace(/(\benter[\s\n]the[\s\n]following\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |To X, run:| and |X by running:| are preferred. %>');
text = text.replace(/(\benv\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |environment| is preferred %>');
text = text.replace(/(\bephemeral[\s\n]disk\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# There are two kinds of disk: ephemeral and persistent. You do not need to modify |disk| with |ephemeral| unless there is discussion of persistent disks in the same topic. Always define persistent disks as persistent. %>');
text = text.replace(/(\bERT(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.app_runtime_full or, if in alt text, #{vars.app_runtime_full} %>');
text = text.replace(/(\beveryone's\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bEveryone's\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bexecute[\s\n](\w+[\s\n]|\w+[\s\n]\w+[\s\n])procedure\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |follow| is preferred over |execute|. %>');
text = text.replace(/(\bExecute[\s\n](\w+[\s\n]|\w+[\s\n]\w+[\s\n])procedure\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Follow| is preferred over |Execute|. %>');
text = text.replace(/(\bexecute[\s\n](\w+[\s\n]|\w+[\s\n]\w+[\s\n])procedures\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |follow| is preferred over |execute|. %>');
text = text.replace(/(\bExecute[\s\n](\w+[\s\n]|\w+[\s\n]\w+[\s\n])procedures\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Follow| is preferred over |Execute|. %>');
text = text.replace(/(\bexecute[\s\n](\w+[\s\n]|\w+[\s\n]\w+[\s\n])steps\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |follow| is preferred over |execute|. %>');
text = text.replace(/(\bExecute[\s\n](\w+[\s\n]|\w+[\s\n]\w+[\s\n])steps\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Follow| is preferred over |Execute|. %>');
text = text.replace(/(\bexecuting\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |running| is preferred. %>');
text = text.replace(/(\bExecuting\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Running| is preferred. %>');
text = text.replace(/(\bexpected\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Consider replacing with |in most cases| to sound more confident. %>');
text = text.replace(/(\bexperimental\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The terms |experimental| and |beta| have different meanings only in VMware. Otherwise, use |beta| and never |experimental|. %>');
text = text.replace(/(\bFAQ\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use FAQs unless absolutely necessary. Fold into other appropriate locations in the doc. %>');
text = text.replace(/(\bFeature\b(?=\n+[^:]+\.)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Add a stem to introduce the new feature. %>');
text = text.replace(/(\bFeatures\b(?=\n+[^:]+\.)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Add a stem to introduce the new features. %>');
text = text.replace(/(\bFeb\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |February| is preferred. %>');
text = text.replace(/(\bfifty\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use numerals for numbers greater than nine. %>');
text = text.replace(/(\bfile[\s\n]name\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |filename| is preferred. %>');
text = text.replace(/(\bfile[\s\n]store\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |filestore| is preferred. %>');
text = text.replace(/(\bfilestorage\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |file storage| is preferred. %>');
text = text.replace(/(\bfilesystem\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |file system| is preferred. %>');
text = text.replace(/(\bfirehose\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Firehose| is capitalized. %>');
text = text.replace(/(\bfolder\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |directory| is preferred. %>');
text = text.replace(/(\bfolders\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |directories| is preferred. %>');
text = text.replace(/(\bfollowing[\s\n]command\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Replace with just |run:| %>');
text = text.replace(/(\bFor[\s\n]example\b[^,:](?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Consider adding a comma or colon after |For example|. %>');
text = text.replace(/(\bfor[\s\n]example\b[^,:](?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Consider adding a comma or colon after |for example|. %>');
text = text.replace(/(\bfor[\s\n]instance\b[^,:](?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |for example| is preferred. %>');
text = text.replace(/(\bfor[\s\n]more[\s\n]information\.(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The x-ref format is |For more information, see...| %>');
text = text.replace(/(\bfor[\s\n]the[\s\n]sake[\s\n]of\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |to| might be better here. %>');
text = text.replace(/(\bFor[\s\n]the[\s\n]sake[\s\n]of\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |To| might be better here. %>');
text = text.replace(/(\bforty\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use numerals for numbers greater than nine. %>');
text = text.replace(/(\bFrequently[\s\n]Asked[\s\n]Questions\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use FAQs unless absolutely necessary. Fold into other appropriate locations in the doc. %>');
text = text.replace(/(\bfully[\s\n]qualified[\s\n]domain[\s\n]name[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |FQDN| after the first use. %>');
text = text.replace(/(\bFully[\s\n]qualified[\s\n]domain[\s\n]name[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |FQDN| after the first use. %>');
text = text.replace(/(\bfuture\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Only document what exists. There are legal ramifications to making promises. %>');
text = text.replace(/(\bGarbage[\s\n]Collector\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |garbage collector| is preferred. %>');
text = text.replace(/(\bgarden-runc\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Garden-runC| is preferred. %>');
text = text.replace(/(\bGarden-RunC\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Garden-runC| is preferred. %>');
text = text.replace(/(\bGemfire\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |GemFire| is preferred. %>');
text = text.replace(/(\bget[\s\n]in[\s\n]touch\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use a specific communication verb instead, such as |email|. %>');
text = text.replace(/(\bGet[\s\n]in[\s\n]touch\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use a specific communication verb instead, such as |email|. %>');
text = text.replace(/(\bgif\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |GIF| is preferred. %>');
text = text.replace(/(\bGithub\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The brand name is |GitHub|. %>');
text = text.replace(/(\bGlobal[\s\n]Support[\s\n]Services\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |VMware Tanzu Support| is preferred. %>');
text = text.replace(/(\bgo[\s\n]router\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Gorouter| is preferred. %>');
text = text.replace(/(\bGo[\s\n]Router\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Gorouter| is preferred. %>');
text = text.replace(/(\bGo[\s\n]routine\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |goroutine| is preferred. %>');
text = text.replace(/(\bGolang\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |golang| is preferred. %>');
text = text.replace(/(\bgonna\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bgood[\s\n]chance\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |likely| is shorter, less colloquial, and easier to translate than |good chance|. %>');
text = text.replace(/(\bGoogle[\s\n]Cloud[\s\n]Platform[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |GCP| after the first use. %>');
text = text.replace(/(\bgorouter\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Gorouter| is preferred. %>');
text = text.replace(/(\bGoRouter\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Gorouter| is preferred. %>');
text = text.replace(/(\bGoroutine\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |goroutine| is preferred. %>');
text = text.replace(/(\bgotta\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bgraphical[\s\n]interface\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |UI| is preferred. %>');
text = text.replace(/(\bGreenPlum\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Greenplum| is preferred. %>');
text = text.replace(/(\bGSS\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |VMware Tanzu Support| is preferred. %>');
text = text.replace(/(\bguarantee\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Maybe replace with |ensure| to avoid the sense of legalese. %>');
text = text.replace(/(\bGuarantee\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Maybe replace with |Ensure| to avoid the sense of legalese. %>');
text = text.replace(/(\bGUI\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |UI| is preferred. %>');
text = text.replace(/(\bguid\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |GUID| is preferred. %>');
text = text.replace(/(\bHAC\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |HA cluster| is preferred. %>');
text = text.replace(/(\bhad[\s\n]been\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Consider replacing with |was| or shifting to present tense. %>');
text = text.replace(/(\bhadn't\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bhankering\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |want| is preferred. %>');
text = text.replace(/(\bHAproxy\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |HAProxy| is preferred. %>');
text = text.replace(/(\bHaproxy\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |HAProxy| is preferred. %>');
text = text.replace(/(\bhas[\s\n]been\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Consider changing to |is| or |has| or rewrite for active voice. %>');
text = text.replace(/(\bhas[\s\n]finished[\s\n][a-z-]*ing\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Possibly inelegant grammar. |has verbed| is better than |has finished verbing|. %>');
text = text.replace(/(\bhas[\s\n]the[\s\n]power[\s\n]to\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |can| is shorter. %>');
text = text.replace(/(\bhasn't\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bhave[\s\n]been\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Consider replacing with |were| or shifting to present tense. %>');
text = text.replace(/(\bhave[\s\n]the[\s\n]power[\s\n]to\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |can| is shorter. %>');
text = text.replace(/(\bhaven't\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bhe'd\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bHe'd\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bhe'll\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bHe'll\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bhe's\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bHe's\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bhealth-check\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |health check| is preferred. %>');
text = text.replace(/(\bhealthcheck\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |health check| is preferred. %>');
text = text.replace(/(\bHelm-Chart\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Helm chart| is preferred. %>');
text = text.replace(/(\bhelm-chart\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Helm chart| is preferred. %>');
text = text.replace(/(\bHelm-chart\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Helm chart| is preferred. %>');
text = text.replace(/(\bhelm[\s\n](?!chart)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Helm| is preferred. %>');
text = text.replace(/(\bhelm[\s\n]chart\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Helm chart| is preferred. %>');
text = text.replace(/(\bhigh[\s\n]availability[\s\n]cluster\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |HA cluster| is preferred. %>');
text = text.replace(/(\bHigh[\s\n]availability[\s\n]cluster\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |HA cluster| is preferred. %>');
text = text.replace(/(\bHigh[\s\n]Availability\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |high availability| is preferred. %>');
text = text.replace(/(\bhighly[\s\n]recommend\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Just |recommend| is preferred. %>');
text = text.replace(/(\bhighly[\s\n]recommends\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Just |recommends| is preferred. %>');
text = text.replace(/(\bhis[\s\n]or[\s\n]her\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |they| is preferred. %>');
text = text.replace(/(\bhis\/her\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |they| is preferred. %>');
text = text.replace(/(\bhost[\s\n]name\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |hostname| is preferred. %>');
text = text.replace(/(\bHTTP[\s\n]Router\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Gorouter| is preferred. %>');
text = text.replace(/(\bHttp\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |HTTP| is preferred. %>');
text = text.replace(/(\bhuman[\s\n]readable[\s\n]description\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The compound adjective is missing a hyphen. %>');
text = text.replace(/(\bHuman[\s\n]readable[\s\n]description\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The compound adjective is missing a hyphen. %>');
text = text.replace(/(\bhuman[\s\n]readable[\s\n]identifier\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The compound adjective is missing a hyphen. %>');
text = text.replace(/(\bHuman[\s\n]readable[\s\n]identifier\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The compound adjective is missing a hyphen. %>');
text = text.replace(/(\bhuman[\s\n]readable[\s\n]name\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The compound adjective is missing a hyphen. %>');
text = text.replace(/(\bHuman[\s\n]readable[\s\n]name\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The compound adjective is missing a hyphen. %>');
text = text.replace(/(\bhuman[\s\n]readable[\s\n]text\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The compound adjective is missing a hyphen. %>');
text = text.replace(/(\bHuman[\s\n]readable[\s\n]text\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The compound adjective is missing a hyphen. %>');
text = text.replace(/(\bHyperloglog\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |HyperLogLog| is preferred. %>');
text = text.replace(/(\bhyperloglog\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |HyperLogLog| is preferred. %>');
text = text.replace(/(\bHyperloglogs\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |HyperLogLogs| is preferred. %>');
text = text.replace(/(\bhyperloglogs\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |HyperLogLogs| is preferred. %>');
text = text.replace(/(\bI'd\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bI'll\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bI'm\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bI've\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bIAAS\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |IaaS| is preferred. %>');
text = text.replace(/(\bIaaSes\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Avoid the plural form of |IaaS| if possible. %>');
text = text.replace(/(\bid[\s\n](?!=)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The abbreviation for |identity| is |ID|. %>');
text = text.replace(/(\bId\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The abbreviation for |identity| is |ID|. %>');
text = text.replace(/(\biD\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The abbreviation for |identity| is |ID|. %>');
text = text.replace(/(\bIDP\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |IdP (identity provider)| is preferred. %>');
text = text.replace(/(\bIDPs\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |identity providers| is preferred. A single identity provider can be shortened to |IdP|. %>');
text = text.replace(/(\bIf[\s\n]you[\s\n]want[\s\n]to\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Maybe replace with just |To|. %>');
text = text.replace(/(\bif[\s\n]you[\s\n]want[\s\n]to\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Maybe replace with just |to|. %>');
text = text.replace(/(\bin[\s\n]a[\s\n][a-z]*[\s\n]manner\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Consider replacing with an adverb. %>');
text = text.replace(/(\bin[\s\n]CredHub\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# There are two CredHubs in PCF v2.0: BOSH CredHub and runtime CredHub. %>');
text = text.replace(/(\bin[\s\n]go\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |in Go| is preferred. %>');
text = text.replace(/(\bin[\s\n]order[\s\n]to\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |to| is preferred. %>');
text = text.replace(/(\bIn[\s\n]order[\s\n]to\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |To| is preferred. %>');
text = text.replace(/(\bin[\s\n]preparation[\s\n]for\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |to prepare for| might be better. Verbs are punchier than abstract nouns. %>');
text = text.replace(/(\bin[\s\n]real-time\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Stuff happens in |real time|. %>');
text = text.replace(/(\bin[\s\n]the[\s\n]terminal[\s\n]window\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |on the command line| is preferred. %>');
text = text.replace(/(\bin[\s\n]unexpected[\s\n]ways\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |unexpectedly| is more concise. %>');
text = text.replace(/(\bincluded[\s\n]in\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Consider deleting |included|. %>');
text = text.replace(/(\bindependent[\s\n]service[\s\n]vendor[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |ISV| after the first use. %>');
text = text.replace(/(\bIndependent[\s\n]service[\s\n]vendor[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |ISV| after the first use. %>');
text = text.replace(/(\bIndependent[\s\n]Service[\s\n]Vendor[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |ISV| after the first use. %>');
text = text.replace(/(\bindependent[\s\n]service[\s\n]vendors[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |ISV| after the first use. %>');
text = text.replace(/(\bIndependent[\s\n]service[\s\n]vendors[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |ISV| after the first use. %>');
text = text.replace(/(\bIndependent[\s\n]Service[\s\n]Vendors[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |ISV| after the first use. %>');
text = text.replace(/(\bindices\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |indexes| is preferred. %>');
text = text.replace(/(\bineligible\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Might the plainer |unable| be better? %>');
text = text.replace(/(\binfo\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |information| is preferred. %>');
text = text.replace(/(\bInfo\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Information| is preferred. %>');
text = text.replace(/(\binformation[\s\n]on\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |information about| is preferred. %>');
text = text.replace(/(\binput[\s\n]that\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The verb |enter| is preferred. %>');
text = text.replace(/(\binput[\s\n]the\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The verb |enter| is preferred. %>');
text = text.replace(/(\bInput\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The verb |Enter| is preferred. %>');
text = text.replace(/(\binsecure\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |not secure| is preferred. %>');
text = text.replace(/(\bInsecure\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Not secure| is preferred. %>');
text = text.replace(/(\binstallation[\s\n]dashboard(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Installation Dashboard| is preferred if this is a VMware product feature. %>');
text = text.replace(/(\bInstallation[\s\n]dashboard(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Installation Dashboard| is preferred if this is a VMware product feature. %>');
text = text.replace(/(\binstallation[\s\n]Dashboard(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Installation Dashboard| is preferred if this is a VMware product feature. %>');
text = text.replace(/(\binteractivity\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# There is probably a better alternative, such as |input|. %>');
text = text.replace(/(\bInternet[\s\n](?![Pp]rotocol)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Only capitalize |internet| when it is part of a title. %>');
text = text.replace(/(\bInternet[\s\n]Protocol\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |IP address| is preferred. %>');
text = text.replace(/(\bIP[\s\n](?![Aa]ddress)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not omit |address| from |IP address|. %>');
text = text.replace(/(\bIPSec[\s\n]for[\s\n]PCF(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bis[\s\n][a-z-]*ed[\s\n]by\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Active voice is preferred. %>');
text = text.replace(/(\bis[\s\n]a[\s\n]sign[\s\n]that\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |suggests| is shorter and simplifies the syntax. %>');
text = text.replace(/(\bis[\s\n]finished[\s\n][a-z-]*ing\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Possibly inelegant grammar. |has verbed| is better than |has finished verbing|. %>');
text = text.replace(/(\bis[\s\n]necessary[\s\n]to\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Consider deleting this or replacing it with the shorter |you must|. %>');
text = text.replace(/(\bis[\s\n]possible[\s\n]to\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |you can| might be better. %>');
text = text.replace(/(\bis[\s\n]used[\s\n]to\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Redundant? %>');
text = text.replace(/(\bisn't\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bIsolation[\s\n]Segments\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Isolation Segment| is the official title so do not make it plural. It is fine to talk of |isolation segments| though. %>');
text = text.replace(/(\bit'll\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bit's\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bIt's\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bit[\s\n]is[\s\n]recommended\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Specify the party that recommends (VMware, Cloud Foundry, etc). %>');
text = text.replace(/(\bIt[\s\n]is[\s\n]recommended\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Specify the party that recommends (VMware, Cloud Foundry, etc). %>');
text = text.replace(/(\bJan\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |January| is preferred. %>');
text = text.replace(/(\bjar\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |JAR| is preferred. %>');
text = text.replace(/(\bjavascript\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |JavaScript| is preferred. %>');
text = text.replace(/(\bJavascript\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |JavaScript| is preferred. %>');
text = text.replace(/(\bjson\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |JSON| is preferred. %>');
text = text.replace(/(\bJumpbox\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |jumpbox| is preferred. %>');
text = text.replace(/(\bjust[\s\n]so[\s\n]happened\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Redundant? %>');
text = text.replace(/(\bjust[\s\n]so[\s\n]happens\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Redundant? %>');
text = text.replace(/(\bkeep-alive\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |keepalive| is preferred. %>');
text = text.replace(/(\bkeep[\s\n]in[\s\n]mind\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Redundant? %>');
text = text.replace(/(\bKeep[\s\n]in[\s\n]mind\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Redundant? %>');
text = text.replace(/(\bkey[\s\n]pair\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |keypair| is preferred. %>');
text = text.replace(/(\bkey\/value[\s\n]pair\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |key-value pair| is preferred. %>');
text = text.replace(/(\bKey\/value[\s\n]pair\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Key-value pair| is preferred. %>');
text = text.replace(/(\bkey\/value[\s\n]pairs\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |key-value pairs| is preferred. %>');
text = text.replace(/(\bKey\/value[\s\n]pairs\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Key-value pairs| is preferred. %>');
text = text.replace(/(\bKnown\b[\s\n]\bIssue\b(?=\n+[^:]+\.\n+\*)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Add a stem to introduce the known issue. %>');
text = text.replace(/(\bKnown\b[\s\n]\bIssues\b(?=\n+[^:]+\.\n+\*)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Add a stem to introduce the known issues. %>');
text = text.replace(/(\bkubectl[\s\n]CLI\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# First use: |Kubernetes command line tool (kubectl)|. Subsequent uses: |kubectl|. %>');
text = text.replace(/(\bkubectl[\s\n]command[\s\n]line[\s\n]tool\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# First use: |Kubernetes command line tool (kubectl)|. Subsequent uses: |kubectl|. %>');
text = text.replace(/(\bkubectl[\s\n]tool\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# First use: |Kubernetes command line tool (kubectl)|. Subsequent uses: |kubectl|. %>');
text = text.replace(/(\bKubectl\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# First use: |Kubernetes command line tool (kubectl)|. Subsequent uses: |kubectl|. %>');
text = text.replace(/(\bKubernetes[\s\n]operator\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Kubernetes Operator| is preferred. %>');
text = text.replace(/(\bkubernetes\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Kubernetes| is preferred. %>');
text = text.replace(/(\bkubo\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Container Runtime| is preferred. %>');
text = text.replace(/(\bKubo\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Container Runtime| is preferred. %>');
text = text.replace(/(\bKuBo\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Container Runtime| is preferred. %>');
text = text.replace(/(\blater[\s\n]release\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Never state something is coming in a future release. It could create a legal problem. %>');
text = text.replace(/(\bleft[\s\n]hand\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |left-hand| is preferred if modifying a noun, as in |left-hand pane|. %>');
text = text.replace(/(\blet's\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bLet's\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bLightweight[\s\n]Directory[\s\n]Access[\s\n]Protocol(?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |LDAP| is preferred. %>');
text = text.replace(/(\blog-in\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use |login| (n) or |log in| (v) %>');
text = text.replace(/(\blog[\s\n]into\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |log in to| is preferred. %>');
text = text.replace(/(\blog[\s\n]line\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |log entry| is preferred. %>');
text = text.replace(/(\bLog[\s\n]line\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Log entry| is preferred. %>');
text = text.replace(/(\blog[\s\n]lines\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |log entries| is preferred. %>');
text = text.replace(/(\bLog[\s\n]lines\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Log entries| is preferred. %>');
text = text.replace(/(\blog[\s\n]message\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |log entry| is preferred. %>');
text = text.replace(/(\bLog[\s\n]message\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Log entry| is preferred. %>');
text = text.replace(/(\blog[\s\n]messages\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |log entries| is preferred. %>');
text = text.replace(/(\bLog[\s\n]messages\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Log entries| is preferred. %>');
text = text.replace(/(\blog[\s\n]on[\s\n]to\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |log in to| is preferred. %>');
text = text.replace(/(\bloggregator(?!\-)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Call it |Loggregator| -- capitalized and without a preceding |the|. %>');
text = text.replace(/(\blogin[\s\n]to\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |log in to| is preferred. %>');
text = text.replace(/(\bLogin[\s\n]to\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Log in to| is preferred. %>');
text = text.replace(/(\blower[\s\n]case\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |lowercase| is preferred. %>');
text = text.replace(/(\bmake[\s\n]sure\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Replace with |ensure| or, better still, rephrase as a command. %>');
text = text.replace(/(\bMake[\s\n]sure\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Ensure| is preferred. %>');
text = text.replace(/(\bMar\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |March| is preferred. %>');
text = text.replace(/(\bMaterial[\s\n]data\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |consumption data| is preferred. %>');
text = text.replace(/(\bmax\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |maximum| is preferred. %>');
text = text.replace(/(\bMax\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Maximum| is preferred. %>');
text = text.replace(/(\bmay\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |can| usually works better. Use |might| to convey possibility. %>');
text = text.replace(/(\bmembers[\s\n]of[\s\n]a[\s\n][a-z]*(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |x members| is more succinct than |members of x|. %>');
text = text.replace(/(\bmerge[\s\n]to\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |merge with| might be better here. %>');
text = text.replace(/(\bmerged[\s\n]to\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |merged with| might be better here. %>');
text = text.replace(/(\bmicro-services\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |microservices| is preferred. %>');
text = text.replace(/(\bmight've\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bmin\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |minimum| is preferred. %>');
text = text.replace(/(\bMin\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Minimum| is preferred. %>');
text = text.replace(/(\bMinIO\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Minio| is preferred. %>');
text = text.replace(/(\bminio\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Minio| is preferred. %>');
text = text.replace(/(\bmodal\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |dialog box| is preferred. %>');
text = text.replace(/(\bMore[\s\n]information[\s\n](can|is)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The xref style is |For more information, see...|. %>');
text = text.replace(/(\bmore[\s\n]information[\s\n](can|is)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The xref style is |For more information, see...|. %>');
text = text.replace(/(\bmulti az\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Multi-AZ| is Amazon style. %>');
text = text.replace(/(\bmulti AZ\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Multi-AZ| is Amazon style. %>');
text = text.replace(/(\bMulti az\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Multi-AZ| is Amazon style. %>');
text = text.replace(/(\bMulti AZ\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Multi-AZ| is Amazon style. %>');
text = text.replace(/(\bmulti-az\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Multi-AZ| is Amazon style. %>');
text = text.replace(/(\bmulti-AZ\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Multi-AZ| is Amazon style. %>');
text = text.replace(/(\bMulti-az\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Multi-AZ| is Amazon style. %>');
text = text.replace(/(\bmustn't\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bMySQL[\s\n]for[\s\n]Pivotal[\s\n]Platform(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bnameserver\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |name server| is preferred. %>');
text = text.replace(/(\bnavigate[\s\n]to[\s\n]the[\s\n][A-Z](?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Embolden the names of UI elements. %>');
text = text.replace(/(\bNavigate[\s\n]to[\s\n]the[\s\n][A-Z](?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Embolden the names of UI elements. %>');
text = text.replace(/(\bneedn't\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bnext[\s\n]release\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Never state something is coming in a future release. It could create a legal problem. %>');
text = text.replace(/(\bNGINX\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |NGINX| for the brand. |nginx| for files and code. %>');
text = text.replace(/(\bNginx\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |NGINX| for the brand. |nginx| for files and code. %>');
text = text.replace(/(\bninety\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use numerals for numbers greater than nine. %>');
text = text.replace(/(\bnot[\s\n]recommend\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |VMware discourages| is preferred for closed source. |Cloud Foundry discourages| for open source. %>');
text = text.replace(/(\bnot[\s\n]recommended\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |VMware discourages| is preferred for closed source. |Cloud Foundry discourages| for open source. %>');
text = text.replace(/(\bnot[\s\n]yet\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# 1st preference: delete. 2nd preference: replace these words with |currently|. %>');
text = text.replace(/(\bnote[\s\n]down\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |record| is preferred. %>');
text = text.replace(/(\bNote[\s\n]that\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Notes must be in Note boxes and start with |Note: |. %>');
text = text.replace(/(\bnote[\s\n]that\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Notes must be in Note boxes and start with |Note: |. %>');
text = text.replace(/(\bNotice[\s\n]that\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Notes must be in Note boxes and start with |Note: |. %>');
text = text.replace(/(\bnotice[\s\n]that\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Notes must be in Note boxes and start with |Note: |. %>');
text = text.replace(/(\bNov\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |November| is preferred. %>');
text = text.replace(/(\bnow[\s\n][a-z-]*ed[\s\n]by\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Active voice is preferred. %>');
text = text.replace(/(\bnow[\s\n]should\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Favour certainty and agency: |the app now works| over |the app should now work|, and |VMware recommends| over |you should|.  %>');
text = text.replace(/(\bNozzle\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Only capitalize |nozzle| when it is part of a title %>');
text = text.replace(/(\bNSX[\s\n]Edge\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |NSX Edge Services Gateway (ESG)| is preferred. %>');
text = text.replace(/(\boAuth\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |OAuth| is preferred. %>');
text = text.replace(/(\bOauth\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |OAuth| is preferred. %>');
text = text.replace(/(\bOct\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |October| is preferred. %>');
text = text.replace(/(\bODB(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_abbr or, if in alt text, #{vars.product_abbr} %>');
text = text.replace(/(\bof[\s\n]your[\s\n]choosing\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |you choose| is snappier and easier for machine translation. %>');
text = text.replace(/(\bon-board\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |onboard| (v) is preferred. %>');
text = text.replace(/(\bOn-board\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Onboard| (v) is preferred. %>');
text = text.replace(/(\bOn-Demand[\s\n]Broker(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Full product title: |on-demand service broker|, short version: |on-demand broker| initialism: <%= vars.product_abbr %>');
text = text.replace(/(\bOn-demand[\s\n]Broker(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Full product title: |on-demand service broker|, short version: |on-demand broker| initialism: <%= vars.product_abbr %>');
text = text.replace(/(\bon[\s\n]demand[\s\n]broker(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Full product title: |on-demand service broker|, short version: |on-demand broker| initialism: <%= vars.product_abbr %>');
text = text.replace(/(\bOn[\s\n]demand[\s\n]broker(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Full product title: |on-demand service broker|, short version: |on-demand broker| initialism: <%= vars.product_abbr %>');
text = text.replace(/(\bOn[\s\n]Demand[\s\n]Broker(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Full product title: |on-demand service broker|, short version: |on-demand broker| initialism: <%= vars.product_abbr %>');
text = text.replace(/(\bOn[\s\n]Demand[\s\n]broker(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Full product title: |on-demand service broker|, short version: |on-demand broker| initialism: <%= vars.product_abbr %>');
text = text.replace(/(\bon[\s\n]demand[\s\n]plan\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |on-demand plan| is preferred. %>');
text = text.replace(/(\bOn[\s\n]demand[\s\n]plan\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |on-demand plan| is preferred. %>');
text = text.replace(/(\bOn[\s\n]Demand[\s\n]Plan\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |on-demand plan| is preferred. %>');
text = text.replace(/(\bOn[\s\n]Demand[\s\n]plan\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |on-demand plan| is preferred. %>');
text = text.replace(/(\bonce[\s\n]it\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Only use |once| when you mean |one time|, not when you mean |after|. %>');
text = text.replace(/(\bonce[\s\n]the\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Only use |once| when you mean |one time|, not when you mean |after|. %>');
text = text.replace(/(\bonce[\s\n]they\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Only use |once| when you mean |one time|, not when you mean |after|. %>');
text = text.replace(/(\bonce[\s\n]you\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Only use |once| when you mean |one time|, not when you mean |after|. %>');
text = text.replace(/(\bOnce\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Only use |once| when you mean |one time|, not when you mean |after|. %>');
text = text.replace(/(\bonsite\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Needs a space or a hyphen. The on-site interview is the last of the three interviews. The training was held on site. %>');
text = text.replace(/(\bOperations[\s\n]Manager(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.ops_manager or, if in alt text, #{vars.ops_manager} %>');
text = text.replace(/(\bOps[\s\n]Man\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.ops_manager or, if in alt text, #{vars.ops_manager} %>');
text = text.replace(/(\bops[\s\n]manager(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.ops_manager or, if in alt text, #{vars.ops_manager} %>');
text = text.replace(/(\bOps[\s\n]Manager[\s\n]Director\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |BOSH Director| is preferred. %>');
text = text.replace(/(\bOpsMan\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.ops_manager or, if in alt text, #{vars.ops_manager} %>');
text = text.replace(/(\bOpsManager\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.ops_manager or, if in alt text, #{vars.ops_manager} %>');
text = text.replace(/(\bopsmanager\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.ops_manager or, if in alt text, #{vars.ops_manager} %>');
text = text.replace(/(\bOptional[\s\n][^\)\*\<](?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Our style is (Optional) INSTRUCTION -- as a procedure header or a step. %>');
text = text.replace(/(\boptionally\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Our style is (Optional) INSTRUCTION -- as a procedure header or a step. %>');
text = text.replace(/(\bOptionally\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Our style is (Optional) INSTRUCTION -- as a procedure header or a step. %>');
text = text.replace(/(\borg[\s\n]manager\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Org Manager| is preferred. %>');
text = text.replace(/(\bOSBAPI[\s\n]compliant\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |OSBAPI-compliant| is preferred. %>');
text = text.replace(/(\bout[\s\n]of[\s\n]memory[\s\n]error\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |out-of-memory error| is preferred. %>');
text = text.replace(/(\bOut[\s\n]Of[\s\n]Memory[\s\n]error\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |out-of-memory error| is preferred. %>');
text = text.replace(/(\bPAAS\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |PaaS| is preferred. %>');
text = text.replace(/(\bparam\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |parameter| is preferred. %>');
text = text.replace(/(\bparams\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |parameters| is preferred. %>');
text = text.replace(/(\bParams\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Parameters| is preferred. %>');
text = text.replace(/(\bPAS\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.app_runtime_abbr or, if this is for Windows, vars.windows_runtime_abbr, and if alt text, #{ %>');
text = text.replace(/(\bPBS\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_short or, if in alt text, #{vars.product_short} %>');
text = text.replace(/(\bPCF[\s\n]dev\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |PCF Dev| is preferred. %>');
text = text.replace(/(\bPCF[\s\n]DEV\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |PCF Dev| is preferred. %>');
text = text.replace(/(\bPCF[\s\n]Solutions\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The brand name is |Platform Ops|. %>');
text = text.replace(/(\bPCFdev\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |PCF Dev| is preferred. %>');
text = text.replace(/(\bPCFS\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The brand name is |Platform Ops|. %>');
text = text.replace(/(\bPDC\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_abbr or, if in alt text, #{vars.product_abbr} %>');
text = text.replace(/(\bperform[\s\n](\w+[\s\n]|\w+[\s\n]\w+[\s\n])procedure\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |follow| is preferred over |perform|. %>');
text = text.replace(/(\bPerform[\s\n](\w+[\s\n]|\w+[\s\n]\w+[\s\n])procedure\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Follow| is preferred over |Perform|. %>');
text = text.replace(/(\bperform[\s\n](\w+[\s\n]|\w+[\s\n]\w+[\s\n])procedures\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |follow| is preferred over |perform|. %>');
text = text.replace(/(\bPerform[\s\n](\w+[\s\n]|\w+[\s\n]\w+[\s\n])procedures\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Follow| is preferred over |Perform|. %>');
text = text.replace(/(\bperform[\s\n](\w+[\s\n]|\w+[\s\n]\w+[\s\n])steps\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |follow| is preferred over |perform|. %>');
text = text.replace(/(\bPerform[\s\n](\w+[\s\n]|\w+[\s\n]\w+[\s\n])steps\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Follow| is preferred over |Perform|. %>');
text = text.replace(/(\bPersistent[\s\n]Volume[\s\n]Claim\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |PersistentVolumeClaim| is preferred. %>');
text = text.replace(/(\bPersistent[\s\n]Volume\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |PersistentVolume| is preferred. %>');
text = text.replace(/(\bPFS\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_short or, if in alt text, #{vars.product_short} %>');
text = text.replace(/(\bPID[\s\n]file\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Just |PID| is preferred. %>');
text = text.replace(/(\bpid[\s\n]file\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Just |PID| is preferred. %>');
text = text.replace(/(\bpidfile\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Just |PID| is preferred. %>');
text = text.replace(/(\bPIDfile\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Just |PID| is preferred. %>');
text = text.replace(/(\bPivNet\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_network or, if in alt text, #{vars.product_network} %>');
text = text.replace(/(\bPivotal,[\s\n]Inc\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Replace with |VMware|. %>');
text = text.replace(/(\bPivotal[\s\n]Anti-Virus(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bPivotal[\s\n]App[\s\n]Service(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.app_runtime_full or, if this is for Windows, vars.windows_runtime_full, and if in alt text, #{ %>');
text = text.replace(/(\bPivotal[\s\n]app[\s\n]service(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.app_runtime_full or, if this is for Windows, vars.windows_runtime_full, and if in alt text, #{ %>');
text = text.replace(/(\bPivotal[\s\n]Application[\s\n]Service(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.app_runtime_full or, if this is for Windows, vars.windows_runtime_full, and if in alt text, #{ %>');
text = text.replace(/(\bPivotal[\s\n]application[\s\n]service(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.app_runtime_full or, if this is for Windows, vars.windows_runtime_full, and if in alt text, #{ %>');
text = text.replace(/(\bPivotal[\s\n]Backup[\s\n]and[\s\n]Restore(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bPivotal[\s\n]Cloud[\s\n]Foundry[\s\n]Dev\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |PCF Dev| is preferred. %>');
text = text.replace(/(\bPivotal[\s\n]Cloud[\s\n]Foundry[\s\n]Solutions\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The brand name is |Platform Ops|. %>');
text = text.replace(/(\bPivotal[\s\n]Compliance[\s\n]Scanner(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bPivotal[\s\n]Concourse(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bPivotal[\s\n]Container[\s\n]Service(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.k8s_runtime_full or, if alt text, #{vars.k8s_runtime_full} %>');
text = text.replace(/(\bPivotal[\s\n]CredHub[\s\n]Service[\s\n]Broker(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bPivotal[\s\n]Developer[\s\n]Console(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bPivotal[\s\n]Event[\s\n]Alerts(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bPivotal[\s\n]File[\s\n]Integrity[\s\n]Monitoring(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bPivotal[\s\n]GemFire(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_name or, if in alt text, #{vars.product_name} %>');
text = text.replace(/(\bPivotal[\s\n]Greenplum(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bPivotal[\s\n]Healthwatch(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bPivotal[\s\n]IPsec(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bPivotal[\s\n]Isolation[\s\n]Segment\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bPivotal[\s\n]Labs[\s\n]and[\s\n]Services\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The brand name is |VMware Pivotal Labs|. %>');
text = text.replace(/(\bPivotal[\s\n]Labs[\s\n]and[\s\n]Strategic[\s\n]Services\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The brand name is |VMware Pivotal Labs|. %>');
text = text.replace(/(\bPivotal[\s\n]Network(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_network or, if in alt text, #{vars.product_network} %>');
text = text.replace(/(\bPivotal[\s\n]On[\s\n]Demand[\s\n]Services[\s\n]SDK(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bPivotal[\s\n]Ops[\s\n]Manager(?![\s\n][Dd]irector)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.ops_manager_full or, if in alt text, #{vars.ops_manager_full} %>');
text = text.replace(/(\bPivotal[\s\n]Postgre[Ss](?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bPivotal[\s\n]Push[\s\n]Notification(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bPivotal[\s\n]RabbitMQ(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bPivotal[\s\n]Service[\s\n]Instance[\s\n]Manager(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bPivotal[\s\n]Services[\s\n](?!Marketplace)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The brand name is |VMware Pivotal Labs|. %>');
text = text.replace(/(\bPivotal[\s\n]Single[\s\n]Sign-On(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bPivotal[\s\n]Software\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Replace with |VMware|. %>');
text = text.replace(/(\bPivotalTracker\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Write |Pivotal Tracker| (first use on page in body text) and then |Tracker| (subsequent uses). %>');
text = text.replace(/(\bPKS(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Unless this is part of a VMware or Dell Tech brand name, use <%= vars.k8s_runtime_full %>');
text = text.replace(/(\bplain-text\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Replace the hyphen with a space if referring to unformatted text. Delete the hyphen if referring to non-encrypted text. %>');
text = text.replace(/(\bplatform[\s\n]control[\s\n]plane\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |CI/CD plane| is preferred. %>');
text = text.replace(/(\bplease(?![\s\n]email|[\s\n]contact|[\s\n]send|[\s\n]speak|[\s\n]\w*[\s\n]\w*[\s\n]issue|[\s\n]\w*[\s\n]\w*[\s\n]ticket)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use unless asking the reader to do you a favor, such as giving feedback. %>');
text = text.replace(/(\bPlease(?![\s\n]email|[\s\n]contact|[\s\n]send|[\s\n]speak|[\s\n]\w*[\s\n]\w*[\s\n]issue|[\s\n]\w*[\s\n]\w*[\s\n]ticket)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use unless asking the reader to do you a favor, such as giving feedback. %>');
text = text.replace(/(\bplug-in\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |plugin| is preferred, even though Merriam-Webster prefers the hyphen. %>');
text = text.replace(/(\bpod\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Pod| is capitalized per the K8s docs style. %>');
text = text.replace(/(\bpods\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Pods| is capitalized per the K8s docs style. %>');
text = text.replace(/(\bpoint[\s\n]in[\s\n]time[\s\n]snapshot\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |point-in-time snapshot| is preferred. %>');
text = text.replace(/(\bpoint[\s\n]release\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use. v#.## is a |minor release|. v#.#.# is a |patch release|. %>');
text = text.replace(/(\bpop-up\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# If referring to a menu that pops up, just write |pop-up| without |menu|. If referring to a dialog box, write |dialog box|. %>');
text = text.replace(/(\bpopup\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# If referring to a menu that pops up, just write |pop-up| without |menu|. If referring to a dialog box, write |dialog box|. %>');
text = text.replace(/(\bpost[^-](?!res)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Check if a hyphen is missing. %>');
text = text.replace(/(\bpostgresSQL\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |PostgreSQL| is preferred. %>');
text = text.replace(/(\bPP\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use this acronym for the brand name. %>');
text = text.replace(/(\bpp\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use this acronym for the brand name. %>');
text = text.replace(/(\bpre[\s\n]\w(?!lass)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Check if a hyphen is missing. %>');
text = text.replace(/(\bpreprovision\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |pre-provision| is preferred. %>');
text = text.replace(/(\bPreprovision\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Pre-provision| is preferred. %>');
text = text.replace(/(\bPreprovisioned\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Pre-provisioned| is preferred. %>');
text = text.replace(/(\bpreprovisioned\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |pre-provisioned| is preferred. %>');
text = text.replace(/(\bprerequisite\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Requirements are things needed to install and run the product. We list them on the product index page. Prerequisites are things needed for a given procedure beyond the product requirements. We list those on the procedure page. %>');
text = text.replace(/(\bprior[\s\n]to\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |before| is preferred. %>');
text = text.replace(/(\bprocfile\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Procfile| is preferred. %>');
text = text.replace(/(\bprod\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |production| is preferred. %>');
text = text.replace(/(\bProduct[\s\n]Version[\s\n]Matrix\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Product Compatibility Matrix| is preferred. %>');
text = text.replace(/(\bprompt\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |dialog box| is preferred. %>');
text = text.replace(/(\bQuorum[\s\n]Queue\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |quorum queue| is preferred. %>');
text = text.replace(/(\bQuorum[\s\n]Queues\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |quorum queues| is preferred. %>');
text = text.replace(/(\bRabbit[\s\n]MQ\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |RabbitMQ| is preferred. %>');
text = text.replace(/(\bRabbitMQ[\s\n]\[Kubernetes\](?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bRabbitMQ[\s\n]&#91;Kubernetes&#93;(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bRabbitMQ[\s\n]dashboard\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |RabbitMQ Management UI| is preferred. %>');
text = text.replace(/(\bRabbitMQ[\s\n]Dashboard\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |RabbitMQ Management UI| is preferred. %>');
text = text.replace(/(\bRabbitMQ[\s\n]for[\s\n]Kubernetes(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_short or, if in alt text, #{vars.product_short} %>');
text = text.replace(/(\bRabbitMQ[\s\n]for[\s\n]Pivotal[\s\n]Platform(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bRabbitMQ[\s\n]for[\s\n]VMware[\s\n]Tanzu[\s\n]\[Kubernetes\](?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bRabbitMQ[\s\n]for[\s\n]VMware[\s\n]Tanzu[\s\n]&#91;Kubernetes&#93;(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bRabbitMQ[\s\n]Management[\s\n]Interface\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |RabbitMQ Management UI| is preferred. %>');
text = text.replace(/(\bRabbitMq\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |RabbitMQ| is preferred. %>');
text = text.replace(/(\bRabbitMQCluster\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |RabbitmqCluster| is preferred. %>');
text = text.replace(/(\bRabbitMQcluster\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |RabbitmqCluster| is preferred. %>');
text = text.replace(/(\bRabbitmqcluster\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |RabbitmqCluster| is preferred. %>');
text = text.replace(/(\bRabbitmqClusters\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The plural form is |`RabbitmqCluster` resources|. %>');
text = text.replace(/(\bRam\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |RAM| is preferred. %>');
text = text.replace(/(\bram\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |RAM| is preferred. %>');
text = text.replace(/(\bre-generate\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |regenerate| is preferred. %>');
text = text.replace(/(\bRe-generate\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Re-generate| is preferred. %>');
text = text.replace(/(\bre-stage\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |restage| is preferred. %>');
text = text.replace(/(\bRe-stage\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Restage| is preferred. %>');
text = text.replace(/(\bre-subscribe\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |resubscribe| is preferred. %>');
text = text.replace(/(\bRe-subscribe\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Re-subscribe| is preferred. %>');
text = text.replace(/(\bread[\s\n]more[\s\n]on\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |read more about| is preferred. %>');
text = text.replace(/(\breboot\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |restart| is preferred. %>');
text = text.replace(/(\brecommend[\s\n]against\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |VMware discourages| is preferred for closed source. |Cloud Foundry discourages| for open source. %>');
text = text.replace(/(\brecommendation[\s\n]on\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# recommendation for %>');
text = text.replace(/(\brecommendations[\s\n]on\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# recommendations for %>');
text = text.replace(/(\brecommends[\s\n]against\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |VMware discourages| is preferred for closed source. |Cloud Foundry discourages| for open source. %>');
text = text.replace(/(\bRecreate(?![\s\n][A-Z])(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |re-create| is preferred. %>');
text = text.replace(/(\brecreate\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |re-create| is preferred. %>');
text = text.replace(/(\brecreated\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |re-created| is preferred. %>');
text = text.replace(/(\bRecreated\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Re-created| is preferred. %>');
text = text.replace(/(\brecreates\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |re-creates| is preferred. %>');
text = text.replace(/(\brecreating\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |re-creating| is preferred %>');
text = text.replace(/(\bRecreating\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Re-creating| is preferred. %>');
text = text.replace(/(\bRedis[\s\n]for[\s\n]Pivotal[\s\n]Platform(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\brefarch\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The directory name |plan| is preferred over |refarch|. %>');
text = text.replace(/(\brefer[\s\n]to\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# If telling the reader to read something else, use |see|. %>');
text = text.replace(/(\bRefer[\s\n]to\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# If telling the reader to read somewhere else, use |See|. %>');
text = text.replace(/(\brepo\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |repository| is preferred. %>');
text = text.replace(/(\brequirement\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Requirements are things needed to install and run the product. We list them on the product index page. Prerequisites are things needed for a given procedure beyond the product requirements. We list those on the procedure page. %>');
text = text.replace(/(\bResolved\b[\s\n]\bIssue\b(?=\n+[^:]+\.)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Add a stem to introduce the resolved issue. %>');
text = text.replace(/(\bResolved\b[\s\n]\bIssues\b(?=\n+[^:]+\.)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Add a stem to introduce the resolved issues. %>');
text = text.replace(/(\brestoration\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use |restore| as both a verb and a noun. %>');
text = text.replace(/(\bresults[\s\n]in\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Consider replacing with |causes|. %>');
text = text.replace(/(\bresurrector\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Resurrector| is preferred. %>');
text = text.replace(/(\bright[\s\n]hand\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |right-hand| is preferred if modifying a noun, as in |right-hand pane|. %>');
text = text.replace(/(\bRMQ[\s\n]dashboard\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |RabbitMQ Management UI| is preferred. %>');
text = text.replace(/(\bRMQ[\s\n]Dashboard\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |RabbitMQ Management UI| is preferred. %>');
text = text.replace(/(\bRMQ[\s\n]for[\s\n]VMs\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_short or, if in alt text, #{vars.product_short} %>');
text = text.replace(/(\bRMQ[\s\n]Management[\s\n]Interface\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |RabbitMQ Management UI| is preferred. %>');
text = text.replace(/(\brun[\s\n]time\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |runtime| is preferred unless referring to the time it takes a program to run. %>');
text = text.replace(/(\bRunner[\s\n]VM\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |host VM| is preferred. %>');
text = text.replace(/(\bRuntime[\s\n]CredHub\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |runtime CredHub| is preferred. %>');
text = text.replace(/(\bruntimes\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |runtime durations| or |runtime environments| is preferred, depending on meaning. %>');
text = text.replace(/(\bSecure[\s\n]Shell\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |SSH| is preferred. %>');
text = text.replace(/(\bSecurity[\s\n]Assertion[\s\n]Markup[\s\n]Language\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Never spell out SAML. %>');
text = text.replace(/(\bsecurity[\s\n]assertion[\s\n]markup[\s\n]language\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Never spell out SAML. %>');
text = text.replace(/(\bselect[\s\n][A-Z](?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Embolden the names of UI elements that you instruct the reader to interact with. %>');
text = text.replace(/(\bSelect[\s\n][A-Z](?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Embolden the names of UI elements that you instruct the reader to interact with. %>');
text = text.replace(/(\bService-Gateway[\s\n]access\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The RabbitMQ feature is |Service-gateway access|. %>');
text = text.replace(/(\bService-gateway[\s\n]Access\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The RabbitMQ feature is |Service-gateway access|. %>');
text = text.replace(/(\bService-Gateway[\s\n]Access\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The RabbitMQ feature is |Service-gateway access|. %>');
text = text.replace(/(\bservice[\s\n]broker[\s\n]API\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Service Broker API| is preferred. %>');
text = text.replace(/(\bService[\s\n]Gateway[\s\n]Access\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The RabbitMQ feature is |Service-gateway access|. %>');
text = text.replace(/(\bservice[\s\n]instance[\s\n]credentials\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |binding credentials| is preferred. %>');
text = text.replace(/(\bService[\s\n]Key\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Only capitalize |service key| when it is part of a title %>');
text = text.replace(/(\bservice[\s\n]principle\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# This is likely a misspelling of |service principal|. %>');
text = text.replace(/(\bService[\s\n]principle\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# This is likely a misspelling of |Service principal|. %>');
text = text.replace(/(\bService[\s\n]Principle\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# This is likely a misspelling of |Service Principal|. %>');
text = text.replace(/(\bServices[\s\n]Marketplace\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Marketplace| is preferred. %>');
text = text.replace(/(\bset[\s\n]to[\s\n]off\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |disabled| might be better. %>');
text = text.replace(/(\bset[\s\n]to[\s\n]on\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |enabled| might be better. %>');
text = text.replace(/(\bsettings[\s\n]data\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |configuration data| is preferred. %>');
text = text.replace(/(\bseventy\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use numerals for numbers greater than nine. %>');
text = text.replace(/(\bsha\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |SHA| is preferred. %>');
text = text.replace(/(\bshan't\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bshared[\s\n]VM[\s\n]plan\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |shared-VM plan| is preferred. %>');
text = text.replace(/(\bShared[\s\n]VM[\s\n]plan\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |shared-VM plan| is preferred. %>');
text = text.replace(/(\bShared[\s\n]VM[\s\n]Plan\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |shared-VM plan| is preferred. %>');
text = text.replace(/(\bshared[\s\n]VM[\s\n]Plan\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |shared-VM plan| is preferred. %>');
text = text.replace(/(\bshe'd\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bShe'd\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bshe'll\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bShe'll\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bshe's\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bShe's\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bshould've\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bshould[\s\n]now\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Favour certainty and agency: |the app now works| over |the app should now work|. |VMware recommends| over |you should|.  %>');
text = text.replace(/(\bshouldn't\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bsimple\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Avoid suggesting an instruction is |simple| or |easy|. %>');
text = text.replace(/(\bsimply\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Avoid suggesting an instruction is |simple| or |easy|. %>');
text = text.replace(/(\bsince\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use |since| where you can use |because|. %>');
text = text.replace(/(\bSince\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use |Since| where you can use |Because|. %>');
text = text.replace(/(\bsingle[\s\n]sign-on(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bsixty\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use numerals for numbers greater than nine. %>');
text = text.replace(/(\bslave\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |follower| is preferred. %>');
text = text.replace(/(\bsmoketest\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |smoke test| (n.) or |smoke-test| (adj.) is preferred. %>');
text = text.replace(/(\bSmoketest\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |smoke tests| (n.) or |smoke-tests| (adj.) is preferred. %>');
text = text.replace(/(\bsmoketests\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |smoke tests| (n.) or |smoke-tests| (adj.) is preferred. %>');
text = text.replace(/(\bSmoketests\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |smoke tests| (n.) or |smoke-tests| (adj.) is preferred. %>');
text = text.replace(/(\bsocks\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |SOCKS| is preferred. Do not spell it out, even on first use. %>');
text = text.replace(/(\bSocks\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |SOCKS| is preferred. Do not spell it out, even on first use. %>');
text = text.replace(/(\bsomebody's\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bSomebody's\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bsomeone's\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bSomeone's\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bspec\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |specifications| is preferred. %>');
text = text.replace(/(\bspecs\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |specifications| is preferred. %>');
text = text.replace(/(\bSpring[\s\n]\d\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Spring Framework #| is preferred. %>');
text = text.replace(/(\bSpring[\s\n]Cloud[\s\n]DataFlow\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Spring Cloud Data Flow| is preferred. %>');
text = text.replace(/(\bSpring[\s\n]framework[\s\n]\d(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Spring Framework #| is preferred. %>');
text = text.replace(/(\bspringboot\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Spring Boot| is preferred. %>');
text = text.replace(/(\bSpringBoot\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Spring Boot| is preferred. %>');
text = text.replace(/(\bssh\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |SSH| is preferred. %>');
text = text.replace(/(\bstandard[\s\n]error\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |stderr| is preferred. %>');
text = text.replace(/(\bstandard[\s\n]input\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |stdin| is preferred. %>');
text = text.replace(/(\bstandard[\s\n]output\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |stdout| is preferred. %>');
text = text.replace(/(\bstanza\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |section| is preferred. %>');
text = text.replace(/(\bstatefulset\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |StatefulSet| is the K8s docs style. %>');
text = text.replace(/(\bStatefulset\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |StatefulSet| is the K8s docs style. %>');
text = text.replace(/(\bstatefulsets\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |StatefulSet| is the K8s docs style. %>');
text = text.replace(/(\bStatefulsets\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |StatefulSet| is the K8s docs style. %>');
text = text.replace(/(\bSTDERR\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |stderr| is preferred. %>');
text = text.replace(/(\bSTDIN\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |stdin| is preferred. %>');
text = text.replace(/(\bSTDOUT\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |stdout| is preferred. %>');
text = text.replace(/(\bstem-cell\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |stemcell| is preferred. %>');
text = text.replace(/(\bstem[\s\n]cell\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |stemcell| is preferred. %>');
text = text.replace(/(\bStemCell\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |stemcell| is preferred. %>');
text = text.replace(/(\bsteps[\s\n]*\w*:(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# To introduce steps just write |To do x:| %>');
text = text.replace(/(\bstorageClass\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |StorageClass| is the K8s docs style. %>');
text = text.replace(/(\bStorageClasses\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |storage classes| is preferred. Although, for k8s, the singular is |StorageClass|. %>');
text = text.replace(/(\bstorageclasses\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |storage classes| is preferred. Although, for k8s, the singular is |StorageClass|. %>');
text = text.replace(/(\bstrongly\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Consider deleting, especially if it precedes |recommend|. %>');
text = text.replace(/(\bsub-directory\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |subdirectory| is preferred. %>');
text = text.replace(/(\bsub-property\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |subproperty| is preferred. %>');
text = text.replace(/(\bsuite\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Only use |suite| when describing a bundle of products sold together under a single SKU. %>');
text = text.replace(/(\bsuper[\s\n]user\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |superuser| is preferred. %>');
text = text.replace(/(\bSuper[\s\n]user\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Superuser| is preferred. %>');
text = text.replace(/(\bsynch\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |sync| is preferred. %>');
text = text.replace(/(\bsynchronize\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |sync| is preferred. %>');
text = text.replace(/(\bsynchronized\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |synced| is preferred. %>');
text = text.replace(/(\bSyslog\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Lowercase is preferred unless |syslog| starts a sentence or is in a title. %>');
text = text.replace(/(\btable\>[\s\n]*\*(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Put the asterisk in superscript tags. %>');
text = text.replace(/(\bTanzu[\s\n]Application[\s\n]Service\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.app_runtime_full or, if this is for Windows, vars.windows_runtime_full, and if alt text, #{ %>');
text = text.replace(/(\bTanzu[\s\n]Kubernetes[\s\n]Grid[\s\n]Integrated[\s\n]Edition\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.k8s_runtime_abbr or, if in alt text,  #{vars.k8s_runtime_abbr} %>');
text = text.replace(/(\bTanzu[\s\n]Net\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |VMware Tanzu Network| is preferred. %>');
text = text.replace(/(\btanzu\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The brand is |Tanzu|. %>');
text = text.replace(/(\bTanzuNet\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |VMware Tanzu Network| is preferred. %>');
text = text.replace(/(\btar\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |TAR| is preferred. %>');
text = text.replace(/(\bTAS(?![\s\n]for)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Depending on the product, use vars.app_runtime_abbr or vars.windows_runtime_abbr or, if in alt text, #{ %>');
text = text.replace(/(\bTAS[\s\n]for[\s\n]Kubernetes\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.app_runtime_k8s_abbr or, if in alt text, #{vars.app_runtime_k8s_abbr} %>');
text = text.replace(/(\bTAS[\s\n]for[\s\n]VMs(?=([\.\n]|[\s\n][^\[&]))(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.app_runtime_abbr or, if in alt text, #{vars.app_runtime_abbr} %>');
text = text.replace(/(\bTAS[\s\n]for[\s\n]VMs[\s\n]\[Windows\](?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.windows_runtime_abbr or, if in alt text, #{vars.windows_runtime_abbr} %>');
text = text.replace(/(\bTAS[\s\n]for[\s\n]VMs[\s\n]&#91;Windows&#93;(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.windows_runtime_abbr or, if in alt text, #{vars.windows_runtime_abbr} %>');
text = text.replace(/(\bTasks\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |tasks| is preferred. %>');
text = text.replace(/(\bterminal[\s\n]emulator\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |shell| is preferred. %>');
text = text.replace(/(\btext[\s\n]area\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |field| is preferred. %>');
text = text.replace(/(\btextbox\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |field| is preferred. %>');
text = text.replace(/(\bthat'll\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bThat'll\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bthat's\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bThat's\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bthat[\s\n]are[\s\n]in[\s\n]effect\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Redundant? %>');
text = text.replace(/(\bthat[\s\n]is[\s\n]in[\s\n]effect\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Redundant? %>');
text = text.replace(/(\bthe[\s\n][A-Za-z-]+[\s\n]process\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Avoid nominalization: |while deleting| is better than |during the deletion process|. %>');
text = text.replace(/(\bThe[\s\n][A-Za-z-]+[\s\n]process\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Avoid nominalization: |while deleting| is better than |during the deletion process|. %>');
text = text.replace(/(\bthe[\s\n]Apps[\s\n]Manager\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Just |Apps Manager| is preferred -- there is no preceding |the|. %>');
text = text.replace(/(\bthe[\s\n]deploy\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |the deployment| is preferred. %>');
text = text.replace(/(\bThe[\s\n]deploy\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |The deployment| is preferred. %>');
text = text.replace(/(\bthe[\s\n]following[\s\n]commands\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |these commands| is preferred %>');
text = text.replace(/(\bthe[\s\n]install\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |the installation| is preferred. %>');
text = text.replace(/(\bthe[\s\n]Loggregator\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Just |Loggregator| is preferred -- capitalized and without a preceding |the|. %>');
text = text.replace(/(\bthe[\s\n]machine\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |the local machine| is preferred. %>');
text = text.replace(/(\bthe[\s\n]toggle\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use |toggle|. Do not use |Option button|. You may use |radio button|; but, in general, try to avoid referring to the button and instead write |Click BUTTON-TEXT|. %>');
text = text.replace(/(\bthere's\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bThere's\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bthey'd\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bThey'd\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bthey'll\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bThey'll\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bthey're\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bThey're\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bthey've\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bThey've\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bthirty\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use numerals for numbers greater than nine. %>');
text = text.replace(/(\bthrice\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |three times| is preferred. %>');
text = text.replace(/(\bthus\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Re-write the sentence to drop |thus| or, if that is not possible, replace with |therefore|. %>');
text = text.replace(/(\bThus\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Re-write the sentence to drop |Thus| or, if that is not possible, replace with |therefore|. %>');
text = text.replace(/(\bTick\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# For checkboxes, |Enable| or |Select| is preferred. %>');
text = text.replace(/(\btime[\s\n]out\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |timeout| is preferred, both as a noun and a verb. %>');
text = text.replace(/(\btime[\s\n]to[\s\n]live[\s\n](?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |TTL| after first use. %>');
text = text.replace(/(\bto[\s\n]login\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use |login| (n) and |log in| (v). %>');
text = text.replace(/(\bTraffic-controller\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Traffic Controller| is preferred. %>');
text = text.replace(/(\bTraffic-Controller\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Traffic Controller| is preferred. %>');
text = text.replace(/(\bTrafficController\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Traffic Controller| is preferred. %>');
text = text.replace(/(\bTransmission[\s\n]Control[\s\n]Protocol\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |TCP| is preferred. %>');
text = text.replace(/(\bTransport[\s\n]layer[\s\n]security(?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |TLS| after the first use. %>');
text = text.replace(/(\bTransport[\s\n]Layer[\s\n]Security(?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |TLS| after the first use. %>');
text = text.replace(/(\btransport[\s\n]layer[\s\n]security(?!\s\()(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Shorten to |TLS| after the first use. %>');
text = text.replace(/(\btriple-parens[\s\n]expression\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |triple-parentheses expression| is preferred. %>');
text = text.replace(/(\bTSMGR(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_abbr or, if in alt text, #{vars.product_abbr} %>');
text = text.replace(/(\bTurn[\s\n]off\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |record| is preferred. %>');
text = text.replace(/(\bturn[\s\n]off\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |disable| is preferred. %>');
text = text.replace(/(\bTurn[\s\n]on\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |record| is preferred. %>');
text = text.replace(/(\bturn[\s\n]on\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |enable| is preferred. %>');
text = text.replace(/(\btwenty\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use numerals for numbers greater than nine. %>');
text = text.replace(/(\btwo[\s\n]times\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |twice| is preferred. %>');
text = text.replace(/(\btype:(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |run:| is preferred. %>');
text = text.replace(/(\btype[\s\n]the[\s\n]following\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |To X, run:| and |X by running:| are preferred. %>');
text = text.replace(/(\bUAA[\s\n]Client\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |UAA Command Line Client (UAAC)| is preferred for use. |UAAC| thereafter. %>');
text = text.replace(/(\bUAA[\s\n]Command[\s\n]Client\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |UAA Command Line Client (UAAC)| is preferred for use. |UAAC| thereafter. %>');
text = text.replace(/(\bUAA[\s\n]command[\s\n]line\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |UAA Command Line Client (UAAC)| is preferred for use. |UAAC| thereafter. %>');
text = text.replace(/(\buaac\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |UAAC| is preferred. %>');
text = text.replace(/(\bun-check\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Disable the LABEL-NAME checkbox| is preferred. Likewise for |Enable the LABEL-NAME checkbox|. %>');
text = text.replace(/(\bun-register\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# deregister %>');
text = text.replace(/(\bun-tick\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Disable the LABEL-NAME checkbox| is preferred. Likewise for |Enable the LABEL-NAME checkbox|. %>');
text = text.replace(/(\buncheck\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Disable the LABEL-NAME checkbox| is preferred. Likewise for |Enable the LABEL-NAME checkbox|. %>');
text = text.replace(/(\bUnderstanding\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# If a procedural topic title, go with |How to...|. If a conceptual title, go with |About...| or |Overview of...| or nothing at all. %>');
text = text.replace(/(\bUniform[\s\n]Resource[\s\n]Locator\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |URL| is preferred. %>');
text = text.replace(/(\bunix\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Unix| is preferred. %>');
text = text.replace(/(\bUNIX\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Unix| is preferred. %>');
text = text.replace(/(\bunregister\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |deregister| is preferred. %>');
text = text.replace(/(\bunsecure\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |not secure| is preferred. %>');
text = text.replace(/(\bUnsecure\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Not secure| is preferred. %>');
text = text.replace(/(\buntick\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Disable the LABEL-NAME checkbox| is preferred. Likewise for |Enable the LABEL-NAME checkbox|. %>');
text = text.replace(/(\bupgradeable\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |upgradable| is preferred. %>');
text = text.replace(/(\bupper[\s\n]case\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |uppercase| is preferred. %>');
text = text.replace(/(\bupscale\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |scale up| is preferred. %>');
text = text.replace(/(\bUrl\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |URL| is preferred. %>');
text = text.replace(/(\bURl\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |URL| is preferred. %>');
text = text.replace(/(\burl\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |URL| is preferred. %>');
text = text.replace(/(\bus\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Specify the party (VMware, Cloud Foundry, etc). %>');
text = text.replace(/(\busage[\s\n]data\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |consumption data| is preferred. %>');
text = text.replace(/(\busage[\s\n]service\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Usage service| is preferred. %>');
text = text.replace(/(\bUsage[\s\n]Service\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Usage service| is preferred. %>');
text = text.replace(/(\buse[\s\n]the[\s\n]command\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |run| is preferred. %>');
text = text.replace(/(\buser[\s\n]interface\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |UI| is preferred. %>');
text = text.replace(/(\buser[\s\n]name\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |username| is preferred. %>');
text = text.replace(/(\bUser[\s\n]name\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Username| is preferred. %>');
text = text.replace(/(\busername\/password[\s\n]pair\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |username-password pair| is preferred. %>');
text = text.replace(/(\bUsername\/password[\s\n]pair\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Username-password pair| is preferred. %>');
text = text.replace(/(\busername\/password[\s\n]pairs\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |username-password pairs| is preferred. %>');
text = text.replace(/(\bUsername\/password[\s\n]pairs\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Username-password pairs| is preferred. %>');
text = text.replace(/(\busing[\s\n]the[\s\n]command\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |running| is preferred. %>');
text = text.replace(/(\butilizing\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |through| is preferred. %>');
text = text.replace(/(\buuid\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |UUID| is preferred. %>');
text = text.replace(/(\bValidate[\s\n]that\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Verify that| is plainer English. %>');
text = text.replace(/(\bvalidate[\s\n]that\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |verify that| is plainer English. %>');
text = text.replace(/(\bVerify[\s\n]if\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Verify that| is better. %>');
text = text.replace(/(\bverify[\s\n]if\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |verify that| is better. %>');
text = text.replace(/(\bvhost\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |virtual host| is preferred. %>');
text = text.replace(/(\bVhost\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |virtual host| is preferred. %>');
text = text.replace(/(\bvia\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |through|, |using| and |by means of| are preferred. %>');
text = text.replace(/(\bvim\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The text editor is called |Vim|. %>');
text = text.replace(/(\bVIM\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The text editor is called |Vim|. %>');
text = text.replace(/(\bVirtual[\s\n]Machine[\s\n]Metrics\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |BOSH health metrics| is preferred. %>');
text = text.replace(/(\bvirtual[\s\n]machine\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |VM| is preferred. %>');
text = text.replace(/(\bvm\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |VM| is preferred. %>');
text = text.replace(/(\bVMT[\s\n]network(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_network or, if in alt text, #{vars.product_network} %>');
text = text.replace(/(\bVMT[\s\n]Network(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_network or, if in alt text, #{vars.product_network} %>');
text = text.replace(/(\bVMTN(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_network or, if in alt text, #{vars.product_network} %>');
text = text.replace(/(\bVMware[\s\n]Network(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_network or, if in alt text, #{vars.product_network} %>');
text = text.replace(/(\bVMware[\s\n]network(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_network or, if in alt text, #{vars.product_network} %>');
text = text.replace(/(\bVMware[\s\n]Tanzu[\s\n]Network(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_network or, if in alt text, #{vars.product_network} %>');
text = text.replace(/(\bVMware[\s\n]Tanzu[\s\n]network(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_network or, if in alt text, #{vars.product_network} %>');
text = text.replace(/(\bVMware[\s\n]Tanzu[\s\n]RabbitMQ[\s\n]\[K8s\](?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bVMware[\s\n]Tanzu[\s\n]RabbitMQ[\s\n]\[VMs\](?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bVMware[\s\n]Tanzu[\s\n]SQL[\s\n]\[MySQL\](?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bVMware[\s\n]Tanzu[\s\n]SQL[\s\n]\[VMs\](?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use <%= vars.product_full or, if in alt text, #{vars.product_full} %>');
text = text.replace(/(\bVMWare\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |VMware| is preferred. %>');
text = text.replace(/(\bVmware\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |VMware| is preferred. %>');
text = text.replace(/(\bVmWare\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |VMware| is preferred. %>');
text = text.replace(/(\bvmware\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |VMware| is preferred. %>');
text = text.replace(/(\bVoluminous\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Very long| and |Very large| are plainer alternatives. %>');
text = text.replace(/(\bvoluminous\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |very long| and |very large| are plainer alternatives. %>');
text = text.replace(/(\bwarning[\s\n]box\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |dialog box| is preferred. %>');
text = text.replace(/(\bWarning[\s\n]box\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |dialog box| is preferred. %>');
text = text.replace(/(\bWarning[\s\n]window\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |dialog box| is preferred. %>');
text = text.replace(/(\bwarning[\s\n]window\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |dialog box| is preferred. %>');
text = text.replace(/(\bWARNING\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |Warning| is preferred. %>');
text = text.replace(/(\bwasn't\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bwe'd\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Specify the party (VMware, Cloud Foundry, etc) and do not use contractions. %>');
text = text.replace(/(\bWe'd\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Specify the party (VMware, Cloud Foundry, etc) and do not use contractions. %>');
text = text.replace(/(\bwe'll\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Specify the party (VMware, Cloud Foundry, etc) and do not use contractions. %>');
text = text.replace(/(\bWe'll\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Specify the party (VMware, Cloud Foundry, etc) and do not use contractions. %>');
text = text.replace(/(\bwe're\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Specify the party (VMware, Cloud Foundry, etc) and do not use contractions. %>');
text = text.replace(/(\bWe're\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Specify the party (VMware, Cloud Foundry, etc) and do not use contractions. %>');
text = text.replace(/(\bwe've\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Specify the party (VMware, Cloud Foundry, etc) and do not use contractions. %>');
text = text.replace(/(\bWe've\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Specify the party (VMware, Cloud Foundry, etc) and do not use contractions. %>');
text = text.replace(/(\bwe\b[^'](?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Specify the party (VMware, Cloud Foundry, etc). %>');
text = text.replace(/(\bWe\b[^'](?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Specify the party (VMware, Cloud Foundry, etc). %>');
text = text.replace(/(\bweb[\s\n]site\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |website| is preferred. %>');
text = text.replace(/(\bwebdav\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |WebDAV| is preferred. %>');
text = text.replace(/(\bWebDav\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |WebDAV| is preferred. %>');
text = text.replace(/(\bWebSockets\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |WebSocket| is preferred: there is a WebSocket protocol, not multiple WebSockets. %>');
text = text.replace(/(\bweren't\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bwhat's\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bWhat's\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bwhen[\s\n]satisfied\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Redundant? %>');
text = text.replace(/(\bWhen[\s\n]satisfied\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Redundant? %>');
text = text.replace(/(\bwhen[\s\n]you[\s\n]are[\s\n]satisfied\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Redundant? %>');
text = text.replace(/(\bWhen[\s\n]you[\s\n]are[\s\n]satisfied\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Redundant? %>');
text = text.replace(/(\bWhere[\s\n][A-Z\-\_]+[\s\n]is\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Place backticks or code tags around the placeholder. %>');
text = text.replace(/(\bwhether[\s\n]or[\s\n]not\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |whether| is more succinct. %>');
text = text.replace(/(\bwhile[\s\n]concurrently\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Redundant use of |concurrently|? %>');
text = text.replace(/(\bwhile[\s\n]simultaneously\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Redundant use of |simultaneously|? %>');
text = text.replace(/(\bWhile\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Replace with |Although| if it makes sense to do so. %>');
text = text.replace(/(\bwhite[\s\n]list\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# VMware insists on |allowlist|. No space. %>');
text = text.replace(/(\bwhitelist\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# VMware insists on |allowlist|. No space. %>');
text = text.replace(/(\bwho'll\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bwho's\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bwill\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Avoid |will|: present tense is preferred. %>');
text = text.replace(/(\bWire\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |sync| is preferred. %>');
text = text.replace(/(\bwire\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |sync| is preferred. %>');
text = text.replace(/(\bWiring\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |sync| is preferred. %>');
text = text.replace(/(\bwiring\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |sync| is preferred. %>');
text = text.replace(/(\bwish\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |want| is preferred. %>');
text = text.replace(/(\bwon't\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bwould\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Re-phrase for present tense if possible. %>');
text = text.replace(/(\bwouldn't\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bwrite[\s\n]down\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |record| is preferred. %>');
text = text.replace(/(\by'all\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bY'all\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bYaml\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |YAML| is preferred. %>');
text = text.replace(/(\bYML[\s\n]file\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |YAML file| is preferred. %>');
text = text.replace(/(\byou'd\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bYou'd\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\byou'll\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bYou'll\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\byou're\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bYou're\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\byou've\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\bYou've\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Do not use contractions. %>');
text = text.replace(/(\byou[\s\n]can[\s\n]run\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Maybe replace with just |run|. %>');
text = text.replace(/(\byou[\s\n]choose[\s\n]to\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Consider if |choose| is redundant. %>');
text = text.replace(/(\byou[\s\n]like\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Translation engines might struggle with this. %>');
text = text.replace(/(\byou[\s\n]might[\s\n]want\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# If possible, replace with |VMware recommends| (or |Cloud Foundry recommends| if open source) or re-phrase as a mandate. %>');
text = text.replace(/(\byou[\s\n]need[\s\n]to\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Consider replacing with just |To|. %>');
text = text.replace(/(\bYou[\s\n]need[\s\n]to\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Consider replacing with just |To|. %>');
text = text.replace(/(\byour[\s\n]machine\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |your local machine| is preferred. %>');
text = text.replace(/(\byoutube\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The brand name is |YouTube|. %>');
text = text.replace(/(\bYoutube\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The brand name is |YouTube|. %>');
text = text.replace(/(\d[\s\n]and[\s\n]above\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |# and later| is preferred. %>');
text = text.replace(/(\d[\s\n]and[\s\n]below\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |# and earlier| is preferred. %>');
text = text.replace(/(\d[\s\n]and[\s\n]greater\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |# and later| is preferred. %>');
text = text.replace(/(\d[\s\n]and[\s\n]higher\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |# and later| is preferred. %>');
text = text.replace(/(\d[\s\n]and[\s\n]lower\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |# and earlier| is preferred. %>');
text = text.replace(/(\d[\s\n]bit\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Missing the dash: 128-bit is grammatically correct; 128 bit is not. %>');
text = text.replace(/(\d[\s\n]GB\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |&nbsp;GB| is preferred. %>');
text = text.replace(/(\d[\s\n]KB\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |&nbsp;KB| is preferred. %>');
text = text.replace(/(\d[\s\n]MB\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |&nbsp;MB| is preferred. %>');
text = text.replace(/(\d[\s\n]or[\s\n]above\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |# or later| is preferred. %>');
text = text.replace(/(\d[\s\n]or[\s\n]below\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |# or earlier| is preferred. %>');
text = text.replace(/(\d[\s\n]or[\s\n]greater\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |# or later| is preferred. %>');
text = text.replace(/(\d[\s\n]or[\s\n]higher\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |# or later| is preferred. %>');
text = text.replace(/(\d[\s\n]or[\s\n]lower\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |# or earlier| is preferred. %>');
text = text.replace(/(\d\.\*(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |v1.2.x| is preferred for describing multiple patches for a given minor. %>');
text = text.replace(/(\d&nbsp;bit\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Missing the dash: 128-bit is grammatically correct; 128 bit is not. %>');
text = text.replace(/(\d+(st|nd|rd|th|)[\s\n]April\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The date format is |MONTH DD, YYYY| %>');
text = text.replace(/(\d+(st|nd|rd|th|)[\s\n]August\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The date format is |MONTH DD, YYYY| %>');
text = text.replace(/(\d+(st|nd|rd|th|)[\s\n]December\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The date format is |MONTH DD, YYYY| %>');
text = text.replace(/(\d+(st|nd|rd|th|)[\s\n]February\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The date format is |MONTH DD, YYYY| %>');
text = text.replace(/(\d+(st|nd|rd|th|)[\s\n]January\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The date format is |MONTH DD, YYYY| %>');
text = text.replace(/(\d+(st|nd|rd|th|)[\s\n]July\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The date format is |MONTH DD, YYYY| %>');
text = text.replace(/(\d+(st|nd|rd|th|)[\s\n]June\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The date format is |MONTH DD, YYYY| %>');
text = text.replace(/(\d+(st|nd|rd|th|)[\s\n]March\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The date format is |MONTH DD, YYYY| %>');
text = text.replace(/(\d+(st|nd|rd|th|)[\s\n]May\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The date format is |MONTH DD, YYYY| %>');
text = text.replace(/(\d+(st|nd|rd|th|)[\s\n]November\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The date format is |MONTH DD, YYYY| %>');
text = text.replace(/(\d+(st|nd|rd|th|)[\s\n]October\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The date format is |MONTH DD, YYYY| %>');
text = text.replace(/(\d+(st|nd|rd|th|)[\s\n]September\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The date format is |MONTH DD, YYYY| %>');
text = text.replace(/(\dGB\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |&nbsp;GB| is preferred. %>');
text = text.replace(/(\dKB\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |&nbsp;KB| is preferred. %>');
text = text.replace(/(\s\.html\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |HTML| is preferred. %>');
text = text.replace(/(\s\.zip\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |ZIP| is preferred. %>');
text = text.replace(/(\s\d{1,2}.\d{1,2}\.\d{1,2}(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Version numbers are written as |v1.11.11| unless brand styling dictates otherwise. %>');
text = text.replace(/(\se\.g:\s(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |For example| is preferred. %>');
text = text.replace(/(\se\.g\.,\s(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |For example| is preferred. %>');
text = text.replace(/(\se\.g\.:\s(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |For example| is preferred. %>');
text = text.replace(/(\se\.g\.\s(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |For example| is preferred. %>');
text = text.replace(/(\seg\.:\s(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |For example| is preferred. %>');
text = text.replace(/(\seg\.\s(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# |For example| is preferred. %>');
text = text.replace(/(^(?!\n)\*\s(?!(\*\*|\<strong|\<b))[^:`\n]*:(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Embolden run-in headings. %>');
text = text.replace(/(^[^\n\W]+[^\n#\<\d\(]*Stemcell\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Lowercase is preferred unless |stemcell| starts a sentence or is in a title. %>');
text = text.replace(/(^\*\s[^\*][^#]*###\s(Resolved[\s\n]Issues|Known[\s\n]Issues|Features)(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# In release notes, each feature, KI, and resolved issue needs a run-in heading. %>');
text = text.replace(/(^\s*`.{81,}`\.(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Delete the full stop -- it has its own line on the web page, which looks odd. %>');
text = text.replace(/(^##+.*(?=\n[^\n\s])(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# A header must have 1 newline beneath it and 0 newlines within it. %>');
text = text.replace(/(^##+.*\s[a-z]+$(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Per Chicago, capitalize the last word in the header. %>');
text = text.replace(/(^##+.*<\/a>\s*[a-z][a-z]+(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Per Chicago, capitalize the first word in the header. %>');
text = text.replace(/(^##+[^\n]*\n+[^\n]*[^:]\n\n+(?=\s*(\<ol\>|\d\.\s))(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# A procedure requires a stem ending with a colon, as in |To do x:|. %>');
text = text.replace(/(^Note\b(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Put notes in Note box formatting per the wiki. %>');
text = text.replace(/(<p[\s\n]class=.note.>(?!([\s\n]*<strong>Note:<\/strong>\s([A-Z]|<)))(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Format the note properly -- https://docs-wiki.cfapps.io/wiki/style/html-classes.html#note-class %>');
text = text.replace(/(<p[\s\n]class=.warning>(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Format the note properly -- https://docs-wiki.cfapps.io/wiki/style/html-classes.html#note-class %>');
text = text.replace(/(<td[^\>]*>\s*-\s*\<\/td\>(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use n/a, in italics, to mark an empty table cell. %>');
text = text.replace(/(<td[^\>]*>\s*–\s*\<\/td\>(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use n/a, in italics, to mark an empty table cell. %>');
text = text.replace(/(<td[^\>]*>\s*—\s*\<\/td\>(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use n/a, in italics, to mark an empty table cell. %>');
text = text.replace(/(<td[^\>]*>\s*\(none\)\s*\<\/td\>(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use n/a, in italics, to mark an empty table cell. %>');
text = text.replace(/(<td[^\>]*>\s*&mdash;\s*\<\/td\>(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use n/a, in italics, to mark an empty table cell. %>');
text = text.replace(/(<td[^\>]*>\s*&ndash;\s*\<\/td\>(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use n/a, in italics, to mark an empty table cell. %>');
text = text.replace(/(<td[^\>]*>\s*n\/a\s*\<\/td\>(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use n/a, in italics, to mark an empty table cell. %>');
text = text.replace(/(<td[^\>]*>\s*N\/A\s*\<\/td\>(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use n/a, in italics, to mark an empty table cell. %>');
text = text.replace(/(<td[^\>]*>\s*NA\s*\<\/td\>(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use n/a, in italics, to mark an empty table cell. %>');
text = text.replace(/(<td[^\>]*>\s*none\s*\<\/td\>(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# Use n/a, in italics, to mark an empty table cell. %>');
text = text.replace(/(2012R2(?![^`]*`[\s\n\.,:]|[^`]*\S\n[^\n]\s*``|[^\*:]*\*\*[\s\n-\.]|[^%]*[^\)] %>|[^\{]*\}\s%>|[^\[]*\]|\S*\)|[^\.\s]*\.png|[^<]*<\/(code|strong|pre|a|b)>|[^-]*---\n\n))/gm,'$1<%# The short product name is |<%= vars.windows_runtime_abbr %> 2012 R2| or, if in alt text |#{vars.windows_runtime_abbr} 2012 R2 %>');

// Delete duplicate comments

text = text.replace(/(<%# .* %>)\1/gm,'$1');

return text;

};
