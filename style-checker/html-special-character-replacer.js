var doreplacement;

module.exports = {
	activate: function() {
		return atom.commands.add('atom-text-editor', 'html-special-character-replacer:replace', function() {
			var editor;
			editor = atom.workspace.getActiveTextEditor();
			return replace(editor);
		});
	}
};

function replace(editor)
{

	var text;

	if (editor.getSelectedText()) {

		text = editor.getSelectedText();
		return editor.insertText(doreplacement(text));

	} else {

		text = editor.getText();
		return editor.setText(doreplacement(text));

	}

}

function doreplacement(text)
{
	
	// Start of commands

	text = text.replace(/(\(https:..bosh.io.*\)(?!.*\n?.*in the BOSH documentation).*$)/gm,'$1 <%# The BOSH cross-referencing format is: "For information about SUBJECT, see [EXACT-HEADING](LINK-TO-BOSH-DOCS) in the BOSH documentation." %>');
	text = text.replace(/(\(https:..cloud.google.com.*\)(?!.*\n?.*GCP documentation).*$)/gm,'$1 <%# The link name must be "GCP documentation". %>');
	text = text.replace(/(\(https:..community.pivotal.io.*\)(?!.*\n?.*Pivotal Support knowledge base).*$)/gm,'$1 <%# Type "in the Pivotal Support knowledge base" somewhere in the cross-reference sentence. %>');
	text = text.replace(/(\(https:..discuss.pivotal.io.*\).*$)/gm,'$1 <%# Discuss Pivotal is a deprecated URL. Contact Knowledge Base staff for its replacement. %>');
	text = text.replace(/(\(https:..github.com.*\)(?!.*\n?.*GitHub).*$)/gm,'$1 <%# Type "in GitHub" somewhere in the cross-reference sentence. %>');
	text = text.replace(/(\(https:..pvtl.force.com.*\).*$)/gm,'$1 <%# Pivotal Force is a deprecated URL. Contact Knowledge Base staff for its replacement. %>');
	text = text.replace(/(\[(?!.*\n?.*Cloud Foundry documentation).*\]\(https:..docs.cloudfoundry.org.*\))/gm,'$1 <%# The link name must be "Cloud Foundry documentation". %>');
	text = text.replace(/(\[(?!.*\n?.*Concourse documentation).*\]\(https:..concourse-ci.org.*\))/gm,'$1 <%# The link name must be "Concourse documentation". %>');
	text = text.replace(/(\[(?!.*\n?.*Docker documentation).*\]\(https:..docs.docker.com.*\))/gm,'$1 <%# The link name must be "Docker documentation". %>');
	text = text.replace(/(\[(?!.*\n?.*Kubernetes documentation).*\]\(https:..kubernetes.io.docs.*\))/gm,'$1 <%# The link name must be "Kubernetes documentation". %>');
	text = text.replace(/(\[(?!.*\n?.*Percona documentation).*\]\(https:..www.percona.com.doc.*\).*$)/gm,'$1 <%# The link name must be "Percona documentation". %>');
	text = text.replace(/(\<%= image_tag(?!.*:alt).*$)/gm,'$1 <%# Images require alt text. %>');
	text = text.replace(/(\<%= vars.platform_name %\> v2.0 and later)/gm,'$1 <%# "<%= vars.platform_name %> (formerly <%= vars.platform_old %>)" is preferred. %>');
	text = text.replace(/(\<%= vars.platform_old %\> v2.0 and later)/gm,'$1 <%# "<%= vars.platform_name %> (formerly <%= vars.platform_old %>)" is preferred. %>');
	text = text.replace(/(\<a href="https:..bosh.io.*\">(?!.*\n?.*BOSH documentation).*$)/gm,'$1 <%# The BOSH cross-referencing format is: "For information about SUBJECT, see [EXACT-HEADING](LINK-TO-BOSH-DOCS) in the BOSH documentation." %>');
	text = text.replace(/(\<a href="https:..cloud.google.com.*\">(?!.*\n?.*GCP documentation).*\<.a\>)/gm,'$1 <%# The link name must be "GCP documentation". %>');
	text = text.replace(/(\<a href="https:..community.pivotal.io.*\">(?!.*\n?.*Pivotal Support knowledge base).*$)/gm,'$1 <%# Type "in the Pivotal Support knowledge base" somewhere in the cross-reference sentence. %>');
	text = text.replace(/(\<a href="https:..concourse-ci.org.*\">(?!.*\n?.*Concourse documentation).*\<.a\>)/gm,'$1 <%# The link name must be "Concourse documentation". %>');
	text = text.replace(/(\<a href="https:..discuss.pivotal.io.*\">.*$)/gm,'$1 <%# Discuss Pivotal is a deprecated URL. Contact Knowledge Base staff for its replacement. %>');
	text = text.replace(/(\<a href="https:..docs.aws.amazon.com.*\">(?!.*\n?.*AWS documentation).*\<.a\>)/gm,'$1 <%# The link name must be "AWS documentation". %>');
	text = text.replace(/(\<a href="https:..docs.cloudfoundry.org.*\">(?!.*\n?.*Cloud Foundry documentation).*\<.a\>)/gm,'$1 <%# The link name must be "Cloud Foundry documentation". %>');
	text = text.replace(/(\<a href="https:..docs.docker.com.*\">(?!.*\n?.*Docker documentation).*\<.a\>)/gm,'$1 <%# The link name must be "Docker documentation". %>');
	text = text.replace(/(\<a href="https:..docs.spring.io.*\">(?!.*\n?.*Spring AMQP documentation).*\<.a\>)/gm,'$1 <%# The link name must be "Spring AMQP documentation". %>');
	text = text.replace(/(\<a href="https:..en.wikipedia.*\">(?!.*\n?.*Wikipedia).*$)/gm,'$1 <%# Type "in Wikipedia" somewhere in the cross-reference sentence. %>');
	text = text.replace(/(\<a href="https:..github.com.*\">(?!.*\n?.*GitHub).*$)/gm,'$1 <%# Type "in GitHub" somewhere in the cross-reference sentence. %>');
	text = text.replace(/(\<a href="https:..kubernetes.io.docs.*\">(?!.*\n?.*Kubernetes documentation).*\<.a\>)/gm,'$1 <%# The link name must be "Kubernetes documentation". %>');
	text = text.replace(/(\<a href="https:..pvtl.force.com.*\">.*$)/gm,'$1 <%# Pivotal Force is a deprecated URL. Contact Knowledge Base staff for its replacement. %>');
	text = text.replace(/(\<a href="https:..www.percona.com.doc.*\">(?!.*\n?.*Percona documentation).*\<.a\>)/gm,'$1 <%# The link name must be "Percona documentation". %>');
	text = text.replace(/(\<a href="https:..www.rabbitmq.com.*\">(?!.*\n?.*RabbitMQ documentation).*\<.a\>)/gm,'$1 <%# The link name must be "RabbitMQ documentation". %>');
	text = text.replace(/(\<a id="\d+"\>)/gm,'$1 <%# Place dashes between digits in release notes anchor IDs. %>');
	text = text.replace(/(\<a id="\d+\.[^\<]*"\>)/gm,'$1 <%# Place dashes between digits in release notes anchor IDs. %>');
	text = text.replace(/(\<code\>kubectl\<\/code\>)/gm,'$1 <%# Do not format "kubectl" as code. %>');
	text = text.replace(/(\<img src=(?!.*alt=").*$)/gm,'$1 <%# Images require alt text. %>');
	text = text.replace(/(\sCVE-\d{4}(?!.*\n?([^\[]*\]|[^\>]*\<\/a\>)).*$)/gm,'$1 <%# Link to the CVE page at pivotal.io/security or cve.mitre.org. %>');
	text = text.replace(/(`.*[_\A-Z].*` errand)/gm,'$1 <%# Errands tend to be lowercase and they use hyphens instead of underscores or spaces. %>');
	text = text.replace(/(`.*[_\A-Z].*` errands)/gm,'$1 <%# Errands tend to be lowercase and they use hyphens instead of underscores or spaces. %>');
	text = text.replace(/(`kubectl`)/gm,'$1 <%# Do not format "kubectl" as code. %>');
	text = text.replace(/(^(?!.*li\>).*\<a href="#..*\">(?![^\.]*\n?.*(above|below|earlier|previously|before|later)).*$)/gm,'$1 <%# After giving the anchor, state whether it is "above" or "below". %>');
	text = text.replace(/(^(?!\s*(\*\s*|-|\+|\d\.\s*)).*\]\(#..*\)(?![^\.]*\n?.*(above|below|earlier|previously|before|later)).*$)/gm,'$1 <%# After giving the anchor, state whether it is "above" or "below". %>');
	text = text.replace(/(^[^\n#]+#{2,6})/gm,'$1 <%# Delete the spaces before this header. %>');
	text = text.replace(/(^\s*[#]+\s*\d\.)/gm,'$1 <%# Do not format a numbered step as a header. %>');
	text = text.replace(/(^\s*\<h\d\>\s*\d\.)/gm,'$1 <%# Do not format a numbered step as a header. %>');
	text = text.replace(/(^\s*\<h1\>)/gm,'$1 <%# H1 headers are not allowed within topics. %>');
	text = text.replace(/(^\s*#{2,3}[\s\w](?!.*\<a id)\s*(?!(Features|Security Fix|Resolved Issue|Known Issue|Compatibility|Packages)).*$)/gm,'$1 <%# Make H2 and H3 headers anchors unless the ToC is already over-sized. %>');
	text = text.replace(/(example\])/gm,'$1 <%# Make the link name descriptive. %>');
	text = text.replace(/(example\<.a\>)/gm,'$1 <%# Make the link name descriptive. %>');
	text = text.replace(/(here\])/gm,'$1 <%# Make the link name descriptive. %>');
	text = text.replace(/(here\<.a\>)/gm,'$1 <%# Make the link name descriptive. %>');
	text = text.replace(/(https:..docs-pcf-staging.cfapps.io.*$)/gm,'$1 <%# Do not link to staging versions of the docs. %>');
	text = text.replace(/(\brun:[\n\s]*\<code\>[\s\n]*\$)/gm,'$1<%# We only include dollar signs in terminal snippet examples. %>');
	text = text.replace(/(\bRun:[\n\s]*\<code\>[\s\n]*\$)/gm,'$1<%# We only include dollar signs in terminal snippet examples. %>');
	text = text.replace(/(\brun:[\n\s]*`+[\s\n]*\$)/gm,'$1<%# We only include dollar signs in terminal snippet examples. %>');
	text = text.replace(/(\bRun:[\n\s]*`+[\s\n]*\$)/gm,'$1<%# We only include dollar signs in terminal snippet examples. %>');
	text = text.replace(/(\brunning:[\n\s]*\<code\>[\s\n]*\$)/gm,'$1<%# We only include dollar signs in terminal snippet examples. %>');
	text = text.replace(/(\bRunning:[\n\s]*\<code\>[\s\n]*\$)/gm,'$1<%# We only include dollar signs in terminal snippet examples. %>');
	text = text.replace(/(\brunning:[\n\s]*`+[\s\n]*\$)/gm,'$1<%# We only include dollar signs in terminal snippet examples. %>');
	text = text.replace(/(\bRunning:[\n\s]*`+[\s\n]*\$)/gm,'$1<%# We only include dollar signs in terminal snippet examples. %>');
	text = text.replace(/(version [\d\.]+)/gm,'$1 <%# "v#" is the preferred style. %>');
	text = text.replace(/(Version [\d\.]+)/gm,'$1 <%# "v#" is the preferred style. %>');
	text = text.replace(/(versions [\d\.]+)/gm,'$1 <%# "v#" is the preferred style. %>');
	text = text.replace(/(Versions [\d\.]+)/gm,'$1 <%# "v#" is the preferred style. %>');
	text = text.replace(/(versions \<\= [\d\.]+)/gm,'$1 <%# "v# or earlier" is the preferred style. %>');
	text = text.replace(/(Versions \<\= [\d\.]+)/gm,'$1 <%# "v#" is the preferred style. %>');
	text = text.replace(/(versions \>\= [\d\.]+)/gm,'$1 <%# "v# or earlier" is the preferred style. %>');
	text = text.replace(/(Versions \>\= [\d\.]+)/gm,'$1 <%# "v#" is the preferred style. %>');
	text = text.replace(/(\<\/div\>)/gm,'$1 <%# EHS %>');
	text = text.replace(/(\<\/li\>)/gm,'$1 <%# EHS %>');
	text = text.replace(/(\<\/p\>)/gm,'$1 <%# EHS %>');
	text = text.replace(/(\<\/td\>)/gm,'$1 <%# EHS %>');
	text = text.replace(/(\<\/th\>)/gm,'$1 <%# EHS %>');
	text = text.replace(/(\<div[^\<]*\>)/gm,'$1 <%# ¥SHS %>');
	text = text.replace(/(\<li\>)/gm,'$1 <%# ¥SHS %>');
	text = text.replace(/(\<p[^\<]*\>)/gm,'$1 <%# ¥SHS %>');
	text = text.replace(/(\<td\>)/gm,'$1 <%# ¥SHS %>');
	text = text.replace(/(\<th[^\<]*\>)/gm,'$1 <%# ¥SHS %>');
	text = text.replace(/(\[.*\]\(.*\)(?=[^¥]*\<%# EHS %\>))/gm,'$1<%# Do not use Markdown tags inside HTML tags. %>');
	text = text.replace(/(\w__(?=[^¥]*\<%# EHS %\>))/gm,'$1<%# Do not use Markdown tags inside HTML tags. %>');
	text = text.replace(/(\w\*\*(?=[^¥]*\<%# EHS %\>))/gm,'$1<%# Do not use Markdown tags inside HTML tags. %>');
	text = text.replace(/(\w`(?=[^¥]*\<%# EHS %\>))/gm,'$1<%# Do not use Markdown tags inside HTML tags. %>');
	text = text.replace(/( \<%# ¥SHS %\>)/gm,'');
	text = text.replace(/( \<%# EHS %\>)/gm,'');
	text = text.replace(/(```(?!\s*\n$|\n\s*Where|\n\s*\<br\>))/gm,'$1 <%# £SCS %>');
	text = text.replace(/(```(?! \<%# £SCS %\>))/gm,'$1 <%# ECS %>');
	text = text.replace(/(\<code\>)/gm,'$1 <%# £SCS %>');
	text = text.replace(/(\<\/code\>)/gm,'$1 <%# ECS %>');
	text = text.replace(/(\<pre\>)/gm,'$1 <%# £SCS %>');
	text = text.replace(/(\<pre class=.terminal.\>)/gm,'$1 <%# £SCS %>');
	text = text.replace(/(\<\/pre\>)/gm,'$1 <%# ECS %>');
	text = text.replace(/(^`(?!`)|\s`(?!`))/gm,'$1 <%# £SCS %>');
	text = text.replace(/([^`\s]`)/gm,'$1 <%# ECS %>');
	text = text.replace(/(\]\()/gm,'$1 <%# £SCS %>');
	text = text.replace(/(\[[^\]]*\]\([^\)]*\))/gm,'$1 <%# ECS %>');
	text = text.replace(/(\<a id=)/gm,'$1 <%# £SCS %>');
	text = text.replace(/(\<a href=)/gm,'$1 <%# £SCS %>');
	text = text.replace(/(\<a id= \<%# £SCS %\>[^>]*)/gm,'$1 <%# ECS %>');
	text = text.replace(/(\<a href= \<%# £SCS %\>[^>]*)/gm,'$1 <%# ECS %>');
	text = text.replace(/(\<img src=)/gm,'$1 <%# £SCS %>');
	text = text.replace(/(\<img src= \<%# £SCS %\>[^>]*)/gm,'$1 <%# ECS %>');
	text = text.replace(/(\*\*(?!\.|-|:|,|\*|\s))/gm,'$1 <%# £SCS %>');
	text = text.replace(/(\*\*(?! \<%# £SCS %\>))/gm,'$1 <%# ECS %>');
	text = text.replace(/(\<strong\>)/gm,'$1 <%# £SCS %>');
	text = text.replace(/(\<\/strong\>)/gm,'$1 <%# ECS %>');
	text = text.replace(/(\<b\>)/gm,'$1 <%# £SCS %>');
	text = text.replace(/(\<\/b\>)/gm,'$1 <%# ECS %>');
	text = text.replace(/(\<%=)/gm,'$1 <%# £SCS %>');
	text = text.replace(/(\<%= \<%# £SCS %\>[^%]*)/gm,'$1 <%# ECS %>');
	text = text.replace(/(\<\/p\>[^\n])/gm,'$1 <%# Remove the trailing whitespace here. %>');
	text = text.replace(/(``` <%# ECS %>[^\n])/gm,'$1 <%# Remove the trailing whitespace here. %>');
	text = text.replace(/(\s\.html)/gm,'$1 <%# "HTML" is preferred. %>');
	text = text.replace(/(\s\.zip)/gm,'$1 <%# "ZIP" is preferred. %>');
	text = text.replace(/(\(Go\) Router)/gm,'$1 <%# "Gorouter" is preferred. %>');
	text = text.replace(/(\d bit(?![^£]*\<%# ECS %\>))/gm,'$1<%# Missing the dash: 128-bit is grammatically correct; 128 bit is not. %>');
	text = text.replace(/(<td[^\>]*>\s*-\s*\<\/td\>(?![^£]*\<%# ECS %\>))/gm,'$1<%# Use n/a, in italics, to mark an empty table cell. %>');
	text = text.replace(/(<td[^\>]*>\s*–\s*\<\/td\>(?![^£]*\<%# ECS %\>))/gm,'$1<%# Use n/a, in italics, to mark an empty table cell. %>');
	text = text.replace(/(<td[^\>]*>\s*—\s*\<\/td\>(?![^£]*\<%# ECS %\>))/gm,'$1<%# Use n/a, in italics, to mark an empty table cell. %>');
	text = text.replace(/(<td[^\>]*>\s*\(none\)\s*\<\/td\>(?![^£]*\<%# ECS %\>))/gm,'$1<%# Use n/a, in italics, to mark an empty table cell. %>');
	text = text.replace(/(<td[^\>]*>\s*&mdash;\s*\<\/td\>(?![^£]*\<%# ECS %\>))/gm,'$1<%# Use n/a, in italics, to mark an empty table cell. %>');
	text = text.replace(/(<td[^\>]*>\s*&ndash;\s*\<\/td\>(?![^£]*\<%# ECS %\>))/gm,'$1<%# Use n/a, in italics, to mark an empty table cell. %>');
	text = text.replace(/(<td[^\>]*>\s*n\/a\s*\<\/td\>(?![^£]*\<%# ECS %\>))/gm,'$1<%# Use n/a, in italics, to mark an empty table cell. %>');
	text = text.replace(/(<td[^\>]*>\s*N\/A\s*\<\/td\>(?![^£]*\<%# ECS %\>))/gm,'$1<%# Use n/a, in italics, to mark an empty table cell. %>');
	text = text.replace(/(<td[^\>]*>\s*NA\s*\<\/td\>(?![^£]*\<%# ECS %\>))/gm,'$1<%# Use n/a, in italics, to mark an empty table cell. %>');
	text = text.replace(/(<td[^\>]*>\s*none\s*\<\/td\>(?![^£]*\<%# ECS %\>))/gm,'$1<%# Use n/a, in italics, to mark an empty table cell. %>');
	text = text.replace(/(\s\d+\-\d+(?![^£]*\<%# ECS %\>))/gm,'$1<%# Use &ndash; for a range, not a regular dash. %>');
	text = text.replace(/(\sorg(?![^£]*\<%# ECS %\>))/gm,'$1<%# "organization" is preferred unless referring to the Cloud Foundry org concept. %>');
	text = text.replace(/(\d&nbsp;bit(?![^£]*\<%# ECS %\>))/gm,'$1<%# Missing the dash: 128-bit is grammatically correct; 128 bit is not. %>');
	text = text.replace(/(\(s\)(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not combine a singular and a plural. Maybe write "one or more" instead. %>');
	text = text.replace(/(and\/or(?![^£]*\<%# ECS %\>))/gm,'$1<%# "or" is preferred. %>');
	text = text.replace(/('\s(?![^£]*\<%# ECS %\>))/gm,'$1<%# Should this be a backtick? %>');
	text = text.replace(/([^a][^l][\n\s]Compliance Scanner\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_short %>');
	text = text.replace(/([^a][^l][\n\s]Concourse\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_short %>');
	text = text.replace(/([^a][^l][\n\s]CredHub Service Broker\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_short %>');
	text = text.replace(/([^a][^l][\n\s]Developer Console\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_short %>');
	text = text.replace(/([^a][^l][\n\s]Event Alerts\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_short %>');
	text = text.replace(/([^a][^l][\n\s]FIM\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_abbr %>');
	text = text.replace(/([^a][^l][\n\s]GemFire\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_short %>');
	text = text.replace(/([^a][^l][\n\s]Greenplum\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_short %>');
	text = text.replace(/([^a][^l][\n\s]Healthwatch\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_short %>');
	text = text.replace(/([^a][^l][\n\s]IPsec\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_short %>');
	text = text.replace(/([^a][^l][\n\s]Isolation Segment\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_short %>');
	text = text.replace(/([^a][^l][\n\s]On Demand Services SDK\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_short %>');
	text = text.replace(/([^a][^l][\n\s]Ops Manager\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.ops_manager %>');
	text = text.replace(/([^a][^l][\n\s]Postgres\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_short %>');
	text = text.replace(/([^a][^l][\n\s]Push Notification\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_short %>');
	text = text.replace(/([^a][^l][\n\s]Service Instance Manager\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_short %>');
	text = text.replace(/([^a][^l][\n\s]Single Sign-On\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_short %>');
	text = text.replace(/([^u][^b][\n\s]Maestro\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Do not shorten "CredHub Maestro" to just "Maestro" %>');
	text = text.replace(/(\d and above\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "# and later" is preferred. %>');
	text = text.replace(/(\d and below\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "# and earlier" is preferred. %>');
	text = text.replace(/(\d and greater\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "# and later" is preferred. %>');
	text = text.replace(/(\d and higher\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "# and later" is preferred. %>');
	text = text.replace(/(\d and lower\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "# and earlier" is preferred. %>');
	text = text.replace(/(\d GB\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "#&nbsp;GB" is preferred. %>');
	text = text.replace(/(\d KB\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "#&nbsp;KB" is preferred. %>');
	text = text.replace(/(\d MB\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "#&nbsp;MB" is preferred. %>');
	text = text.replace(/(\d or above\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "# or later" is preferred. %>');
	text = text.replace(/(\d or below\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "# or earlier" is preferred. %>');
	text = text.replace(/(\d or greater\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "# or later" is preferred. %>');
	text = text.replace(/(\d or higher\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "# or later" is preferred. %>');
	text = text.replace(/(\d or lower\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "# or earlier" is preferred. %>');
	text = text.replace(/(\d+(st|nd|rd|th|) April\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The date format is "MONTH DD, YYYY" %>');
	text = text.replace(/(\d+(st|nd|rd|th|) August\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The date format is "MONTH DD, YYYY" %>');
	text = text.replace(/(\d+(st|nd|rd|th|) December\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The date format is "MONTH DD, YYYY" %>');
	text = text.replace(/(\d+(st|nd|rd|th|) February\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The date format is "MONTH DD, YYYY" %>');
	text = text.replace(/(\d+(st|nd|rd|th|) January\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The date format is "MONTH DD, YYYY" %>');
	text = text.replace(/(\d+(st|nd|rd|th|) July\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The date format is "MONTH DD, YYYY" %>');
	text = text.replace(/(\d+(st|nd|rd|th|) June\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The date format is "MONTH DD, YYYY" %>');
	text = text.replace(/(\d+(st|nd|rd|th|) March\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The date format is "MONTH DD, YYYY" %>');
	text = text.replace(/(\d+(st|nd|rd|th|) May\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The date format is "MONTH DD, YYYY" %>');
	text = text.replace(/(\d+(st|nd|rd|th|) November\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The date format is "MONTH DD, YYYY" %>');
	text = text.replace(/(\d+(st|nd|rd|th|) October\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The date format is "MONTH DD, YYYY" %>');
	text = text.replace(/(\d+(st|nd|rd|th|) September\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The date format is "MONTH DD, YYYY" %>');
	text = text.replace(/(\dGB\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "#&nbsp;GB" is preferred. %>');
	text = text.replace(/(\dKB\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "#&nbsp;KB" is preferred. %>');
	text = text.replace(/(\s'(?![^£]*\<%# ECS %\>))/gm,'$1<%# Should this be a backtick? %>');
	text = text.replace(/(\se\.g:\s(?![^£]*\<%# ECS %\>))/gm,'$1<%# "For example" is preferred. %>');
	text = text.replace(/(\se\.g\.,\s(?![^£]*\<%# ECS %\>))/gm,'$1<%# "For example" is preferred. %>');
	text = text.replace(/(\se\.g\.:\s(?![^£]*\<%# ECS %\>))/gm,'$1<%# "For example" is preferred. %>');
	text = text.replace(/(\seg\.:\s(?![^£]*\<%# ECS %\>))/gm,'$1<%# "For example" is preferred. %>');
	text = text.replace(/(\seg\.\s(?![^£]*\<%# ECS %\>))/gm,'$1<%# "For example" is preferred. %>');
	text = text.replace(/(^(?!title:).*2012R2\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# The short product name is "<%= vars.windows_runtime_abbr %> 2012 R2". %>');
	text = text.replace(/(^(?!title:).*app runtime\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.app_runtime %>');
	text = text.replace(/(^(?!title:).*Beta\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# "beta" is preferred. %>');
	text = text.replace(/(^(?!title:).*Elastic Runtime\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.app_runtime %>');
	text = text.replace(/(^(?!title:).*\bERT\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.app_runtime %>');
	text = text.replace(/(^(?!title:).*IPSec for PCF\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_full %>');
	text = text.replace(/(^(?!title:).*MySQL for Pivotal Platform\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_full %>');
	text = text.replace(/(^(?!title:).*Operations Manager\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_full %>');
	text = text.replace(/(^(?!title:).*Ops Man\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_short %>');
	text = text.replace(/(^(?!title:).*ops manager\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.ops_manager %>');
	text = text.replace(/(^(?!title:).*OpsMan\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_short %>');
	text = text.replace(/(^(?!title:).*OpsManager\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_short %>');
	text = text.replace(/(^(?!title:).*PAS\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.app_runtime_abbr %>');
	text = text.replace(/(^(?!title:).*PBS\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_short %>');
	text = text.replace(/(^(?!title:).*PFS\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_short %>');
	text = text.replace(/(^(?!title:).*Pivotal Anti-Virus\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_full %>');
	text = text.replace(/(^(?!title:).*Pivotal App Service\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.app_runtime %>');
	text = text.replace(/(^(?!title:).*Pivotal app service\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.app_runtime %>');
	text = text.replace(/(^(?!title:).*Pivotal Application Service\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.app_runtime %>');
	text = text.replace(/(^(?!title:).*Pivotal application service\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.app_runtime %>');
	text = text.replace(/(^(?!title:).*Pivotal Backup and Restore\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_full %>');
	text = text.replace(/(^(?!title:).*Pivotal Cloud Foundry\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= platform_old %>');
	text = text.replace(/(^(?!title:).*Pivotal Cloud Foundry 3\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# "<%= platform_name %> 3" is preferred. %>');
	text = text.replace(/(^(?!title:).*Pivotal Compliance Scanner\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_full %>');
	text = text.replace(/(^(?!title:).*Pivotal Concourse\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_full %>');
	text = text.replace(/(^(?!title:).*Pivotal CredHub Service Broker\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_full %>');
	text = text.replace(/(^(?!title:).*Pivotal Developer Console\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_full %>');
	text = text.replace(/(^(?!title:).*Pivotal Event Alerts\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_full %>');
	text = text.replace(/(^(?!title:).*Pivotal File Integrity Monitoring\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_full %>');
	text = text.replace(/(^(?!title:).*Pivotal GemFire\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_name %>');
	text = text.replace(/(^(?!title:).*Pivotal Greenplum\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_full %>');
	text = text.replace(/(^(?!title:).*Pivotal Healthwatch\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_full %>');
	text = text.replace(/(^(?!title:).*Pivotal IPsec\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_full %>');
	text = text.replace(/(^(?!title:).*Pivotal Isolation Segment\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_full %>');
	text = text.replace(/(^(?!title:).*Pivotal On Demand Services SDK\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_full %>');
	text = text.replace(/(^(?!title:).*Pivotal Ops Manager\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.ops_manager_full %>');
	text = text.replace(/(^(?!title:).*Pivotal Postgres\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_full %>');
	text = text.replace(/(^(?!title:).*Pivotal Push Notification\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_full %>');
	text = text.replace(/(^(?!title:).*Pivotal RabbitMQ\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_full %>');
	text = text.replace(/(^(?!title:).*Pivotal Service Instance Manager\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_full %>');
	text = text.replace(/(^(?!title:).*Pivotal Single Sign-On\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_full %>');
	text = text.replace(/(^(?!title:).*Rabbit MQ\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_short %>');
	text = text.replace(/(^(?!title:).*RabbitMQ for Kubernetes\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_full %>');
	text = text.replace(/(^(?!title:).*RabbitMQ for Pivotal Platform\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_full %>');
	text = text.replace(/(^(?!title:).*Redis for Pivotal Platform\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_full %>');
	text = text.replace(/(^(?!title:).*single sign-on\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.product_full %>');
	text = text.replace(/(^(?!title:|.*for).*PCF\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.platform_old %>');
	text = text.replace(/(^(?!title:|.*for\s).*Pivotal Platform\b(?![^€]*\<%# ELS %\>))/gm,'$1<%# Use <%= vars.platform_name %>');
	text = text.replace(/(^\s*\*\s*[a-z](?![^£]*\<%# ECS %\>))/gm,'$1<%# Bullet points start with lowercase letters. %>');
	text = text.replace(/(^Note\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Put notes in Note box formatting per the wiki. %>');
	text = text.replace(/(^title:.*\([A-Z]+\)(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not put abbreviations in page titles. %>');
	text = text.replace(/(^title:.*PAS\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Write "Pivotal Application Service" in full in topic titles. %>');
	text = text.replace(/(\ba given\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Redundant? %>');
	text = text.replace(/(\ba SQL\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "an SQL" is preferred. %>');
	text = text.replace(/(\baddon\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "add-on" is preferred. %>');
	text = text.replace(/(\bADFS\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Write "AD FS" per the Microsoft preference. %>');
	text = text.replace(/(\badministrate\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "administer" is preferred. %>');
	text = text.replace(/(\bAdministrate\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Administer" is preferred. %>');
	text = text.replace(/(\badministrated\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "administered" is preferred. %>');
	text = text.replace(/(\badministrates\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "administers" is preferred. %>');
	text = text.replace(/(\badministrating\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "administering" is preferred. %>');
	text = text.replace(/(\bAdministrating\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Administering" is preferred. %>');
	text = text.replace(/(\badministrator\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "admin" is preferred. %>');
	text = text.replace(/(\bAdministrator\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Admin" is preferred. %>');
	text = text.replace(/(\bAdministrators\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Admins" is preferred. %>');
	text = text.replace(/(\badministrators\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "admins" is preferred. %>');
	text = text.replace(/(\baffect\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Consider using a more precise verb. %>');
	text = text.replace(/(\bAI\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "application instance" is preferred. %>');
	text = text.replace(/(\bair gapped\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "air-gapped" is preferred. %>');
	text = text.replace(/(\bAir gapped\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Air-gapped" is preferred. %>');
	text = text.replace(/(\bair-gap\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The noun is "air gap". %>');
	text = text.replace(/(\bairgap\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "air-gap" is preferred. %>');
	text = text.replace(/(\bAirgap\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Air-gap" is preferred. %>');
	text = text.replace(/(\bairgapped\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "air-gapped" is preferred. %>');
	text = text.replace(/(\bAirgapped\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Air-gapped" is preferred. %>');
	text = text.replace(/(\balert box\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "dialog box" is preferred. %>');
	text = text.replace(/(\bAlert box\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "dialog box" is preferred. %>');
	text = text.replace(/(\bAlert window\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "dialog box" is preferred. %>');
	text = text.replace(/(\balert window\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "dialog box" is preferred. %>');
	text = text.replace(/(\balpha-numeric\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "alphanumeric" is preferred. %>');
	text = text.replace(/(\bAmazon Web Services(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "AWS" after the first use. %>');
	text = text.replace(/(\ban UAA\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "a UAA" is preferred. %>');
	text = text.replace(/(\bAn UAA\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "A UAA" is preferred. %>');
	text = text.replace(/(\banti-virus\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "antivirus" is preferred. %>');
	text = text.replace(/(\bapp container\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "application container" is preferred. %>');
	text = text.replace(/(\bApp Developer\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "app developer" is preferred. %>');
	text = text.replace(/(\bApp Manager\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Apps Manager" is preferred. %>');
	text = text.replace(/(\bapplication developer\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "app developer" is preferred. %>');
	text = text.replace(/(\bapplication program interface\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "API" is preferred. %>');
	text = text.replace(/(\bapplication security group\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "ASG" is preferred. %>');
	text = text.replace(/(\bApplication Transformation\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "App Modernization" is preferred. %>');
	text = text.replace(/(\bApplication VM\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "host VM" is preferred. %>');
	text = text.replace(/(\bapplications\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "apps" is preferred. %>');
	text = text.replace(/(\bApplications\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Apps" is preferred. %>');
	text = text.replace(/(\bApplications Manager\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Apps Manager" is preferred. %>');
	text = text.replace(/(\bAppTX\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "App Modernization" is preferred. %>');
	text = text.replace(/(\baren't\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bartefact\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "artifact" is preferred. %>');
	text = text.replace(/(\bArtefact\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Artifact" is preferred. %>');
	text = text.replace(/(\bassistance\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "help" is preferred. %>');
	text = text.replace(/(\bat the moment\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# 1st preference: delete. 2nd preference: replace these words with "currently". %>');
	text = text.replace(/(\bAt the moment\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# 1st preference: delete. 2nd preference: replace these words with "Currently". %>');
	text = text.replace(/(\bat the time of writing\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# 1st preference: delete. 2nd preference: replace these words with "currently". %>');
	text = text.replace(/(\bAt the time of writing\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# 1st preference: delete. 2nd preference: replace these words with "Currently". %>');
	text = text.replace(/(\bauth\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "authentication" is preferred. %>');
	text = text.replace(/(\bavailability zone\b(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "AZ" after the first use. %>');
	text = text.replace(/(\bAvailability zone\b(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "AZ" after the first use. %>');
	text = text.replace(/(\bavailability zones\b(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "AZ" after the first use. %>');
	text = text.replace(/(\bAvailability zones\b(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "AZ" after the first use. %>');
	text = text.replace(/(\bAWS S3\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Amazon S3" is preferred. %>');
	text = text.replace(/(\bback-up\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The noun is "backup" and the verb is "back up". %>');
	text = text.replace(/(\bBack-up\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The noun is "backup" and the verb is "back up". %>');
	text = text.replace(/(\bbe sure to\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Redundant? %>');
	text = text.replace(/(\bBest Practices\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Best Practice sections are not forbidden but nor are they recommended. Check if the material could be placed somewhere else. %>');
	text = text.replace(/(\bBETA\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "beta" is preferred. %>');
	text = text.replace(/(\bBig Data\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "big data" is preferred. %>');
	text = text.replace(/(\bblob store\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "blobstore" is preferred. %>');
	text = text.replace(/(\bBlue-Green deployment\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "blue-green deployment" is preferred. %>');
	text = text.replace(/(\bboot the\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "start up the" is preferred. %>');
	text = text.replace(/(\bBosh\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "BOSH" is preferred. %>');
	text = text.replace(/(\bbosh\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "BOSH" is preferred. %>');
	text = text.replace(/(\bBOSH director\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "BOSH Director" is preferred. %>');
	text = text.replace(/(\bBOSH Health Monitor metrics\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "BOSH health metrics" is preferred. %>');
	text = text.replace(/(\bbosh lite\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "BOSH-Lite" is preferred. %>');
	text = text.replace(/(\bBOSH lite\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "BOSH-Lite" is preferred. %>');
	text = text.replace(/(\bBOSH Lite\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "BOSH-Lite" is preferred. %>');
	text = text.replace(/(\bBOSH metrics\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "BOSH health metrics" is preferred. %>');
	text = text.replace(/(\bBOSH System Metrics\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "BOSH health metrics" is preferred. %>');
	text = text.replace(/(\bBOSH-init\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "bosh-init" is preferred. %>');
	text = text.replace(/(\bBPM\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "bpm" is preferred as this is the BOSH docs style. %>');
	text = text.replace(/(\bbug\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "issue" is preferred. %>');
	text = text.replace(/(\bBug\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Issue" is preferred. %>');
	text = text.replace(/(\bbugs\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "issue" is preferred. %>');
	text = text.replace(/(\bBugs\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Issue" is preferred. %>');
	text = text.replace(/(\bbump\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "update" is preferred. %>');
	text = text.replace(/(\bBump\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Update" is preferred. %>');
	text = text.replace(/(\bBumped\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Updated" is preferred. %>');
	text = text.replace(/(\bbumped\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "updated" is preferred. %>');
	text = text.replace(/(\bbumps\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "updates" is preferred. %>');
	text = text.replace(/(\bBumps\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Updates" is preferred. %>');
	text = text.replace(/(\bbutton\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Delete "button" if redundant. For example, write "click Save" instead of "Click the Save button". %>');
	text = text.replace(/(\bcan't\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bCC API\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "CAPI" is preferred. %>');
	text = text.replace(/(\bCell VM\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "host VM" is preferred. %>');
	text = text.replace(/(\bcert\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "certificate" is preferred. %>');
	text = text.replace(/(\bcertificate authority certificate\b(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "CA" after first use. %>');
	text = text.replace(/(\bCertificate Authority certificate\b(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "CA" after first use. %>');
	text = text.replace(/(\bcertificate authority certificates\b(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "CA" after first use. %>');
	text = text.replace(/(\bCertificate Authority certificates\b(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "CA" after first use. %>');
	text = text.replace(/(\bcertificate signing request\b(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "CSR" after first use. %>');
	text = text.replace(/(\bCertificate signing request\b(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "CSR" after first use. %>');
	text = text.replace(/(\bCertificate Signing Request\b(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "CSR" after first use. %>');
	text = text.replace(/(\bcertificate signing requests\b(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "CSR" after first use. %>');
	text = text.replace(/(\bCertificate signing requests\b(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "CSR" after first use. %>');
	text = text.replace(/(\bCertificate Signing Requests\b(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "CSR" after first use. %>');
	text = text.replace(/(\bcerts\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "certificates" is preferred. %>');
	text = text.replace(/(\bCF\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Cloud Foundry" is preferred %>');
	text = text.replace(/(\bcf cli\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The brand name is shortened as "cf CLI". %>');
	text = text.replace(/(\bCF CLI\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The brand name is shortened as "cf CLI". %>');
	text = text.replace(/(\bcf push\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# If code, add code tags and sandwich between "the" and "command". %>');
	text = text.replace(/(\bcheck box\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "checkbox" is preferred. %>');
	text = text.replace(/(\bcheckmark\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "check mark" is preferred. %>');
	text = text.replace(/(\bclean-up\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The verb is "clean up". The noun and adjective are both "cleanup". %>');
	text = text.replace(/(\bclick on\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "click" is preferred. %>');
	text = text.replace(/(\bcloud controller\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Cloud Controller" is preferred. %>');
	text = text.replace(/(\bCloud Controller API\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# 1st use: "Cloud Foundry API (CAPI)". Subsequent uses: "CAPI" %>');
	text = text.replace(/(\bCloud Controller Database\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Cloud Controller database" is preferred. %>');
	text = text.replace(/(\bCloud Foundry API(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "CAPI" after the first use. %>');
	text = text.replace(/(\bcloud native\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "cloud-native" is preferred. %>');
	text = text.replace(/(\bCloud native application bundle\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Cloud Native Application Bundle" is capitalized. Shorten to "CNAB" after first use. %>');
	text = text.replace(/(\bcloud native application bundle\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Cloud Native Application Bundle" is capitalized. Shorten to "CNAB" after first use. %>');
	text = text.replace(/(\bcloud-native application bundle\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Cloud Native Application Bundle" has no hyphen and is capitalized. Shorten to "CNAB" after first use. %>');
	text = text.replace(/(\bCloud-native application bundle\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Cloud Native Application Bundle" has no hyphen and is capitalized. Shorten to "CNAB" after first use. %>');
	text = text.replace(/(\bCloudController\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Cloud Controller" is preferred. %>');
	text = text.replace(/(\bCloudformation\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "CloudFormation" is preferred. %>');
	text = text.replace(/(\bCloudFoundry\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Cloud Foundry" is preferred %>');
	text = text.replace(/(\bcollocate\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "co-locate" is now preferred. %>');
	text = text.replace(/(\bcollocated\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "co-located" is now preferred. %>');
	text = text.replace(/(\bcolocate\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "co-locate" is now preferred. %>');
	text = text.replace(/(\bcolocated\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "co-located" is now preferred. %>');
	text = text.replace(/(\bcolocating\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "co-locating" is preferred. %>');
	text = text.replace(/(\bColocating\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Co-locating" is preferred. %>');
	text = text.replace(/(\bcoming soon\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Only document what exists. There are legal ramifications to making promises. %>');
	text = text.replace(/(\bcommand below\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "To X, run:" and "X by running:" are preferred. %>');
	text = text.replace(/(\bCommand Line Interface\b(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "CLI" after first use. %>');
	text = text.replace(/(\bCommand line interface\b(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "CLI" after first use. %>');
	text = text.replace(/(\bcommand line interface\b(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "CLI" after first use. %>');
	text = text.replace(/(\bcommand shell\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "shell" is preferred. %>');
	text = text.replace(/(\bcompiletime\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "compile time" is preferred. %>');
	text = text.replace(/(\bcomponent VM\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# All VMs are component VMs except for the host VMs. %>');
	text = text.replace(/(\bConfig\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "config" is preferred. %>');
	text = text.replace(/(\bConfirm if\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Confirm that" is better. %>');
	text = text.replace(/(\bconfirm if\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "confirm that" is better. %>');
	text = text.replace(/(\bcontainer networking\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "CF Networking" is preferred. %>');
	text = text.replace(/(\bContinuous Integration\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "continuous integration" is preferred. %>');
	text = text.replace(/(\bcontrol-C\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Ctrl-C" is preferred. %>');
	text = text.replace(/(\bControl-C\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Ctrl-C" is preferred. %>');
	text = text.replace(/(\bcould've\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bcouldn't\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bcpu\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "CPU" is preferred. %>');
	text = text.replace(/(\bcredhub\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The CF component is named "CredHub" %>');
	text = text.replace(/(\bCredhub\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The CF component is named "CredHub" %>');
	text = text.replace(/(\bcurl\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The product name is styled "cURL". %>');
	text = text.replace(/(\bCustom resource definition\b(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "CRD" after first use. %>');
	text = text.replace(/(\bCustom Resource Definition\b(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "CRD" after first use. %>');
	text = text.replace(/(\bcustom resource definition\b(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "CRD" after first use. %>');
	text = text.replace(/(\bdata set\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "dataset" is preferred. %>');
	text = text.replace(/(\bdata store\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "datastore" is preferred. %>');
	text = text.replace(/(\bdatacenter\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "data center" is preferred. %>');
	text = text.replace(/(\bDatacenter\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "data center" is preferred. %>');
	text = text.replace(/(\bDate: X\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Missing the date? %>');
	text = text.replace(/(\bdate: x\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Missing the date? %>');
	text = text.replace(/(\bDate: x\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Missing the date? %>');
	text = text.replace(/(\bdate: X\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Missing the date? %>');
	text = text.replace(/(\bDB\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "database" is preferred. %>');
	text = text.replace(/(\bdesire\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "want" is preferred. %>');
	text = text.replace(/(\bdetails on\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "details about" is preferred. %>');
	text = text.replace(/(\bDetails on\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Details about" is preferred. %>');
	text = text.replace(/(\bdevelopment environment\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "local machine" is preferred. %>');
	text = text.replace(/(\bdevops\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "DevOps" is preferred. %>');
	text = text.replace(/(\bDevops\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "DevOps" is preferred. %>');
	text = text.replace(/(\bdidn't\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bDiego BBS\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "BBS" is preferred. %>');
	text = text.replace(/(\bDiego brain\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Diego Brain" is now preferred. %>');
	text = text.replace(/(\bDiego cell\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Diego Cell" is now preferred. %>');
	text = text.replace(/(\bDiego cells\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Diego Cells" is now preferred. %>');
	text = text.replace(/(\bDigital Transformation\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "digital transformation" is preferred. %>');
	text = text.replace(/(\bdisk IO\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "disk I/O" is preferred. %>');
	text = text.replace(/(\bdistro\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "distribution" is preferred. %>');
	text = text.replace(/(\bdoc\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "documentation" is preferred. %>');
	text = text.replace(/(\bdocker image\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Docker image" is preferred. %>');
	text = text.replace(/(\bDocker trusted registry\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Docker Registry" is preferred. %>');
	text = text.replace(/(\bdocs\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "documentation" is preferred. %>');
	text = text.replace(/(\bDocs\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Documentation" is preferred. %>');
	text = text.replace(/(\bdoesn't\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bdon't\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bDon't\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bdoppler\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Doppler" is preferred. %>');
	text = text.replace(/(\bDoppler server\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Doppler" is preferred. %>');
	text = text.replace(/(\bDoppler VM\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Doppler" is preferred. %>');
	text = text.replace(/(\bdouble click\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "double-click" is preferred. %>');
	text = text.replace(/(\bdouble-parens expression\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "double-parentheses expression" is preferred. %>');
	text = text.replace(/(\bdownscale\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "scale down" is preferred. %>');
	text = text.replace(/(\bdrop-down\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "dropdown" is preferred -- without a hyphen and without "list" or "menu" %>');
	text = text.replace(/(\bdropdown list\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "dropdown" is preferred -- without a hyphen and without "list" or "menu" %>');
	text = text.replace(/(\bdropdown menu\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "dropdown" is preferred -- without a hyphen and without "list" or "menu" %>');
	text = text.replace(/(\bduring the boot sequence\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "during startup" is preferred. %>');
	text = text.replace(/(\be-mail\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "email" is preferred. %>');
	text = text.replace(/(\beasily\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Avoid when describing an instruction. %>');
	text = text.replace(/(\beasy\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Avoid when describing an instruction. %>');
	text = text.replace(/(\benter in\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Consider shortening to just "enter". %>');
	text = text.replace(/(\benter the following\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "To X, run:" and "X by running:" are preferred. %>');
	text = text.replace(/(\benv\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "environment" is preferred %>');
	text = text.replace(/(\bephemeral disk\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# There are two kinds of disk: ephemeral and persistent. You do not need to modify "disk" with "ephemeral" unless there is discussion of persistent disks in the same topic. Always define persistent disks as persistent. %>');
	text = text.replace(/(\beveryone's\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bEveryone's\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bexperimental\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The terms "experimental" and "beta" have different meanings only in VMware. Otherwise, use "beta" and never "experimental". %>');
	text = text.replace(/(\bFAQ\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use FAQs unless absolutely necessary. Fold into other appropriate locations in the doc. %>');
	text = text.replace(/(\bfile name\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "filename" is preferred. %>');
	text = text.replace(/(\bfile store\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "filestore" is preferred. %>');
	text = text.replace(/(\bfilestorage\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "file storage" is preferred. %>');
	text = text.replace(/(\bfilesystem\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "file system" is preferred. %>');
	text = text.replace(/(\bfirehose\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Firehose" is capitalized. %>');
	text = text.replace(/(\bfolder\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "directory" is preferred. %>');
	text = text.replace(/(\bfolders\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "directories" is preferred. %>');
	text = text.replace(/(\bfollowing:(?![^£]*\<%# ECS %\>))/gm,'$1<%# To introduce steps just write "To do x:" %>');
	text = text.replace(/(\bfor instance\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "for example" is preferred. %>');
	text = text.replace(/(\bfor more information\.(?![^£]*\<%# ECS %\>))/gm,'$1<%# The x-ref format is "For more information, see..." %>');
	text = text.replace(/(\bFrequently Asked Questions\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use FAQs unless absolutely necessary. Fold into other appropriate locations in the doc. %>');
	text = text.replace(/(\bfully qualified domain name\b(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "FQDN" after the first use. %>');
	text = text.replace(/(\bFully qualified domain name\b(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "FQDN" after the first use. %>');
	text = text.replace(/(\bfuture\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Only document what exists. There are legal ramifications to making promises. %>');
	text = text.replace(/(\bGarbage Collector\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "garbage collector" is preferred. %>');
	text = text.replace(/(\bgarden-runc\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Garden-runC" is preferred. %>');
	text = text.replace(/(\bGarden-RunC\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Garden-runC" is preferred. %>');
	text = text.replace(/(\bGemfire\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "GemFire" is preferred. %>');
	text = text.replace(/(\bget in touch\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Use a specific communication verb instead, such as "email". %>');
	text = text.replace(/(\bGet in touch\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Use a specific communication verb instead, such as "email". %>');
	text = text.replace(/(\bGithub\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The brand name is "GitHub". %>');
	text = text.replace(/(\bGlobal Support Services\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Pivotal Support" is preferred. %>');
	text = text.replace(/(\bgo router\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Gorouter" is preferred. %>');
	text = text.replace(/(\bGo Router\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Gorouter" is preferred. %>');
	text = text.replace(/(\bGo routine\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "goroutine" is preferred. %>');
	text = text.replace(/(\bGolang\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "golang" is preferred. %>');
	text = text.replace(/(\bgonna\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bGoogle Cloud Platform\b(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "GCP" after the first use. %>');
	text = text.replace(/(\bgorouter\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Gorouter" is preferred. %>');
	text = text.replace(/(\bGoRouter\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Gorouter" is preferred. %>');
	text = text.replace(/(\bGoroutine\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "goroutine" is preferred. %>');
	text = text.replace(/(\bgotta\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bgraphical interface\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "UI" is preferred. %>');
	text = text.replace(/(\bGreenPlum\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Greenplum" is preferred. %>');
	text = text.replace(/(\bGSS\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Pivotal Support" is preferred. %>');
	text = text.replace(/(\bguarantee\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Maybe replace with "ensure" to avoid the sense of legalese. %>');
	text = text.replace(/(\bGuarantee\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Maybe replace with "Ensure" to avoid the sense of legalese. %>');
	text = text.replace(/(\bGUI\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "UI" is preferred. %>');
	text = text.replace(/(\bHA(?!\s[Cc]luster)(?![^£]*\<%# ECS %\>))/gm,'$1<%# "high availability" is preferred. %>');
	text = text.replace(/(\bHAC\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "HA cluster" is preferred. %>');
	text = text.replace(/(\bhadn't\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bhankering\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "want" is preferred. %>');
	text = text.replace(/(\bHAproxy\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "HAProxy" is preferred. %>');
	text = text.replace(/(\bHaproxy\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "HAProxy" is preferred. %>');
	text = text.replace(/(\bhasn't\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bhaven't\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bhe'd\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bHe'd\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bhe'll\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bHe'll\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bhe's\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bHe's\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bhealth-check\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "health check" is preferred. %>');
	text = text.replace(/(\bhealthcheck\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "health check" is preferred. %>');
	text = text.replace(/(\bHelm Chart\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Helm chart" is preferred. %>');
	text = text.replace(/(\bhelm chart\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Helm chart" is preferred. %>');
	text = text.replace(/(\bHelm-Chart\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Helm chart" is preferred. %>');
	text = text.replace(/(\bhelm-chart\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Helm chart" is preferred. %>');
	text = text.replace(/(\bHelm-chart\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Helm chart" is preferred. %>');
	text = text.replace(/(\bHigh Availability\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "high availability" is preferred. %>');
	text = text.replace(/(\bhigh availability cluster\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "HA cluster" is preferred. %>');
	text = text.replace(/(\bHigh availability cluster\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "HA cluster" is preferred. %>');
	text = text.replace(/(\bhighly recommend\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Just "recommend" is preferred. %>');
	text = text.replace(/(\bhighly recommends\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Just "recommends" is preferred. %>');
	text = text.replace(/(\bhis or her\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "they" is preferred. %>');
	text = text.replace(/(\bhis\/her\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "they" is preferred. %>');
	text = text.replace(/(\bhost name\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "hostname" is preferred. %>');
	text = text.replace(/(\bHttp\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "HTTP" is preferred. %>');
	text = text.replace(/(\bHTTP Router\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Gorouter" is preferred. %>');
	text = text.replace(/(\bhuman readable description\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The compound adjective is missing a hyphen. %>');
	text = text.replace(/(\bHuman readable description\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The compound adjective is missing a hyphen. %>');
	text = text.replace(/(\bhuman readable identifier\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The compound adjective is missing a hyphen. %>');
	text = text.replace(/(\bHuman readable identifier\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The compound adjective is missing a hyphen. %>');
	text = text.replace(/(\bhuman readable name\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The compound adjective is missing a hyphen. %>');
	text = text.replace(/(\bHuman readable name\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The compound adjective is missing a hyphen. %>');
	text = text.replace(/(\bhuman readable text\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The compound adjective is missing a hyphen. %>');
	text = text.replace(/(\bHuman readable text\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The compound adjective is missing a hyphen. %>');
	text = text.replace(/(\bI'd\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bI'll\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bI'm\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bI've\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bIAAS\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "IaaS" is preferred. %>');
	text = text.replace(/(\bIf you want to\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Maybe replace with just "To". %>');
	text = text.replace(/(\bif you want to\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Maybe replace with just "to". %>');
	text = text.replace(/(\bin CredHub\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# There are two CredHubs in PCF v2.0: BOSH CredHub and runtime CredHub. %>');
	text = text.replace(/(\bin go\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "in Go" is preferred. %>');
	text = text.replace(/(\bin order to\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "to" is preferred. %>');
	text = text.replace(/(\bin real-time\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Stuff happens in "real time". %>');
	text = text.replace(/(\bin the terminal window\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "on the command line" is preferred. %>');
	text = text.replace(/(\bindependent service vendor\b(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "ISV" after the first use. %>');
	text = text.replace(/(\bIndependent service vendor\b(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "ISV" after the first use. %>');
	text = text.replace(/(\bIndependent Service Vendor\b(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "ISV" after the first use. %>');
	text = text.replace(/(\bindependent service vendors\b(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "ISV" after the first use. %>');
	text = text.replace(/(\bIndependent service vendors\b(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "ISV" after the first use. %>');
	text = text.replace(/(\bIndependent Service Vendors\b(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "ISV" after the first use. %>');
	text = text.replace(/(\bindices\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "indexes" is preferred. %>');
	text = text.replace(/(\binfo\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "information" is preferred. %>');
	text = text.replace(/(\bInfo\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Information" is preferred. %>');
	text = text.replace(/(\binformation on\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "information about" is preferred. %>');
	text = text.replace(/(\bInput\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The verb "Enter" is preferred. %>');
	text = text.replace(/(\binput that\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The verb "enter" is preferred. %>');
	text = text.replace(/(\binput the\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The verb "enter" is preferred. %>');
	text = text.replace(/(\binsecure\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "not secure" is preferred. %>');
	text = text.replace(/(\bInsecure\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Not secure" is preferred. %>');
	text = text.replace(/(\bInternet\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Only capitalize "internet" when it is part of a title %>');
	text = text.replace(/(\bIP(?!\s[Aa]ddress)\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not omit "address" from "IP address". %>');
	text = text.replace(/(\bis expected\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Consider replacing with "in most cases" to sound more confident. %>');
	text = text.replace(/(\bis not expected\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Consider replacing with "in most cases" to sound more confident. %>');
	text = text.replace(/(\bis used to\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Maybe delete. "runs" is punchier than "is used to run". %>');
	text = text.replace(/(\bisn't\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bIsolation Segments\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Isolation Segment" is the official title so do not make it plural. It is fine to talk of "isolation segments" though. %>');
	text = text.replace(/(\bit is necessary to\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Consider deleting this or replacing it with the shorter "you must". %>');
	text = text.replace(/(\bIt is necessary to\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Consider deleting this or replacing it with the shorter "You must". %>');
	text = text.replace(/(\bIt is possible to\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Consider shortening to "You can" or rewriting the sentence as an imperative. %>');
	text = text.replace(/(\bit is possible to\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Consider shortening to "You can" or rewriting the sentence as an imperative. %>');
	text = text.replace(/(\bit is recommended\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Specify the party that recommends (Pivotal, Cloud Foundry, etc). %>');
	text = text.replace(/(\bIt is recommended\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Specify the party that recommends (Pivotal, Cloud Foundry, etc). %>');
	text = text.replace(/(\bit'll\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bit's\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bIt's\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bjar\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "JAR" is preferred. %>');
	text = text.replace(/(\bjavascript\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "JavaScript" is preferred. %>');
	text = text.replace(/(\bJavascript\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "JavaScript" is preferred. %>');
	text = text.replace(/(\bJumpbox\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "jumpbox" is preferred. %>');
	text = text.replace(/(\bkeep in mind\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Redundant? %>');
	text = text.replace(/(\bKeep in mind\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Redundant? %>');
	text = text.replace(/(\bkeep-alive\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "keepalive" is preferred. %>');
	text = text.replace(/(\bkey pair\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "keypair" is preferred. %>');
	text = text.replace(/(\bkey\/value pair\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "key-value pair" is preferred. %>');
	text = text.replace(/(\bKey\/value pair\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Key-value pair" is preferred. %>');
	text = text.replace(/(\bkey\/value pairs\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "key-value pairs" is preferred. %>');
	text = text.replace(/(\bKey\/value pairs\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Key-value pairs" is preferred. %>');
	text = text.replace(/(\bKubectl\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# First use: "Kubernetes command line tool (kubectl)". Subsequent uses: "kubectl". %>');
	text = text.replace(/(\bkubectl CLI\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# First use: "Kubernetes command line tool (kubectl)". Subsequent uses: "kubectl". %>');
	text = text.replace(/(\bkubectl command line tool\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# First use: "Kubernetes command line tool (kubectl)". Subsequent uses: "kubectl". %>');
	text = text.replace(/(\bkubectl tool\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# First use: "Kubernetes command line tool (kubectl)". Subsequent uses: "kubectl". %>');
	text = text.replace(/(\bkubo\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Container Runtime" is preferred. %>');
	text = text.replace(/(\bKubo\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Container Runtime" is preferred. %>');
	text = text.replace(/(\bKuBo\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Container Runtime" is preferred. %>');
	text = text.replace(/(\blater release\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Never state something is coming in a future release. It could create a legal problem. %>');
	text = text.replace(/(\blet's\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bLet's\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bLightweight Directory Access Protocol\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "LDAP" is preferred. %>');
	text = text.replace(/(\blog into\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "log in to" is preferred. %>');
	text = text.replace(/(\blog on to\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "log in to" is preferred. %>');
	text = text.replace(/(\blog-in\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Use "login" (n) or "log in" (v) %>');
	text = text.replace(/(\bloggregator\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Call it "Loggregator" -- capitalized and without a preceding "the". %>');
	text = text.replace(/(\blogin to\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "log in to" is preferred. %>');
	text = text.replace(/(\bLogin to\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Log in to" is preferred. %>');
	text = text.replace(/(\blower case\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "lowercase" is preferred. %>');
	text = text.replace(/(\bmake sure\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Replace with "ensure" or, better still, rephrase as a command. %>');
	text = text.replace(/(\bMake sure\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Ensure" is preferred. %>');
	text = text.replace(/(\bmarketplace\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Marketplace" is preferred. %>');
	text = text.replace(/(\bMaterial data\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "consumption data" is preferred. %>');
	text = text.replace(/(\bmax\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "maximum" is preferred. %>');
	text = text.replace(/(\bMax\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Maximum" is preferred. %>');
	text = text.replace(/(\bmax\.\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "maximum" is preferred. %>');
	text = text.replace(/(\bMax\.\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Maximum" is preferred. %>');
	text = text.replace(/(\bmay\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "can" usually works better. Use "might" to convey possibility. %>');
	text = text.replace(/(\bmicro-services\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "microservices" is preferred. %>');
	text = text.replace(/(\bmight've\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bmin\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "minimum" is preferred. %>');
	text = text.replace(/(\bMin\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Minimum" is preferred. %>');
	text = text.replace(/(\bmin\.\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "minimum" is preferred. %>');
	text = text.replace(/(\bMin\.\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Minimum" is preferred. %>');
	text = text.replace(/(\bMinIO\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Minio" is preferred. %>');
	text = text.replace(/(\bmodal\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "dialog box" is preferred. %>');
	text = text.replace(/(\bmustn't\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bnameserver\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "name server" is preferred. %>');
	text = text.replace(/(\bneedn't\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bnext release\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Never state something is coming in a future release. It could create a legal problem. %>');
	text = text.replace(/(\bNGINX\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "nginx" is preferred. %>');
	text = text.replace(/(\bNginx\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "nginx" is preferred. %>');
	text = text.replace(/(\bnot recommend\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Pivotal discourages" is preferred for closed source. "Cloud Foundry discourages" for open source. %>');
	text = text.replace(/(\bnot recommended\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Pivotal discourages" is preferred for closed source. "Cloud Foundry discourages" for open source. %>');
	text = text.replace(/(\bnot yet\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# 1st preference: delete. 2nd preference: replace these words with "currently". %>');
	text = text.replace(/(\bnote down\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "record" is preferred. %>');
	text = text.replace(/(\bNote that\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Notes must be in Note boxes and start with "Note: ". %>');
	text = text.replace(/(\bnote that\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Notes must be in Note boxes and start with "Note: ". %>');
	text = text.replace(/(\bNozzle\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Only capitalize "nozzle" when it is part of a title %>');
	text = text.replace(/(\bNSX Edge\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "NSX Edge Services Gateway (ESG)" is preferred. %>');
	text = text.replace(/(\boAuth\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "OAuth" is preferred. %>');
	text = text.replace(/(\bOauth\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "OAuth" is preferred. %>');
	text = text.replace(/(\bon demand broker\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The full product title is "on-demand service broker", the short version is "on-demand broker" and the initialism is "ODB". %>');
	text = text.replace(/(\bOn demand broker\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The full product title is "on-demand service broker", the short version is "on-demand broker" and the initialism is "ODB". %>');
	text = text.replace(/(\bOn Demand Broker\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The full product title is "on-demand service broker", the short version is "on-demand broker" and the initialism is "ODB". %>');
	text = text.replace(/(\bOn Demand broker\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The full product title is "on-demand service broker", the short version is "on-demand broker" and the initialism is "ODB". %>');
	text = text.replace(/(\bon-board\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "onboard" (v) is preferred. %>');
	text = text.replace(/(\bOn-board\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Onboard" (v) is preferred. %>');
	text = text.replace(/(\bOn-demand\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "On-Demand" is preferred -- capitalize the "D" if you capitalized the "O". %>');
	text = text.replace(/(\bOn-Demand Broker\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The full product title is "on-demand service broker", the short version is "on-demand broker" and the initialism is "ODB". %>');
	text = text.replace(/(\bOn-demand Broker\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The full product title is "on-demand service broker", the short version is "on-demand broker" and the initialism is "ODB". %>');
	text = text.replace(/(\bOnce\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Only use "once" when you mean "one time", not when you mean "after". %>');
	text = text.replace(/(\bonce it\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Only use "once" when you mean "one time", not when you mean "after". %>');
	text = text.replace(/(\bonce the\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Only use "once" when you mean "one time", not when you mean "after". %>');
	text = text.replace(/(\bonce they\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Only use "once" when you mean "one time", not when you mean "after". %>');
	text = text.replace(/(\bonce you\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Only use "once" when you mean "one time", not when you mean "after". %>');
	text = text.replace(/(\bonsite\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Needs a space or a hyphen. The on-site interview is the last of the three interviews. The training was held on site. %>');
	text = text.replace(/(\bOps Manager Director\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "BOSH Director" is preferred. %>');
	text = text.replace(/(\boptional[^\)](?![^£]*\<%# ECS %\>))/gm,'$1<%# Our style is (Optional) INSTRUCTION -- as a procedure header or a step. %>');
	text = text.replace(/(\bOptional[^\)](?![^£]*\<%# ECS %\>))/gm,'$1<%# Our style is (Optional) INSTRUCTION -- as a procedure header or a step. %>');
	text = text.replace(/(\boptionally\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Our style is (Optional) INSTRUCTION -- as a procedure header or a step. %>');
	text = text.replace(/(\bOptionally\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Our style is (Optional) INSTRUCTION -- as a procedure header or a step. %>');
	text = text.replace(/(\borgs\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "organizations" is preferred. %>');
	text = text.replace(/(\bOSBAPI compliant\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "OSBAPI-compliant" is preferred. %>');
	text = text.replace(/(\bout of memory error\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "out-of-memory error" is preferred. %>');
	text = text.replace(/(\bOut Of Memory error\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "out-of-memory error" is preferred. %>');
	text = text.replace(/(\bPAAS\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "PaaS" is preferred. %>');
	text = text.replace(/(\bpane\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Just declare the UI element in bold: do not tell the reader where it sits on the screen. %>');
	text = text.replace(/(\bparam\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "parameter" is preferred. %>');
	text = text.replace(/(\bparams\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "parameters" is preferred. %>');
	text = text.replace(/(\bParams\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Parameters" is preferred. %>');
	text = text.replace(/(\bPCF dev\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "PCF Dev" is preferred. %>');
	text = text.replace(/(\bPCF DEV\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "PCF Dev" is preferred. %>');
	text = text.replace(/(\bPCF Solutions\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The brand name is "Platform Ops". %>');
	text = text.replace(/(\bPCFdev\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "PCF Dev" is preferred. %>');
	text = text.replace(/(\bPCFS\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The brand name is "Platform Ops". %>');
	text = text.replace(/(\bPDC\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Use <%= vars.product_abbr %>');
	text = text.replace(/(\bPID file\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Just "PID" is preferred. %>');
	text = text.replace(/(\bpid file\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Just "PID" is preferred. %>');
	text = text.replace(/(\bpidfile\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Just "PID" is preferred. %>');
	text = text.replace(/(\bPIDfile\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Just "PID" is preferred. %>');
	text = text.replace(/(\bPivNet\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Pivotal Network" is preferred. %>');
	text = text.replace(/(\bPivotal Cloud Foundry Dev\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "PCF Dev" is preferred. %>');
	text = text.replace(/(\bPivotal Cloud Foundry Solutions\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The brand name is "Platform Ops". %>');
	text = text.replace(/(\bPivotal Container Service\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Use <%= vars.k8s_runtime_full %>');
	text = text.replace(/(\bPivotal Labs and Services\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The brand name is "Pivotal Labs". %>');
	text = text.replace(/(\bPivotal Labs and Strategic Services\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The brand name is "Pivotal Labs". %>');
	text = text.replace(/(\bPivotal Services\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The brand name is "Pivotal Labs". %>');
	text = text.replace(/(\bPivotal Services Marketplace\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The brand name is "Pivotal Marketplace". %>');
	text = text.replace(/(\bPivotal Software\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Pivotal" is preferred. %>');
	text = text.replace(/(\bPivotal, Inc\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Pivotal" is preferred. %>');
	text = text.replace(/(\bPivotalTracker\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Write "Pivotal Tracker" (first use on page in body text) and then "Tracker" (subsequent uses). %>');
	text = text.replace(/(\bPKS\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Unless this is part of a VMware or Dell Tech brand name, use <%= vars.k8s_runtime_full %>');
	text = text.replace(/(\bplain-text\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Replace the hyphen with a space if referring to unformatted text. Delete the hyphen if referring to non-encrypted text. %>');
	text = text.replace(/(\bplatform control plane\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "CI/CD plane" is preferred. %>');
	text = text.replace(/(\bplease(?! email)\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use unless asking the reader to do you a favor, such as giving feedback. %>');
	text = text.replace(/(\bPlease(?! email)\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use unless asking the reader to do you a favor, such as giving feedback. %>');
	text = text.replace(/(\bplug-in\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "plugin" is preferred, even though Merriam-Webster prefers the hyphen. %>');
	text = text.replace(/(\bpoint in time snapshot\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "point-in-time snapshot" is preferred. %>');
	text = text.replace(/(\bpoint release\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use. v#.## is a "minor release". v#.#.# is a "patch release". %>');
	text = text.replace(/(\bpop-up\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# If referring to a menu that pops up, just write "pop-up" without "menu". If referring to a dialog box, write "dialog box". %>');
	text = text.replace(/(\bpopup\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# If referring to a menu that pops up, just write "pop-up" without "menu". If referring to a dialog box, write "dialog box". %>');
	text = text.replace(/(\bpost deploy script\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "post-deploy script" is preferred. %>');
	text = text.replace(/(\bpostgres\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "PostgreSQL" is preferred. %>');
	text = text.replace(/(\bPP\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use this acronym for the brand name. %>');
	text = text.replace(/(\bpp\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use this acronym for the brand name. %>');
	text = text.replace(/(\bpreprovision\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "pre-provision" is preferred. %>');
	text = text.replace(/(\bPreprovision\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Pre-provision" is preferred. %>');
	text = text.replace(/(\bpreprovisioned\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "pre-provisioned" is preferred. %>');
	text = text.replace(/(\bPreprovisioned\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Pre-provisioned" is preferred. %>');
	text = text.replace(/(\bprerequisite\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Requirements are things needed to install and run the product. We list them on the product index page. Prerequisites are things needed for a given procedure beyond the product requirements. We list those on the procedure page. %>');
	text = text.replace(/(\bprior to\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "before" is preferred. %>');
	text = text.replace(/(\bprocedure[\s\n]*\w*:(?![^£]*\<%# ECS %\>))/gm,'$1<%# To introduce steps just write "To do x:" %>');
	text = text.replace(/(\bprocfile\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Procfile" is preferred. %>');
	text = text.replace(/(\bprod\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "production" is preferred. %>');
	text = text.replace(/(\bProduct Version Matrix\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Product Compatibility Matrix" is preferred. %>');
	text = text.replace(/(\bprompt\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "dialog box" is preferred. %>');
	text = text.replace(/(\bRabbitMQCluster\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "RabbitmqCluster" is preferred. %>');
	text = text.replace(/(\bRabbitMQcluster\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "RabbitmqCluster" is preferred. %>');
	text = text.replace(/(\bRabbitmqcluster\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "RabbitmqCluster" is preferred. %>');
	text = text.replace(/(\bRabbitmqClusters\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The plural form is "`RabbitmqCluster` resources". %>');
	text = text.replace(/(\bre-generate\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "regenerate" is preferred. %>');
	text = text.replace(/(\bRe-generate\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Re-generate" is preferred. %>');
	text = text.replace(/(\bre-stage\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "restage" is preferred. %>');
	text = text.replace(/(\bRe-stage\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Restage" is preferred. %>');
	text = text.replace(/(\bread more on\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "read more about" is preferred. %>');
	text = text.replace(/(\breboot\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "restart" is preferred. %>');
	text = text.replace(/(\brecommend against\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Pivotal discourages" is preferred for closed source. "Cloud Foundry discourages" for open source. %>');
	text = text.replace(/(\brecommends against\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Pivotal discourages" is preferred for closed source. "Cloud Foundry discourages" for open source. %>');
	text = text.replace(/(\brecreate\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "re-create" is preferred. %>');
	text = text.replace(/(\bRecreate\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "re-create" is preferred. %>');
	text = text.replace(/(\brecreated\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "re-created" is preferred. %>');
	text = text.replace(/(\bRecreated\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Re-created" is preferred. %>');
	text = text.replace(/(\brecreates\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "re-creates" is preferred. %>');
	text = text.replace(/(\brecreating\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "re-creating" is preferred %>');
	text = text.replace(/(\bRecreating\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Re-creating" is preferred. %>');
	text = text.replace(/(\brefarch\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The directory name "plan" is preferred over "refarch". %>');
	text = text.replace(/(\brefer to\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# If telling the reader to read something else, use "see". %>');
	text = text.replace(/(\bRefer to\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# If telling the reader to read somewhere else, use "See". %>');
	text = text.replace(/(\brepo\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "repository" is preferred. %>');
	text = text.replace(/(\brequirement\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Requirements are things needed to install and run the product. We list them on the product index page. Prerequisites are things needed for a given procedure beyond the product requirements. We list those on the procedure page. %>');
	text = text.replace(/(\brestoration\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Use "restore" as both a verb and a noun. %>');
	text = text.replace(/(\bresurrector\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Resurrector" is preferred. %>');
	text = text.replace(/(\bRoute Emitter\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "router-emitter component" is preferred. %>');
	text = text.replace(/(\brouter_emitter\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "router-emitter component" is preferred. %>');
	text = text.replace(/(\brun the following command\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Replace with just "run:" %>');
	text = text.replace(/(\bRun the following command\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Replace with just "Run:" %>');
	text = text.replace(/(\brun time\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "runtime" is preferred. %>');
	text = text.replace(/(\bRunner VM\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "host VM" is preferred. %>');
	text = text.replace(/(\bRuntime CredHub\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "runtime CredHub" is preferred. %>');
	text = text.replace(/(\bSecure Shell\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "SSH" is preferred. %>');
	text = text.replace(/(\bSecurity Assertion Markup Language\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Never spell out SAML. %>');
	text = text.replace(/(\bsecurity assertion markup language\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Never spell out SAML. %>');
	text = text.replace(/(\bservice broker API\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Service Broker API" is preferred. %>');
	text = text.replace(/(\bservice instance credentials\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "binding credentials" is preferred. %>');
	text = text.replace(/(\bService Key\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Only capitalize "service key" when it is part of a title %>');
	text = text.replace(/(\bServices Marketplace\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Marketplace" is preferred. %>');
	text = text.replace(/(\bsettings data\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "configuration data" is preferred. %>');
	text = text.replace(/(\bsha\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "SHA" is preferred. %>');
	text = text.replace(/(\bshan't\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bshe'd\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bShe'd\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bshe'll\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bShe'll\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bshe's\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bShe's\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bshould've\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bshouldn't\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bsimple\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Avoid suggesting an instruction is "simple" or "easy". %>');
	text = text.replace(/(\bsimply\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Avoid suggesting an instruction is "simple" or "easy". %>');
	text = text.replace(/(\bsince\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use "since" when you can use "because". %>');
	text = text.replace(/(\bSince\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use "Since" when you can use "Because". %>');
	text = text.replace(/(\bslave\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "follower" is preferred. %>');
	text = text.replace(/(\bsmoketest\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Should be "smoke test" (n.) or "smoke-test" (adj.) %>');
	text = text.replace(/(\bSmoketest\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Should be "smoke tests" (n.) or "smoke-tests" (adj.) %>');
	text = text.replace(/(\bsmoketests\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Should be "smoke tests" (n.) or "smoke-tests" (adj.) %>');
	text = text.replace(/(\bSmoketests\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Should be "smoke tests" (n.) or "smoke-tests" (adj.) %>');
	text = text.replace(/(\bsocks\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "SOCKS" is preferred. Do not spell it out, even on first use. %>');
	text = text.replace(/(\bSocks\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "SOCKS" is preferred. Do not spell it out, even on first use. %>');
	text = text.replace(/(\bsomebody's\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bSomebody's\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bsomeone's\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bSomeone's\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bspec\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "specifications" is preferred. %>');
	text = text.replace(/(\bspecs\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "specifications" is preferred. %>');
	text = text.replace(/(\bSpring \d\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Spring Framework #" is preferred. %>');
	text = text.replace(/(\bSpring Cloud DataFlow\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Spring Cloud Data Flow" is preferred. %>');
	text = text.replace(/(\bSpring framework \d\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Spring Framework #" is preferred. %>');
	text = text.replace(/(\bspringboot\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Spring Boot" is preferred. %>');
	text = text.replace(/(\bSpringBoot\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Spring Boot" is preferred. %>');
	text = text.replace(/(\bstandard error\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "stderr" is preferred. %>');
	text = text.replace(/(\bstandard input\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "stdin" is preferred. %>');
	text = text.replace(/(\bstandard output\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "stdout" is preferred. %>');
	text = text.replace(/(\bstanza\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "section" is preferred. %>');
	text = text.replace(/(\bSTDERR\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "stderr" is preferred. %>');
	text = text.replace(/(\bSTDIN\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "stdin" is preferred. %>');
	text = text.replace(/(\bSTDOUT\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "stdout" is preferred. %>');
	text = text.replace(/(\bstem cell\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "stemcell" is preferred. %>');
	text = text.replace(/(\bstem-cell\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "stemcell" is preferred. %>');
	text = text.replace(/(\bStemCell\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "stemcell" is preferred. %>');
	text = text.replace(/(\bStemcell\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Lowercase is preferred unless "stemcell" starts a sentence or is in a title. %>');
	text = text.replace(/(\bsteps[\s\n]*\w*:(?![^£]*\<%# ECS %\>))/gm,'$1<%# To introduce steps just write "To do x:" %>');
	text = text.replace(/(\bstrongly\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Consider deleting, especially if it precedes "recommend". %>');
	text = text.replace(/(\bsub-directory\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "subdirectory" is preferred. %>');
	text = text.replace(/(\bsub-property\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "subproperty" is preferred. %>');
	text = text.replace(/(\bsuite\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Only use "suite" when describing a bundle of products sold together under a single SKU. %>');
	text = text.replace(/(\bsynch\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "sync" is preferred. %>');
	text = text.replace(/(\bsynchronize\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "sync" is preferred. %>');
	text = text.replace(/(\bSyslog\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Lowercase is preferred unless "syslog" starts a sentence or is in a title. %>');
	text = text.replace(/(\btab\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Just declare the UI element in bold: do not tell the reader where it sits on the screen. %>');
	text = text.replace(/(\btar\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "TAR" is preferred. %>');
	text = text.replace(/(\bTasks\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "tasks" is preferred. %>');
	text = text.replace(/(\bterminal emulator\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "shell" is preferred. %>');
	text = text.replace(/(\btext box\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "field" is preferred. %>');
	text = text.replace(/(\btext field\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Just "field" is preferred %>');
	text = text.replace(/(\btextbox\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "field" is preferred. %>');
	text = text.replace(/(\bthat'll\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bThat'll\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bthat's\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bThat's\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bthe Apps Manager\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Call it just "Apps Manager" -- there is no preceding "the". %>');
	text = text.replace(/(\bthe deploy\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "the deployment" is preferred. %>');
	text = text.replace(/(\bthe install\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "the installation" is preferred. %>');
	text = text.replace(/(\bthe Loggregator\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Call it "Loggregator" -- capitalized and without a preceding "the". %>');
	text = text.replace(/(\bthe machine\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "the local machine" is preferred. %>');
	text = text.replace(/(\bthe Pivotal Network\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Call it just "Pivotal Network" -- there is no preceding "the". %>');
	text = text.replace(/(\bthe toggle\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use "toggle". Do not use "Option button". You may use "radio button"; but, in general, try to avoid referring to the button and instead write "Click BUTTON-TEXT". %>');
	text = text.replace(/(\bthere's\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bThere's\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bthey'd\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bThey'd\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bthey'll\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bThey'll\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bthey're\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bThey're\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bthey've\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bThey've\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bthrice\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "three times" is preferred. %>');
	text = text.replace(/(\bto login\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Use "login" (n) and "log in" (v). %>');
	text = text.replace(/(\bTraffic-controller\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Traffic Controller" is preferred. %>');
	text = text.replace(/(\bTraffic-Controller\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Traffic Controller" is preferred. %>');
	text = text.replace(/(\bTrafficController\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Traffic Controller" is preferred. %>');
	text = text.replace(/(\bTransmission Control Protocol\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "TCP" is preferred. %>');
	text = text.replace(/(\bTransport layer security(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "TLS" after the first use. %>');
	text = text.replace(/(\bTransport Layer Security(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "TLS" after the first use. %>');
	text = text.replace(/(\btransport layer security(?!\s\()(?![^£]*\<%# ECS %\>))/gm,'$1<%# Shorten to "TLS" after the first use. %>');
	text = text.replace(/(\btriple-parens expression\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "triple-parentheses expression" is preferred. %>');
	text = text.replace(/(\btwo times\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "twice" is preferred. %>');
	text = text.replace(/(\btype the following\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "To X, run:" and "X by running:" are preferred. %>');
	text = text.replace(/(\btype:(?![^£]*\<%# ECS %\>))/gm,'$1<%# "run:" is preferred. %>');
	text = text.replace(/(\bun-register\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# deregister %>');
	text = text.replace(/(\buncheck\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Disable the LABEL-NAME checkbox" is preferred. Likewise for "Enable the LABEL-NAME checkbox". %>');
	text = text.replace(/(\bUnderstanding\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# If a procedural topic title, go with "How to...". If a conceptual title, go with "About..." or "Overview of..." or nothing at all. %>');
	text = text.replace(/(\bUniform Resource Locator\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "URL" is preferred. %>');
	text = text.replace(/(\bunix\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Unix" is preferred. %>');
	text = text.replace(/(\bUNIX\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Unix" is preferred. %>');
	text = text.replace(/(\bunregister\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "deregister" is preferred. %>');
	text = text.replace(/(\bunsecure\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "not secure" is preferred. %>');
	text = text.replace(/(\bUnsecure\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Not secure" is preferred. %>');
	text = text.replace(/(\buntick\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Disable the LABEL-NAME checkbox" is preferred. Likewise for "Enable the LABEL-NAME checkbox". %>');
	text = text.replace(/(\bupgradeable\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "upgradable" is preferred. %>');
	text = text.replace(/(\bupper case\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "uppercase" is preferred. %>');
	text = text.replace(/(\bupscale\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "scale up" is preferred. %>');
	text = text.replace(/(\bUrl\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "URL" is preferred. %>');
	text = text.replace(/(\bURl\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "URL" is preferred. %>');
	text = text.replace(/(\burl\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "URL" is preferred. %>');
	text = text.replace(/(\busage data\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "consumption data" is preferred. %>');
	text = text.replace(/(\busage service\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Usage service" is preferred. %>');
	text = text.replace(/(\bUsage Service\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Usage service" is preferred. %>');
	text = text.replace(/(\buse the command\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "run" is preferred. %>');
	text = text.replace(/(\buser interface\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "UI" is preferred. %>');
	text = text.replace(/(\buser name\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "username" is preferred. %>');
	text = text.replace(/(\busername\/password pair\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "username-password pair" is preferred. %>');
	text = text.replace(/(\bUsername\/password pair\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Username-password pair" is preferred. %>');
	text = text.replace(/(\busername\/password pairs\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "username-password pairs" is preferred. %>');
	text = text.replace(/(\bUsername\/password pairs\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Username-password pairs" is preferred. %>');
	text = text.replace(/(\busing the command\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "running" is preferred. %>');
	text = text.replace(/(\butilizing\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "through" is preferred. %>');
	text = text.replace(/(\bvalidate that\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "check that" would be plainer English. %>');
	text = text.replace(/(\bVerify if\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Verify that" is better. %>');
	text = text.replace(/(\bverify if\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "verify that" is better. %>');
	text = text.replace(/(\bvhost\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "virtual host" is preferred. %>');
	text = text.replace(/(\bVhost\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "virtual host" is preferred. %>');
	text = text.replace(/(\bvia\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "through", "using" and "by means of" are preferred. %>');
	text = text.replace(/(\bvim\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The text editor is called "Vim". %>');
	text = text.replace(/(\bVIM\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The text editor is called "Vim". %>');
	text = text.replace(/(\bvirtual machine\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "VM" is preferred. %>');
	text = text.replace(/(\bVirtual Machine Metrics\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "BOSH health metrics" is preferred. %>');
	text = text.replace(/(\bVMWare\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "VMware" is preferred. %>');
	text = text.replace(/(\bWARNING\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "Warning" is preferred. %>');
	text = text.replace(/(\bwarning box\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "dialog box" is preferred. %>');
	text = text.replace(/(\bWarning box\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "dialog box" is preferred. %>');
	text = text.replace(/(\bWarning window\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "dialog box" is preferred. %>');
	text = text.replace(/(\bwarning window\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "dialog box" is preferred. %>');
	text = text.replace(/(\bwasn't\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bwe'd\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Specify the party (Pivotal, Cloud Foundry, etc) and do not use contractions. %>');
	text = text.replace(/(\bWe'd\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Specify the party (Pivotal, Cloud Foundry, etc) and do not use contractions. %>');
	text = text.replace(/(\bwe'll\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Specify the party (Pivotal, Cloud Foundry, etc) and do not use contractions. %>');
	text = text.replace(/(\bWe'll\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Specify the party (Pivotal, Cloud Foundry, etc) and do not use contractions. %>');
	text = text.replace(/(\bwe're\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Specify the party (Pivotal, Cloud Foundry, etc) and do not use contractions. %>');
	text = text.replace(/(\bWe're\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Specify the party (Pivotal, Cloud Foundry, etc) and do not use contractions. %>');
	text = text.replace(/(\bwe've\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Specify the party (Pivotal, Cloud Foundry, etc) and do not use contractions. %>');
	text = text.replace(/(\bWe've\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Specify the party (Pivotal, Cloud Foundry, etc) and do not use contractions. %>');
	text = text.replace(/(\bwe\s\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Specify the party (Pivotal, Cloud Foundry, etc). %>');
	text = text.replace(/(\bWe\s\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Specify the party (Pivotal, Cloud Foundry, etc). %>');
	text = text.replace(/(\bweb site\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "website" is preferred. %>');
	text = text.replace(/(\bwebdav\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "WebDAV" is preferred. %>');
	text = text.replace(/(\bWebDav\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "WebDAV" is preferred. %>');
	text = text.replace(/(\bWebSockets\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Should not be plural as it refers to the WebSocket protocol.  %>');
	text = text.replace(/(\bweren't\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bwhat's\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bWhat's\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bWhere [A-Z\-\_]+ is\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Place ` around the placeholder. %>');
	text = text.replace(/(\bwho'll\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bwho's\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bwill\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Avoid "will": present tense is preferred. %>');
	text = text.replace(/(\bwish\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "want" is preferred. %>');
	text = text.replace(/(\bwon't\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bwould\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Re-phrase for present tense if possible. %>');
	text = text.replace(/(\bwouldn't\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bwrite down\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "record" is preferred. %>');
	text = text.replace(/(\by'all\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bY'all\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bYaml\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "YAML" is preferred. %>');
	text = text.replace(/(\byaml\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "YAML" is preferred. %>');
	text = text.replace(/(\bYML file\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "YAML file" is preferred. %>');
	text = text.replace(/(\byou can run\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Maybe replace with just "run". %>');
	text = text.replace(/(\byou might want\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# If possible, replace with "Pivotal recommends" (or "Cloud Foundry recommends" if open source) or re-phrase as a mandate. %>');
	text = text.replace(/(\byou'd\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bYou'd\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\byou'll\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bYou'll\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\byou're\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bYou're\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\byou've\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\bYou've\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# Do not use contractions. %>');
	text = text.replace(/(\byour machine\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# "your local machine" is preferred. %>');
	text = text.replace(/(\byoutube\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The brand name is "YouTube". %>');
	text = text.replace(/(\bYoutube\b(?![^£]*\<%# ECS %\>))/gm,'$1<%# The brand name is "YouTube". %>');
	text = text.replace(/( \<%# £SCS %\>)/gm,'');
	text = text.replace(/( \<%# ECS %\>)/gm,'');
	text = text.replace(/(\<%#[^\%]*%\>(?=[^%]*%>))/gm,'');
	text = text.replace(/(\<%#[^\%]*%\>(?=[^%]*%>))/gm,'');
	text = text.replace(/(\<%#[^\%]*%\>(?=[^%]*%>))/gm,'');

	// End of commands


		return text;

	};
