{"format": "3.0",
    "replacements": {
        // Last updated: October 25, 2021

// Substitute 2 spaces for each tab that does not precede a variable.

"6": {"find": "\\t(?!<%= vars)", "replace": "  "},

// Search for errors everywhere

"10": {"find": "(-SERVICE-INSTANCE-NAME\\b)", "replace": "\\1<!-- |SERVICE-INSTANCE-NAME| is preferred. -->"},
"11": {"find": "(:alt =\\> .[^\\{\\)]*\\<%= vars\\.[^\\)]*\\) %\\>)", "replace": "\\1<!-- Use #{} to escape ERB variables within ERB image tags, as in #{vars.product_short}. -->"},
"12": {"find": "(!\\[.{0,44}\\]\\([^\\.]*\\.png\\))", "replace": "\\1<!-- Alt text must describe the image in detail. -->"},
"13": {"find": "([\\*\\+\\-]\\s`[A-Za-z]*_)", "replace": "\\1<!-- Use dashes for spacing in placeholders, not underscores. -->"},
"14": {"find": "([\\s\\n]+\\*\\*[^*]{96})", "replace": "\\1<!-- Consider reducing this run-in heading to fewer than 100 characters. -->"},
"15": {"find": "([^-]CLIENT-SECRET\\b)", "replace": "\\1<!-- Specify the server, as in |BOSH-CLIENT-SECRET| or |CREDHUB-CLIENT-SECRET|. -->"},
"16": {"find": "([^`\\n]{100,}[^`]*```(?=\\n\\n))", "replace": "\\1 <!-- Consider using // to break up every 100-character line in this snippet. -->"},
"17": {"find": "(\\.\\/[a-z-]*#[a-z-]*\\.html)", "replace": "\\1<!-- Broken link -- the correct syntax is |page-name.html#anchor-name|. -->"},
"18": {"find": "(\\(https:..discuss.pivotal.io.*\\).*$)", "replace": "\\1<!-- Discuss Pivotal is a deprecated URL. Contact Knowledge Base staff for its replacement. -->"},
"19": {"find": "(\\(https:..github.com.*\\)(?!.*\\n?.*GitHub).*$)", "replace": "\\1<!-- Type |in GitHub| somewhere in the cross-reference sentence. -->"},
"20": {"find": "(\\(https:..pvtl.force.com.*\\).*$)", "replace": "\\1<!-- Pivotal Force is a deprecated URL. Contact Knowledge Base staff for its replacement. -->"},
"21": {"find": "(\\[(?!.*\\n?.*BOSH documentation).*\\]\\(https:..bosh.io.*\\))", "replace": "\\1<!-- The link name must be |BOSH documentation|. -->"},
"22": {"find": "(\\[(?!.*\\n?.*cert-manager documentation).*\\]\\(https:..cert-manager.io.docs.*\\))", "replace": "\\1<!-- The link name must be |cert-manager documentation|. -->"},
"23": {"find": "(\\[(?!.*\\n?.*Cloud Foundry documentation).*\\]\\(https:..docs.cloudfoundry.org.*\\))", "replace": "\\1<!-- The link name must be |Cloud Foundry documentation|. -->"},
"24": {"find": "(\\[(?!.*\\n?.*Concourse documentation).*\\]\\(https:..concourse-ci.org.*\\))", "replace": "\\1<!-- The link name must be |Concourse documentation|. -->"},
"25": {"find": "(\\[(?!.*\\n?.*Docker documentation).*\\]\\(https:..docs.docker.com.*\\))", "replace": "\\1<!-- The link name must be |Docker documentation|. -->"},
"26": {"find": "(\\[(?!.*\\n?.*GCP documentation).*\\]\\(https:..cloud.google.com.*\\))", "replace": "\\1<!-- The link name must be |GCP documentation|. -->"},
"27": {"find": "(\\[(?!.*\\n?.*Istio documentation).*\\]\\(https:..istio.io.latest.docs.*\\))", "replace": "\\1<!-- The link name must be |Istio documentation|. -->"},
"28": {"find": "(\\[(?!.*\\n?.*Kubernetes documentation).*\\]\\(https:..kubernetes.io.docs.*\\))", "replace": "\\1<!-- The link name must be |Kubernetes documentation|. -->"},
"29": {"find": "(\\[(?!.*\\n?.*Microsoft documentation).*\\]\\(https:..docs.microsoft.com.*\\))", "replace": "\\1<!-- The link name must be |Microsoft documentation|. -->"},
"30": {"find": "(\\[(?!.*\\n?.*Percona documentation).*\\]\\(https:..www.percona.com.doc.*\\))", "replace": "\\1<!-- The link name must be |Percona documentation|. -->"},
"31": {"find": "(\\[(?!.*\\n?.*RabbitMQ documentation).*\\]\\(https:..www.rabbitmq.com.*\\))", "replace": "\\1<!-- The link name must be |RabbitMQ documentation|. -->"},
"32": {"find": "(\\[(?!.*\\n?.*Terraform documentation).*\\]\\(https:..www.terraform.io.docs.*\\))", "replace": "\\1<!-- The link name must be |Terraform documentation|. -->"},
"33": {"find": "(\\[(?!.*\\n?.*VMware Tanzu Support knowledge base).*\\]\\(https:..community.pivotal.io.*\\))", "replace": "\\1<!-- The link name must be |VMware Tanzu Support documentation|. -->"},
"34": {"find": "(\\[[a-z]+\\s[^\\]]*\\]\\([^\\)]*\\))", "replace": "\\1<!-- The link name should likely be title case. See https://docs-wiki.cfapps.io/wiki/style/cross-ref-style.html. -->"},
"35": {"find": "(\\].(?=\\((http|#)))", "replace": "\\1<!-- Broken link -->"},
"36": {"find": "(\\<%= image_tag(?![^\\)]*:alt)[^%]*%\\>)", "replace": "\\1<!-- Images require alt text. -->"},
"37": {"find": "(\\<%= image_tag[^\\)]*:alt => \\W.{0,44}\\W\\) %\\>)", "replace": "\\1<!-- Alt text must describe the image in detail. -->"},
"38": {"find": "(\\<%= var.[\\w]* %\\>)", "replace": "\\1<!-- ERB variables start with |vars.|, not |var|. -->"},
"39": {"find": "(\\<%= vars.platform_name %\\> v2.0 and later\\b)", "replace": "\\1<!-- |<%= vars.platform_name %> (formerly <%= vars.platform_old %>)| is preferred. -->"},
"40": {"find": "(\\<%= vars.platform_old %\\> v2.0 and later\\b)", "replace": "\\1<!-- |<%= vars.platform_name %> (formerly <%= vars.platform_old %>)| is preferred. -->"},
"41": {"find": "(\\<%= vars.runtime_abbr %\\>)", "replace": "\\1<!-- Use <%= vars.app_runtime_abbr -->"},
"42": {"find": "(\\<code\\>kubectl\\<\\/code\\>)", "replace": "\\1<!-- Do not format |kubectl| as code. -->"},
"43": {"find": "(\\<h1\\>)", "replace": "\\1<!-- H1 headers are not allowed within topics. -->"},
"44": {"find": "(\\<img src=.[^\\.]*\\.png. alt=\\W.{0,44}\\W\\>)", "replace": "\\1<!-- Alt text must describe the image in detail. -->"},
"45": {"find": "(\\<img src=(?!(.|\\n)*alt=.).*$)", "replace": "\\1<!-- Images require alt text. -->"},
"46": {"find": "(\\<strong\\>Important\\b)", "replace": "\\1<!-- The only boxes we use are Note and Warning. -->"},
"47": {"find": "(\\<td\\>\\<\\/td\\>)", "replace": "\\1<!-- Insert |<em>n/a</em>| within purposefully empty cells. -->"},
"48": {"find": "(\\<td\\>\\s*n\\/a)", "replace": "\\1<!-- Insert |<em>n/a</em>| within purposefully empty cells. -->"},
"49": {"find": "(\\|(?!(\\n))\\s*\\|)", "replace": "\\1<!-- Insert |_n/a_| within purposefully empty cells. -->"},
"50": {"find": "(\\|(?!(\\n))\\s*n\\/a)", "replace": "\\1<!-- Insert |_n/a_| within purposefully empty cells. -->"},
"51": {"find": "(\\bAmazon[\\s\\n]+documentation\\])", "replace": "\\1<!-- The xref link name must be |AWS documentation|. -->"},
"52": {"find": "(\\bAPP(?!-NAME))", "replace": "\\1<!-- |APP-NAME| is preferred. -->"},
"53": {"find": "(\\bPRIVATE-KEY-FILE\\b)", "replace": "\\1<!-- |PATH-TO-PRIVATE-KEY| is preferred. -->"},
"54": {"find": "(\\brun:[\\s\\n]*\\<code\\>[\\s\\n\\~]*\\$)", "replace": "\\1<!-- We only include dollar signs in terminal snippet examples. -->"},
"55": {"find": "(\\brun:[\\s\\n]*`+[\\s\\n\\~]*\\$)", "replace": "\\1<!-- We only include dollar signs in terminal snippet examples. -->"},
"56": {"find": "(\\brun[^:]*:[\\s\\n]*\\<pre class)", "replace": "\\1<!-- Commands are formatted in triple backtick blocks, not terminal snippets. -->"},
"57": {"find": "(\\brunning[^:]*:[\\s\\n]*\\<code\\>[\\s\\n\\~]*\\$)", "replace": "\\1<!-- We only include dollar signs in terminal snippet examples. -->"},
"58": {"find": "(\\brunning[^:]*:[\\s\\n]*`+[\\s\\n\\~]*\\$)", "replace": "\\1<!-- We only include dollar signs in terminal snippet examples. -->"},
"59": {"find": "(\\bSERVICE-INSTANCE[\\s\\n]+)", "replace": "\\1<!-- |SERVICE-INSTANCE-NAME| is preferred. -->"},
"60": {"find": "(\\bYOUR-PRIVATE-KEY\\b)", "replace": "\\1<!-- |PATH-TO-PRIVATE-KEY| is preferred. -->"},
"61": {"find": "(\\bYOUR-VM\\b)", "replace": "\\1<!-- Specify the VM, as in |OPS-MANAGER-VM| or |STEMCELL-BASE-VM|. -->"},
"62": {"find": "(\\n```[^`]*[A-Z][A-Z]+[^`]*```(?![\\s\\n]*Where))", "replace": "\\1 <!-- Define any non-obvious placeholders present in the code snippet in the style of |Where PLACEHOLDER is...| -->"},
"63": {"find": "(\\sCVE-\\d{4}(?!.*\\n?([^\\[]*\\]|[^\\>]*\\<\\/a\\>)).*$)", "replace": "\\1<!-- Link to the CVE page at tanzu.vmware.com/security or cve.mitre.org. -->"},
"64": {"find": "(##+[^\\n]*\\>\\s*[A-Z][a-z-]+ing\\b.*\\n\\n(.+\\n){1,}\\n+\\d\\.)", "replace": "\\1<!-- Procedure headers use imperatives, not gerunds. -->"},
"65": {"find": "(##+\\s*\\d\\.)", "replace": "\\1<!-- Do not format a numbered step as a header. -->"},
"66": {"find": "(`.*[_\\A-Z].*`[\\s\\n]+errand\\b)", "replace": "\\1<!-- Errands tend to be lowercase and they use dashes instead of underscores or spaces. -->"},
"67": {"find": "(`.*[_\\A-Z].*`[\\s\\n]+errands\\b)", "replace": "\\1<!-- Errands tend to be lowercase and they use dashes instead of underscores or spaces. -->"},
"68": {"find": "(```[^<]*(<strong>|<em>|<h\\d>|<html>|<body>)(?![^<]*<\\/pre>))", "replace": "\\1 <!-- Use unicode for HTML tags to ensure the tags show up in the snippet. |&lt;| for |<| and |&gt;| for |>|. -->"},
"69": {"find": "(```\\n(?!\\n)\\s*(?!\\s|Where|\\d\\.))", "replace": "\\1 <!-- The opening code fence needs the language or |```console|. The closing code fence should usually be followed by a newline. Run Style Checker again after fixing all errors of this type; it might find more problems. -->"},
"70": {"find": "(`kubectl`)", "replace": "\\1<!-- Do not format |kubectl| as code. -->"},
"71": {"find": "(^[\\s]*(?!\\<li\\>)[^\\<]*\\<a href=.#[^\\>]*.>(?![^\\.]*\\n?[^\\.]*(above|below|earlier|previously|before|later)).*$)", "replace": "\\1<!-- After giving the anchor, state whether it is |above| or |below|. -->"},
"72": {"find": "(^[^\\n#]+#{2,6})", "replace": "\\1<!-- Delete any whitespace or other characters before this header. -->"},
"73": {"find": "(^\\[[^\\]]*\\]\\(#[^\\)]*\\)(?![^\\.]*\\n?[^\\.]*(above|below|earlier|previously|before|later)).*$)", "replace": "\\1<!-- After giving the anchor, state whether it is |above| or |below|. -->"},
"74": {"find": "(<[A-Z]+_[A-Z_]+>)", "replace": "\\1<!-- Use dashes in placeholders, not underscores. -->"},
"75": {"find": "(docs-pcf-staging.cfapps.io.*$)", "replace": "\\1<!-- Do not link to staging versions of the docs. -->"},
"76": {"find": "(html#[a-z-]*\\)[\\s\\n]+above\\b)", "replace": "\\1<!-- Delete |above|: the reference is in another topic. -->"},
"77": {"find": "(html#[a-z-]*\\)[\\s\\n]+below\\b)", "replace": "\\1<!-- Delete |below|: the reference is in another topic. -->"},
"78": {"find": "(PATH-TO-MANIFEST[^\\.])", "replace": "\\1<!-- Include the file extension, as in |PATH-TO-MANIFEST.yml|. -->"},
"79": {"find": "(PATH-TO-VARIABLES[^\\.])", "replace": "\\1<!-- Include the file extension, as in |PATH-TO-VARIABLES.yml|. -->"},
"80": {"find": "(Where `[A-Za-z]*_)", "replace": "\\1<!-- Use dashes for spacing in placeholders, not underscores.  -->"},

// Search for errors outside code fences

"84": {"find": "(---\\n\\n[^#\\n]*(?=(#[^#]|###))(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The first header must be ## -- no smaller, no larger. -->"},
"85": {"find": "(,(?=[\\s\\n]+then[^\\.]*\\.\\n)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Consider deleting |then| or writing |and| after the comma. -->"},
"86": {"find": "(:\\n[\\*\\+\\-]\\s(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Insert an empty newline before a bullet list. -->"},
"87": {"find": "((fix|fixes|issue|issues|this[\\s\\n]+release):\\n\\n\\*\\s[^\\*](?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- In release notes, each feature, KI, and resolved issue needs a run-in heading. -->"},
"88": {"find": "([\\[\\>\\s\\n][a-z0-9\\-\\._]+\\/[a-z0-9\\-\\._]+(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- If this is a URL then you likely need to present it per xref rules: https://docs-wiki.cfapps.io/wiki/style/cross-ref-style.html -->"},
"89": {"find": "([\\s\\.]\\d+\\-\\d+(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Use &ndash; for a range, not a regular dash. -->"},
"90": {"find": "([\\s\\n]+(?!\\ba\\b|\\bany\\b|\\bthat\\b|\\bthe\\b|\\bthis\\b)[a-z-]*[\\s\\n]+shutdown\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The noun is |shutdown|. The action is |shut down|. -->"},
"91": {"find": "([\\s\\n]+\\.html\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |HTML| is preferred. -->"},
"92": {"find": "([\\s\\n]+\\.zip\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |ZIP| is preferred. -->"},
"93": {"find": "([\\s\\n]+\\/[^\\s\\/\\*](?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Consider enclosing in code tags. -->"},
"94": {"find": "([\\s\\n]+\\d{1,2}.\\d{1,2}\\.\\d{1,2}(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Version numbers are written as |v1.11.11| unless brand styling dictates otherwise. -->"},
"95": {"find": "([\\s\\n]+e\\.g:[\\s\\n]+(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |For example| is preferred. -->"},
"96": {"find": "([\\s\\n]+e\\.g[\\s\\n]+(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |For example| is preferred. -->"},
"97": {"find": "([\\s\\n]+e\\.g\\.,[\\s\\n]+(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |For example| is preferred. -->"},
"98": {"find": "([\\s\\n]+e\\.g\\.:[\\s\\n]+(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |For example| is preferred. -->"},
"99": {"find": "([\\s\\n]+e\\.g\\.[\\s\\n]+(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |For example| is preferred. -->"},
"100": {"find": "([\\s\\n]+eg\\.:[\\s\\n]+(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |For example| is preferred. -->"},
"101": {"find": "([\\s\\n]+eg\\.[\\s\\n]+(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |For example| is preferred. -->"},
"102": {"find": "([\\s\\n]+http:..www(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Proper xref formatting is preferred over giving a raw link. -->"},
"103": {"find": "([\\s\\n]+https:..www(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Proper xref formatting is preferred over giving a raw link. -->"},
"104": {"find": "([\\w][\\s\\n]+On-demand(?!(\\n|\\s)(Broker|broker))(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |On-Demand| is preferred -- capitalize the |D| if you capitalized the |O|. -->"},
"105": {"find": "([^:]\\n\\n\\s*\\d\\.\\sRun:(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Write what this command does. As in |Do x by running:| or |To do x, run:|. -->"},
"106": {"find": "([^\\.\\*\\+:-]*,[^\\.\\*\\+:-]*,[^\\.\\*\\+:-]*,[^\\.\\*\\+:-]*,[^\\.\\*\\+:-]*,(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- If a list, maybe reformat it as bullets. If this is a rambling sentence, break it up into smaller sentences. -->"},
"107": {"find": "([^\\.\\n]\\s\\bChart\\b(?=[\\s\\n]+[\\.a-z]+[\\s\\n]+[\\.a-z]+)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |chart| is preferred unless part of a pronoun. -->"},
"108": {"find": "([^\\.`]yaml\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |YAML| is preferred. -->"},
"109": {"find": "([^\\s\\n]\\<\\/em\\>(?![\\s\\n\\<\\.:,-])(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- A space is likely missing here. -->"},
"110": {"find": "([^\\s\\n]\\<\\/strong\\>(?![\\s\\n\\<\\.:,-])(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- A space is likely missing here. -->"},
"111": {"find": "([^\\s\\n\\>]\\<em\\>(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- A space is likely missing here. -->"},
"112": {"find": "([^\\s\\n\\>]\\<strong\\>(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- A space is likely missing here. -->"},
"113": {"find": "([^A-Za-z0-9\\s][^A-Za-z0-9\\s][^A-Za-z0-9\\s][\\s\\n]+character\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Write the word for the special character so that screen readers can read it. -->"},
"114": {"find": "([^A-Za-z0-9\\s][^A-Za-z0-9\\s][^A-Za-z0-9\\s][\\s\\n]+characters\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Write the word for the special character so that screen readers can read it. -->"},
"115": {"find": "([^bo][\\s\\n]+button\\b(?![^\\[\\(]*[\\]\\)])(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Delete |button| if redundant. For example, write |click Save| instead of |Click the Save button|. -->"},
"116": {"find": "([^f][\\s\\n]+the[\\s\\n]+following:(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- To introduce steps just write |To do x:| -->"},
"117": {"find": "([^r][\\s\\n]+image[\\s\\n]+registry\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- If generic, |container image registry| on first use. If VMware-provided, |Tanzu Network Registry| on first use. In both cases, |registry| thereafter except where risking ambiguity. -->"},
"118": {"find": "([^s][\\s\\n]+marketplace\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Marketplace| is preferred. -->"},
"119": {"find": "([^u][^b][\\s\\n]+Maestro\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not shorten |CredHub Maestro| to just |Maestro| -->"},
"120": {"find": "([A-Z][A-Z]+'s\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- To make an abbreviation a plural, just add a lowercase |s| without an apostrophe. -->"},
"121": {"find": "([a-z]*[\\s\\n]+or[\\s\\n]+[a-z]*[\\s\\n]+not\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Redundant? -->"},
"122": {"find": "([A-Z]+[a-z]+[\\s\\n]+style(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Check if |style| needs a hyphen. -->"},
"123": {"find": "([a-z`\\*]+,[\\s\\n]+[a-z`\\*]+[\\s\\n]+and[\\s\\n]+[a-z`\\*]+(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Insert the Oxford comma if it is missing here. -->"},
"124": {"find": "([a-z`\\*]+,[\\s\\n]+[a-z`\\*]+[\\s\\n]+or[\\s\\n]+[a-z`\\*]+(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Insert the Oxford comma if it is missing here. -->"},
"125": {"find": "([A-Za-z][a-z]+teen\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Use numerals for numbers greater than nine. -->"},
"126": {"find": "(\\(Go\\)[\\s\\n]+Router\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Gorouter| is preferred. -->"},
"127": {"find": "(\\(s\\)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not combine a singular and a plural. Maybe write |one or more| instead. -->"},
"128": {"find": "(\\)[\\s\\n]doc\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Wrong xref style. See https://docs-wiki.sc2-04-pcf1-apps.oc.vmware.com/wiki/style/cross-ref-style.html. -->"},
"129": {"find": "(\\)[\\s\\n]page\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Wrong xref style. See https://docs-wiki.sc2-04-pcf1-apps.oc.vmware.com/wiki/style/cross-ref-style.html. -->"},
"130": {"find": "(\\)[\\s\\n]topic\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Wrong xref style. See https://docs-wiki.sc2-04-pcf1-apps.oc.vmware.com/wiki/style/cross-ref-style.html. -->"},
"131": {"find": "(\\|[\\s\\n]*\\*(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Put the asterisk in superscript tags. -->"},
"132": {"find": "(\\b(a|an|any|that|the|these|this|those)[\\s\\n]+[\\w]{4,}[\\s\\n]+backed\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- If this is a compound modifier then it is missing a hyphen. -->"},
"133": {"find": "(\\b[^-]check[\\s\\n]+(?!mark)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |verify|, |ensure|, and |confirm| are all preferred. -->"},
"134": {"find": "(\\b[A-Z][a-z-]+[\\s\\n]+native\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- If this is a compound adjective then it is missing a hyphen. -->"},
"135": {"find": "(\\b[a-z]\\.\\s[A-Z](?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Write all ordered steps as numbers. -->"},
"136": {"find": "(\\b[a-z]n[\\s\\n]+step[\\s\\n]+\\d(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |earlier| or |later| is preferred instead of referring to the step number: numbers can change with edits. -->"},
"137": {"find": "(\\b[A-Z]n[\\s\\n]+step[\\s\\n]+\\d(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |earlier| or |later| is preferred instead of referring to the step number: numbers can change with edits. -->"},
"138": {"find": "(\\ba[\\s\\n]+deploy\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |a deployment| is preferred. -->"},
"139": {"find": "(\\bA[\\s\\n]+deploy\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |A deployment| is preferred. -->"},
"140": {"find": "(\\ba[\\s\\n]+given\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Redundant? -->"},
"141": {"find": "(\\ba[\\s\\n]+HA[\\s\\n]+cluster\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |an HA cluster| is preferred. -->"},
"142": {"find": "(\\bA[\\s\\n]+HA[\\s\\n]+cluster\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |An HA cluster| is preferred. -->"},
"143": {"find": "(\\ba[\\s\\n]+RSU\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |an RSU| is preferred. -->"},
"144": {"find": "(\\bA[\\s\\n]+RSU\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |an RSU| is preferred. -->"},
"145": {"find": "(\\ba[\\s\\n]+single[\\s\\n]+time\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Once? -->"},
"146": {"find": "(\\ba[\\s\\n]+SQL\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |an SQL| is preferred. -->"},
"147": {"find": "(\\babort\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Where practical, |stop| is preferred. Other alternatives: |cancel|, |halt prematurely|, |end prematurely|, |stop prematurely|. -->"},
"148": {"find": "(\\bAbort\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Where practical, |Stop| is preferred. Other alternatives: |Cancel|, |Halt prematurely|, |End prematurely|, |Stop prematurely|. -->"},
"149": {"find": "(\\bactively\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Redundant? -->"},
"150": {"find": "(\\baddon\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |add-on| is preferred. -->"},
"151": {"find": "(\\bADFS\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Write |AD FS| per the Microsoft preference. -->"},
"152": {"find": "(\\badministrate\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |administer| is preferred or, ideally, a plainer synonym such as |manage|. -->"},
"153": {"find": "(\\bAdministrate\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Administer| is preferred or, ideally, a plainer synonym such as |Manage|. -->"},
"154": {"find": "(\\badministrated\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |administered| is preferred or, ideally, a plainer synonym such as |managed|. -->"},
"155": {"find": "(\\badministrates\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |administers| is preferred or, ideally, a plainer synonym such as |manages|. -->"},
"156": {"find": "(\\badministrating\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |administering| is preferred or, ideally, a plainer synonym such as |managing|. -->"},
"157": {"find": "(\\bAdministrating\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Administering| is preferred or, ideally, a plainer synonym such as |Managing|. -->"},
"158": {"find": "(\\badministrator\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |admin| is preferred. -->"},
"159": {"find": "(\\bAdministrator\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Admin| is preferred. -->"},
"160": {"find": "(\\bAdministrators\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Admins| is preferred. -->"},
"161": {"find": "(\\badministrators\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |admins| is preferred. -->"},
"162": {"find": "(\\baffect\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Consider using a more precise verb. -->"},
"163": {"find": "(\\bafter[\\s\\n]+you[\\s\\n]+are[\\s\\n]+satisfied\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Redundant? -->"},
"164": {"find": "(\\bAfter[\\s\\n]+you[\\s\\n]+are[\\s\\n]+satisfied\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Redundant? -->"},
"165": {"find": "(\\bAI\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |application instance| is preferred. -->"},
"166": {"find": "(\\bair-gap\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The noun is |air gap|. -->"},
"167": {"find": "(\\bair[\\s\\n]+gapped\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |air-gapped| is preferred. -->"},
"168": {"find": "(\\bAir[\\s\\n]+gapped\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Air-gapped| is preferred. -->"},
"169": {"find": "(\\bairgap\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |air-gap| is preferred. -->"},
"170": {"find": "(\\bAirgap\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Air-gap| is preferred. -->"},
"171": {"find": "(\\bairgapped\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |air-gapped| is preferred. -->"},
"172": {"find": "(\\bAirgapped\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Air-gapped| is preferred. -->"},
"173": {"find": "(\\balert[\\s\\n]+box\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |dialog box| is preferred. -->"},
"174": {"find": "(\\bAlert[\\s\\n]+box\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |dialog box| is preferred. -->"},
"175": {"find": "(\\bAlert[\\s\\n]+window\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |dialog box| is preferred. -->"},
"176": {"find": "(\\balert[\\s\\n]+window\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |dialog box| is preferred. -->"},
"177": {"find": "(\\ball[\\s\\n]+the[\\s\\n]+necessary\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |all| might be redundant -->"},
"178": {"find": "(\\bAll[\\s\\n]+the[\\s\\n]+necessary\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |All| might be redundant -->"},
"179": {"find": "(\\ballow[\\s\\n]+list\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |allowlist| is preferred. No space. -->"},
"180": {"find": "(\\balpha-numeric\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |alphanumeric| is preferred. -->"},
"181": {"find": "(\\balso[\\s\\n]+possible[\\s\\n]+to\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Active voice |you can also| might be better. -->"},
"182": {"find": "(\\bAmazon[\\s\\n]+Web[\\s\\n]+Service\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Amazon Web Services| on first use and |AWS| thereafter. -->"},
"183": {"find": "(\\bAmazon[\\s\\n]+Web[\\s\\n]+Services(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |AWS| after the first use. -->"},
"184": {"find": "(\\ban[\\s\\n]+earlier[\\s\\n]+step\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Write |earlier in this procedure| or, if referring to a separate procedure, link to it. -->"},
"185": {"find": "(\\ban[\\s\\n]+UAA\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |a UAA| is preferred. -->"},
"186": {"find": "(\\bAn[\\s\\n]+UAA\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |A UAA| is preferred. -->"},
"187": {"find": "(\\band\\/or\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |or| is preferred. -->"},
"188": {"find": "(\\banti-virus\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |antivirus| is preferred. -->"},
"189": {"find": "(\\bapi\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |API| is preferred. -->"},
"190": {"find": "(\\bApi\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |API| is preferred. -->"},
"191": {"find": "(\\bapp[\\s\\n]+container\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |application container| is preferred. -->"},
"192": {"find": "(\\bApp[\\s\\n]+Developer\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |app developer| is preferred. -->"},
"193": {"find": "(\\bApp[\\s\\n]+manager\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Apps Manager| is preferred. -->"},
"194": {"find": "(\\bapplication[\\s\\n]+developer\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |app developer| is preferred. -->"},
"195": {"find": "(\\bapplication[\\s\\n]+program[\\s\\n]+interface\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |API| is preferred. -->"},
"196": {"find": "(\\bapplication[\\s\\n]+security[\\s\\n]+group\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |ASG| is preferred. -->"},
"197": {"find": "(\\bApplication[\\s\\n]+Transformation\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |App Modernization| is preferred. -->"},
"198": {"find": "(\\bApplication[\\s\\n]+VM\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |host VM| is preferred. -->"},
"199": {"find": "(\\bapplications(?![\\s\\n]+[Mm]anager)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |apps| is preferred. -->"},
"200": {"find": "(\\bApplications(?![\\s\\n]+[Mm]anager)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Apps| is preferred. -->"},
"201": {"find": "(\\bAppTX\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |App Modernization| is preferred. -->"},
"202": {"find": "(\\bApr\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |April| is preferred. -->"},
"203": {"find": "(\\baren't\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"204": {"find": "(\\bartefact\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |artifact| is preferred. -->"},
"205": {"find": "(\\bArtefact\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Artifact| is preferred. -->"},
"206": {"find": "(\\bassist[\\s\\n]+with\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Simply |help| is preferred. -->"},
"207": {"find": "(\\bassistance\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |help| is preferred. -->"},
"208": {"find": "(\\bassists[\\s\\n]+with\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Simply |helps| is preferred. -->"},
"209": {"find": "(\\bAssuming\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |If| might be better here. -->"},
"210": {"find": "(\\bat[\\s\\n]+the[\\s\\n]+moment\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- 1st preference: delete. 2nd preference: replace these words with |currently|. -->"},
"211": {"find": "(\\bAt[\\s\\n]+the[\\s\\n]+moment\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- 1st preference: delete. 2nd preference: replace these words with |Currently|. -->"},
"212": {"find": "(\\bat[\\s\\n]+the[\\s\\n]+time[\\s\\n]+of[\\s\\n]+writing\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- 1st preference: delete. 2nd preference: replace these words with |currently|. -->"},
"213": {"find": "(\\bAt[\\s\\n]+the[\\s\\n]+time[\\s\\n]+of[\\s\\n]+writing\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- 1st preference: delete. 2nd preference: replace these words with |Currently|. -->"},
"214": {"find": "(\\bAug\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |August| is preferred. -->"},
"215": {"find": "(\\bauth\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |authentication| is preferred. -->"},
"216": {"find": "(\\bauto[\\s\\n]+TLS\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Auto TLS| is the preferred casing. -->"},
"217": {"find": "(\\bavailability[\\s\\n]+zone[\\s\\n]+(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |AZ| after the first use. -->"},
"218": {"find": "(\\bAvailability[\\s\\n]+zone[\\s\\n]+(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |AZ| after the first use. -->"},
"219": {"find": "(\\bAvailability[\\s\\n]+Zone\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |availability zone (AZ)| on first use and |AZ| thereafter. -->"},
"220": {"find": "(\\bavailability[\\s\\n]+zones[\\s\\n]+(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |AZ| after the first use. -->"},
"221": {"find": "(\\bAvailability[\\s\\n]+zones[\\s\\n]+(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |AZ| after the first use. -->"},
"222": {"find": "(\\bAWS[\\s\\n]+S3(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Amazon S3| is preferred. -->"},
"223": {"find": "(\\bback-up\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The noun is |backup| and the verb is |back up|. -->"},
"224": {"find": "(\\bBack-up\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The noun is |backup| and the verb is |back up|. -->"},
"225": {"find": "(\\bbe[\\s\\n]+[a-z-]*ed[\\s\\n]+by\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Active voice is preferred. -->"},
"226": {"find": "(\\bbe[\\s\\n]+sufficient\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |suffice| is punchier. -->"},
"227": {"find": "(\\bbe[\\s\\n]+sure\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Redundant? |before| might be better. -->"},
"228": {"find": "(\\bBe[\\s\\n]+sure\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Redundant? |Before| might be better. -->"},
"229": {"find": "(\\bBefore\\b[^,]*,[\\s\\n]+first\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |first| is likely redundant. -->"},
"230": {"find": "(\\bbefore\\b[^,]*,[\\s\\n]+first\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |first| is likely redundant. -->"},
"231": {"find": "(\\bBest[\\s\\n]+Practices\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Best Practice sections are discouraged. Check if the material could be placed somewhere else. -->"},
"232": {"find": "(\\bBeta\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |beta| is preferred. -->"},
"233": {"find": "(\\bBETA\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |beta| is preferred. -->"},
"234": {"find": "(\\bBig[\\s\\n]+Data\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |big data| is preferred. -->"},
"235": {"find": "(\\bblack-list\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Preferred noun: |denylist|. Other alternative: |banned list|. Preferred verb: |block|. Other alternatives: |deny|, |ban|. -->"},
"236": {"find": "(\\bBlack-list\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Preferred noun: |Denylist|. Other alternative: |Banned list|. Preferred verb: |Block|. Other alternatives: |Deny|, |Ban|. -->"},
"237": {"find": "(\\bBlack-out\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Preferred verb: |Restrict|. Preferred noun: |Restriction|. Other alternative noun: |Outage|. -->"},
"238": {"find": "(\\bblack-out\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Preferred verb: |restrict|. Preferred noun: |restriction|. Other alternative noun: |outage|. -->"},
"239": {"find": "(\\bblack[\\s\\n]+hat\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |unethical hacker| is preferred. -->"},
"240": {"find": "(\\bBlack[\\s\\n]+hat\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Unethical hacker| is preferred. -->"},
"241": {"find": "(\\bBlack[\\s\\n]+Hat\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Unethical Hacker| is preferred. -->"},
"242": {"find": "(\\bblack[\\s\\n]+list\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Preferred noun: |denylist|. Other alternative: |banned list|. Preferred verb: |block|. Other alternatives: |deny|, |ban|. -->"},
"243": {"find": "(\\bblacklist\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Preferred noun: |Denylist|. Other alternative: |Banned list|. Preferred verb: |Block|. Other alternatives: |Deny|, |Ban|. -->"},
"244": {"find": "(\\bBlackout\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Preferred verb: |Restrict|. Preferred noun: |Restriction|. Other alternative noun: |Outage|. -->"},
"245": {"find": "(\\bblackout\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Preferred verb: |restrict|. Preferred noun: |restriction|. Other alternative noun: |outage|. -->"},
"246": {"find": "(\\bblob[\\s\\n]+store\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |blobstore| is preferred. -->"},
"247": {"find": "(\\bBlue-Green[\\s\\n]+deployment\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |blue-green deployment| is preferred. -->"},
"248": {"find": "(\\bboot[\\s\\n]+the\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |start up the| is preferred. -->"},
"249": {"find": "(\\bBOSH-init\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |bosh-init| is preferred. -->"},
"250": {"find": "(\\bBosh(?![\\n\\s-]lite)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |BOSH| is preferred. -->"},
"251": {"find": "(\\bbosh[\\s\\n]+(?![\\n\\s-]lite)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |BOSH| is preferred. -->"},
"252": {"find": "(\\bBOSH[\\s\\n]+director\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |BOSH Director| is preferred. -->"},
"253": {"find": "(\\bBOSH[\\s\\n]+Health[\\s\\n]+Monitor[\\s\\n]+metrics\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |BOSH health metrics| is preferred. -->"},
"254": {"find": "(\\bbosh[\\s\\n]+lite\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |BOSH-Lite| is preferred. -->"},
"255": {"find": "(\\bBOSH[\\s\\n]+lite\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |BOSH-Lite| is preferred. -->"},
"256": {"find": "(\\bBOSH[\\s\\n]+Lite\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |BOSH-Lite| is preferred. -->"},
"257": {"find": "(\\bBOSH[\\s\\n]+metrics\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |BOSH health metrics| is preferred. -->"},
"258": {"find": "(\\bBOSH[\\s\\n]+System[\\s\\n]+Metrics\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |BOSH health metrics| is preferred. -->"},
"259": {"find": "(\\bBPM\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |bpm| is preferred as this is the BOSH docs style. -->"},
"260": {"find": "(\\bBrokerpak\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Only capitalize |brokerpak| when it is in a title or starts a sentence. -->"},
"261": {"find": "(\\bBrokerpaks\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Only capitalize |brokerpaks| when it is in a title or starts a sentence. -->"},
"262": {"find": "(\\bbug\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |issue| is preferred. -->"},
"263": {"find": "(\\bBug\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Issue| is preferred. -->"},
"264": {"find": "(\\bbugs\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |issue| is preferred. -->"},
"265": {"find": "(\\bBugs\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Issue| is preferred. -->"},
"266": {"find": "(\\bbump\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |update| is preferred. -->"},
"267": {"find": "(\\bBump\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Update| is preferred. -->"},
"268": {"find": "(\\bBumped\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Updated| is preferred. -->"},
"269": {"find": "(\\bbumped\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |updated| is preferred. -->"},
"270": {"find": "(\\bbumps\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |updates| is preferred. -->"},
"271": {"find": "(\\bBumps\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Updates| is preferred. -->"},
"272": {"find": "(\\bcakewalk\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |easy| is preferred. -->"},
"273": {"find": "(\\bCakewalk\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Easy| is preferred. -->"},
"274": {"find": "(\\bcan't\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"275": {"find": "(\\bcan[\\s\\n]+be\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Consider switching to active voice. -->"},
"276": {"find": "(\\bcan[\\s\\n]+get[\\s\\n]+[a-z-]*ed\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |could be| is likely the correct grammar here if sticking with passive voice. -->"},
"277": {"find": "(\\bcatalogue\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |catalog| is preferred. -->"},
"278": {"find": "(\\bcauses[\\s\\n]+downtime[\\s\\n]+of[\\s\\n]+the\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |causes downtime for the| is preferred. -->"},
"279": {"find": "(\\bcauses[\\s\\n]+downtime[\\s\\n]+on[\\s\\n]+the\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |causes downtime for the| is preferred. -->"},
"280": {"find": "(\\bcauses[\\s\\n]+downtime[\\s\\n]+to[\\s\\n]+the\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |causes downtime for the| is preferred. -->"},
"281": {"find": "(\\bCC[\\s\\n]+API\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |CAPI| is preferred. -->"},
"282": {"find": "(\\bCell[\\s\\n]+VM\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |host VM| is preferred. -->"},
"283": {"find": "(\\bCert-Manager\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |cert-manager| is preferred. -->"},
"284": {"find": "(\\bCert-manager\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |cert-manager| is preferred. -->"},
"285": {"find": "(\\bCert[\\s\\n]+Manager\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |cert-manager| is preferred. -->"},
"286": {"find": "(\\bcert[\\s\\n]+manager\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |cert-manager| is preferred. -->"},
"287": {"find": "(\\bcert\\b[^-`](?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |certificate| is preferred. -->"},
"288": {"find": "(\\bcertificate[\\s\\n]+authority[\\s\\n]+certificate[\\s\\n]+(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |certificate authority (CA) certificate| on first use. |CA certificate| thereafter. -->"},
"289": {"find": "(\\bCertificate[\\s\\n]+Authority[\\s\\n]+certificate[\\s\\n]+(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |certificate authority (CA) certificate| on first use. |CA certificate| thereafter. -->"},
"290": {"find": "(\\bcertificate[\\s\\n]+authority[\\s\\n]+certificates[\\s\\n]+(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |certificate authority (CA) certificate| on first use. |CA certificate| thereafter. -->"},
"291": {"find": "(\\bCertificate[\\s\\n]+Authority[\\s\\n]+certificates[\\s\\n]+(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |certificate authority (CA) certificate| on first use. |CA certificate| thereafter. -->"},
"292": {"find": "(\\bcertificate[\\s\\n]+signing[\\s\\n]+request[\\s\\n]+(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |CSR| after first use. -->"},
"293": {"find": "(\\bCertificate[\\s\\n]+signing[\\s\\n]+request[\\s\\n]+(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |CSR| after first use. -->"},
"294": {"find": "(\\bCertificate[\\s\\n]+Signing[\\s\\n]+Request[\\s\\n]+(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |CSR| after first use. -->"},
"295": {"find": "(\\bcertificate[\\s\\n]+signing[\\s\\n]+requests[\\s\\n]+(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |CSR| after first use. -->"},
"296": {"find": "(\\bCertificate[\\s\\n]+signing[\\s\\n]+requests[\\s\\n]+(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |CSR| after first use. -->"},
"297": {"find": "(\\bCertificate[\\s\\n]+Signing[\\s\\n]+Requests[\\s\\n]+(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |CSR| after first use. -->"},
"298": {"find": "(\\bcerts\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |certificates| is preferred. -->"},
"299": {"find": "(\\bCF-compatible[\\s\\n]+CNB[\\s\\n]+buildpack\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |CF-compatible CNB| is preferred. -->"},
"300": {"find": "(\\bCF[\\s\\n]+(?![Cc][Ll][Ii])(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Cloud Foundry| is preferred. -->"},
"301": {"find": "(\\bcf[\\s\\n]+cli\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The brand name is shortened as |cf CLI|. -->"},
"302": {"find": "(\\bCF[\\s\\n]+CLI\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The brand name is shortened as |cf CLI|. -->"},
"303": {"find": "(\\bcf[\\s\\n]+push\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- If code, add code tags and sandwich between |the| and |command|. -->"},
"304": {"find": "(\\bchart[\\s\\n]+museum\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |ChartMuseum| is preferred. -->"},
"305": {"find": "(\\bChart[\\s\\n]+Museum\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |ChartMuseum| is preferred. -->"},
"306": {"find": "(\\bchartmuseum\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |ChartMuseum| is preferred. -->"},
"307": {"find": "(\\bcheck[\\s\\n]+box\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |checkbox| is preferred. -->"},
"308": {"find": "(\\bCheck\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Verify|, |Ensure|, and |Confirm| are all preferred. -->"},
"309": {"find": "(\\bcheckmark\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |check mark| is preferred. -->"},
"310": {"find": "(\\bchooses[\\s\\n]+to\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Consider if |choose| is redundant. -->"},
"311": {"find": "(\\bClam[\\s\\n]+av\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |ClamAV| is preferred. -->"},
"312": {"find": "(\\bClam[\\s\\n]+AV\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |ClamAV| is preferred. -->"},
"313": {"find": "(\\bClamav\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |ClamAV| is preferred. -->"},
"314": {"find": "(\\bclean-up\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The verb is |clean up|. The noun and adjective are both |cleanup|. -->"},
"315": {"find": "(\\bclear[\\s\\n]+text\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Unencrypted text is |plaintext|. Unformatted text is |plain text|. -->"},
"316": {"find": "(\\bClear[\\s\\n]+text\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Unencrypted text is |plaintext|. Unformatted text is |plain text|. -->"},
"317": {"find": "(\\bCLi\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |CLI| is the preferred casing. -->"},
"318": {"find": "(\\bCli\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |CLI| is the preferred casing. -->"},
"319": {"find": "(\\bClI\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |CLI| is the preferred casing. -->"},
"320": {"find": "(\\bclick[\\s\\n]+[A-Z](?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Embolden the names of UI elements. -->"},
"321": {"find": "(\\bClick[\\s\\n]+[A-Z](?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Embolden the names of UI elements. -->"},
"322": {"find": "(\\bclick[\\s\\n]+on\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |click| is preferred. -->"},
"323": {"find": "(\\bclick[\\s\\n]+the[\\s\\n]+[A-Z](?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Embolden the names of UI elements. -->"},
"324": {"find": "(\\bClick[\\s\\n]+the[\\s\\n]+[A-Z](?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Embolden the names of UI elements. -->"},
"325": {"find": "(\\bcloud-native-buildpack\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Cloud Native Buildpack| is preferred. -->"},
"326": {"find": "(\\bCloud-Native-buildpack\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Cloud Native Buildpack| is preferred. -->"},
"327": {"find": "(\\bCloud-Native-Buildpack\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Cloud Native Buildpack| is preferred. -->"},
"328": {"find": "(\\bcloud-native[\\s\\n]+application[\\s\\n]+bundle\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Cloud Native Application Bundle| has no hyphen and is capitalized. Shorten to |CNAB| after first use. -->"},
"329": {"find": "(\\bCloud-native[\\s\\n]+application[\\s\\n]+bundle\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Cloud Native Application Bundle| has no hyphen and is capitalized. Shorten to |CNAB| after first use. -->"},
"330": {"find": "(\\bCloud-native[\\s\\n]+Buildpack\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Cloud Native Buildpack| is preferred. -->"},
"331": {"find": "(\\bCloud-Native[\\s\\n]+Buildpack\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Cloud Native Buildpack| is preferred. -->"},
"332": {"find": "(\\bCloud-Native[\\s\\n]+buildpack\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Cloud Native Buildpack| is preferred. -->"},
"333": {"find": "(\\bCloud[\\s\\n]+Controller[\\s\\n]+API\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- 1st use: |Cloud Foundry API (CAPI)|. Subsequent uses: |CAPI|. -->"},
"334": {"find": "(\\bcloud[\\s\\n]+controller\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Cloud Controller| is preferred. -->"},
"335": {"find": "(\\bCloud[\\s\\n]+Foundries\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Cloud Foundry| has no plural. |Cloud Foundry deployments| is likely what is meant. -->"},
"336": {"find": "(\\bcloud[\\s\\n]+foundries\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Cloud Foundry| has no plural. |Cloud Foundry deployments| is likely what is meant. -->"},
"337": {"find": "(\\bCloud[\\s\\n]+foundries\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Cloud Foundry| has no plural. |Cloud Foundry deployments| is likely what is meant. -->"},
"338": {"find": "(\\bCloud[\\s\\n]+Foundry[\\s\\n]+API(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |CAPI| after the first use. -->"},
"339": {"find": "(\\bCloud[\\s\\n]+Foundry[\\s\\n]+Organisation\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Cloud Foundry org| or just |org| is preferred. -->"},
"340": {"find": "(\\bCloud[\\s\\n]+Foundry[\\s\\n]+Organization\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Cloud Foundry org| or just |org| is preferred. -->"},
"341": {"find": "(\\bCloud[\\s\\n]+Native-Buildpack\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Cloud Native Buildpack| is preferred. -->"},
"342": {"find": "(\\bCloud[\\s\\n]+Native-buildpack\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Cloud Native Buildpack| is preferred. -->"},
"343": {"find": "(\\bCloud[\\s\\n]+native-Buildpack\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Cloud Native Buildpack| is preferred. -->"},
"344": {"find": "(\\bcloud[\\s\\n]+native(?!(-|\\s)(buildpack|Buildpack|application[\\s\\n]+bundle|Applicable[\\s\\n]+Bundle))(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |cloud-native| is preferred. -->"},
"345": {"find": "(\\bCloud[\\s\\n]+native[\\s\\n]+application[\\s\\n]+bundle\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Cloud Native Application Bundle| is capitalized. Shorten to |CNAB| after first use. -->"},
"346": {"find": "(\\bcloud[\\s\\n]+native[\\s\\n]+application[\\s\\n]+bundle\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Cloud Native Application Bundle| is capitalized. Shorten to |CNAB| after first use. -->"},
"347": {"find": "(\\bcloud[\\s\\n]+native[\\s\\n]+buildpack\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Cloud Native Buildpack| is preferred. -->"},
"348": {"find": "(\\bCloud[\\s\\n]+Native[\\s\\n]+buildpack\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Cloud Native Buildpack| is preferred. -->"},
"349": {"find": "(\\bCloudController\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Cloud Controller| is preferred. -->"},
"350": {"find": "(\\bCloudformation\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |CloudFormation| is preferred. -->"},
"351": {"find": "(\\bCloudFoundry\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Cloud Foundry| is preferred -->"},
"352": {"find": "(\\bCNAB[\\s\\n]+bundle\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Delete |bundle| -- it is already in the acronym |CNAB|. -->"},
"353": {"find": "(\\bCNAB[\\s\\n]+Bundle\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Delete |Bundle| -- it is already in the acronym |CNAB|. -->"},
"354": {"find": "(\\bcodepath\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |code path| is preferred. -->"},
"355": {"find": "(\\bCodepath\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Code path| is preferred. -->"},
"356": {"find": "(\\bcodepaths\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |code paths| is preferred. -->"},
"357": {"find": "(\\bCodepaths\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Code paths| is preferred. -->"},
"358": {"find": "(\\bcollocate\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |co-locate| is now preferred. -->"},
"359": {"find": "(\\bcollocated\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |co-located| is now preferred. -->"},
"360": {"find": "(\\bcollocates\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |co-locates| is now preferred. -->"},
"361": {"find": "(\\bcollocating\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |co-locating| is preferred. -->"},
"362": {"find": "(\\bCollocating\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Co-locating| is preferred. -->"},
"363": {"find": "(\\bcolocate\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |co-locate| is now preferred. -->"},
"364": {"find": "(\\bcolocated\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |co-located| is now preferred. -->"},
"365": {"find": "(\\bcolocates\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |co-locates| is now preferred. -->"},
"366": {"find": "(\\bcolocating\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |co-locating| is preferred. -->"},
"367": {"find": "(\\bColocating\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Co-locating| is preferred. -->"},
"368": {"find": "(\\bcoming[\\s\\n]+soon\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Only document what exists. There are legal ramifications to making promises. -->"},
"369": {"find": "(\\bcommand[\\s\\n]+below\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |To X, run:| and |X by running:| are preferred. -->"},
"370": {"find": "(\\bCommand[\\s\\n]+Line[\\s\\n]+Interface\\b(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |CLI| after first use. -->"},
"371": {"find": "(\\bCommand[\\s\\n]+line[\\s\\n]+interface\\b(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |CLI| after first use. -->"},
"372": {"find": "(\\bcommand[\\s\\n]+line[\\s\\n]+interface\\b(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |CLI| after first use. -->"},
"373": {"find": "(\\bcommand[\\s\\n]+shell\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |shell| is preferred. -->"},
"374": {"find": "(\\bcompiletime\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |compile time| is preferred. -->"},
"375": {"find": "(\\bcomplete[\\s\\n]+(\\w+[\\s\\n]+|\\w+[\\s\\n]+\\w+[\\s\\n]+)procedure\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |follow| is preferred over |complete|. -->"},
"376": {"find": "(\\bComplete[\\s\\n]+(\\w+[\\s\\n]+|\\w+[\\s\\n]+\\w+[\\s\\n]+)procedure\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Follow| is preferred over |Complete|. -->"},
"377": {"find": "(\\bcomplete[\\s\\n]+(\\w+[\\s\\n]+|\\w+[\\s\\n]+\\w+[\\s\\n]+)procedures\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |follow| is preferred over |complete|. -->"},
"378": {"find": "(\\bComplete[\\s\\n]+(\\w+[\\s\\n]+|\\w+[\\s\\n]+\\w+[\\s\\n]+)procedures\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Follow| is preferred over |Complete|. -->"},
"379": {"find": "(\\bcomplete[\\s\\n]+(\\w+[\\s\\n]+|\\w+[\\s\\n]+\\w+[\\s\\n]+)steps\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |follow| is preferred over |complete|. -->"},
"380": {"find": "(\\bComplete[\\s\\n]+(\\w+[\\s\\n]+|\\w+[\\s\\n]+\\w+[\\s\\n]+)steps\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Follow| is preferred over |Complete|. -->"},
"381": {"find": "(\\bcomponent[\\s\\n]+VM\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- All VMs are component VMs except for the host VMs. -->"},
"382": {"find": "(\\bconceivably\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Redundant? -->"},
"383": {"find": "(\\bConceivably\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Redundant? -->"},
"384": {"find": "(\\bConfig\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |config| is preferred. -->"},
"385": {"find": "(\\bConfirm[\\s\\n]+if\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Confirm that| is better. -->"},
"386": {"find": "(\\bconfirm[\\s\\n]+if\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |confirm that| is better. -->"},
"387": {"find": "(\\bcontainer[\\s\\n]+networking\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |CF Networking| is preferred. -->"},
"388": {"find": "(\\bcontainer[\\s\\n]+registry\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- If generic, |container image registry| on first use. If VMware-provided, |Tanzu Network Registry| on first use. In both cases, |registry| thereafter except where risking ambiguity. -->"},
"389": {"find": "(\\bContinuous[\\s\\n]+Integration\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |continuous integration| is preferred. -->"},
"390": {"find": "(\\bcontrol-C\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Ctrl-C| is preferred. -->"},
"391": {"find": "(\\bControl-C\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Ctrl-C| is preferred. -->"},
"392": {"find": "(\\bcould've\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"393": {"find": "(\\bcouldn't\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"394": {"find": "(\\bcpu\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |CPU| is preferred. -->"},
"395": {"find": "(\\bcredhub\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The CF component is named |CredHub| -->"},
"396": {"find": "(\\bCredhub\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The CF component is named |CredHub| -->"},
"397": {"find": "(\\bcURL\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |cURL| is the project. |curl| is the CLI. -->"},
"398": {"find": "(\\bCustom[\\s\\n]+resource[\\s\\n]+definition[\\s\\n]+(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |CRD| after first use. -->"},
"399": {"find": "(\\bCustom[\\s\\n]+Resource[\\s\\n]+Definition[\\s\\n]+(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |CRD| after first use. -->"},
"400": {"find": "(\\bcustom[\\s\\n]+resource[\\s\\n]+definition[\\s\\n]+(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |CRD| after first use. -->"},
"401": {"find": "(\\bdata[\\s\\n]+set\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |dataset| is preferred. -->"},
"402": {"find": "(\\bdata[\\s\\n]+store\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |datastore| is preferred. -->"},
"403": {"find": "(\\bdatacenter\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |data center| is preferred. -->"},
"404": {"find": "(\\bDatacenter\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |data center| is preferred. -->"},
"405": {"find": "(\\bDate:[\\s\\n]+X\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Missing the date? -->"},
"406": {"find": "(\\bdate:[\\s\\n]+x\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Missing the date? -->"},
"407": {"find": "(\\bDate:[\\s\\n]+x\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Missing the date? -->"},
"408": {"find": "(\\bdate:[\\s\\n]+X\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Missing the date? -->"},
"409": {"find": "(\\bDB\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |database| is preferred. -->"},
"410": {"find": "(\\bDBs\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |databases| is preferred. -->"},
"411": {"find": "(\\bDec\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |December| is preferred. -->"},
"412": {"find": "(\\bdedicated[\\s\\n]+VM[\\s\\n]+plan\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |dedicated-VM plan| is preferred. -->"},
"413": {"find": "(\\bDedicated[\\s\\n]+VM[\\s\\n]+plan\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |dedicated-VM plan| is preferred. -->"},
"414": {"find": "(\\bDedicated[\\s\\n]+VM[\\s\\n]+Plan\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |dedicated-VM plan| is preferred. -->"},
"415": {"find": "(\\bdedicated[\\s\\n]+VM[\\s\\n]+Plan\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |dedicated-VM plan| is preferred. -->"},
"416": {"find": "(\\bdelimited\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |separated| is preferred. -->"},
"417": {"find": "(\\bDelimited\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Separated| is preferred. -->"},
"418": {"find": "(\\bdeny[\\s\\n]+list\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |denylist| is preferred. No space. -->"},
"419": {"find": "(\\bdependent\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |depends|? Avoid nounification of verbs where practical. -->"},
"420": {"find": "(\\bdesire\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |want| is preferred. -->"},
"421": {"find": "(\\bdetails[\\s\\n]+on\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |details about| is preferred. -->"},
"422": {"find": "(\\bDetails[\\s\\n]+on\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Details about| is preferred. -->"},
"423": {"find": "(\\bdetermine\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |determine| has two meanings. Consider if the univocal |discover| or |verify| would be better. -->"},
"424": {"find": "(\\bDetermine\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Determine| has two meanings. Consider if the univocal |discover| or |verify| would be better. -->"},
"425": {"find": "(\\bdevelopment[\\s\\n]+environment\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- If this simply refers to the user machine, |local machine| is preferred. If drawing a distinction from a production environment, leave as is. -->"},
"426": {"find": "(\\bdevops\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |DevOps| is preferred. -->"},
"427": {"find": "(\\bDevops\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |DevOps| is preferred. -->"},
"428": {"find": "(\\bdidn't\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"429": {"find": "(\\bDiego[\\s\\n]+BBS\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |BBS| is preferred. -->"},
"430": {"find": "(\\bDiego[\\s\\n]+brain\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Diego Brain| is now preferred. -->"},
"431": {"find": "(\\bDiego[\\s\\n]+cell\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Diego Cell| is now preferred. -->"},
"432": {"find": "(\\bDiego[\\s\\n]+cells\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Diego Cells| is now preferred. -->"},
"433": {"find": "(\\bDigital[\\s\\n]+Transformation\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |digital transformation| is preferred. -->"},
"434": {"find": "(\\bdisable\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |deactivate| is preferred. -->"},
"435": {"find": "(\\bDisable\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Deactivate| is preferred. -->"},
"436": {"find": "(\\bdisabled\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |deactivated| is preferred. -->"},
"437": {"find": "(\\bDisabled\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Deactivated| is preferred. -->"},
"438": {"find": "(\\bdisc\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |disk| is preferred. -->"},
"439": {"find": "(\\bDiscussed\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Mentioned earlier| is preferred over |Discussed earlier|. -->"},
"440": {"find": "(\\bdiscussed\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |As mentioned earlier| is preferred over |As discussed earlier|. -->"},
"441": {"find": "(\\bdisk[\\s\\n]+IO\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |disk I/O| is preferred. -->"},
"442": {"find": "(\\bdistro\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |distribution| is preferred. -->"},
"443": {"find": "(\\bdo[\\s\\n]+(\\w+[\\s\\n]+|\\w+[\\s\\n]+\\w+[\\s\\n]+)procedure\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |follow| is preferred over |do|. -->"},
"444": {"find": "(\\bDo[\\s\\n]+(\\w+[\\s\\n]+|\\w+[\\s\\n]+\\w+[\\s\\n]+)procedure\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Follow| is preferred over |Do|. -->"},
"445": {"find": "(\\bdo[\\s\\n]+(\\w+[\\s\\n]+|\\w+[\\s\\n]+\\w+[\\s\\n]+)procedures\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |follow| is preferred over |do|. -->"},
"446": {"find": "(\\bDo[\\s\\n]+(\\w+[\\s\\n]+|\\w+[\\s\\n]+\\w+[\\s\\n]+)procedures\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Follow| is preferred over |Do|. -->"},
"447": {"find": "(\\bdo[\\s\\n]+(\\w+[\\s\\n]+|\\w+[\\s\\n]+\\w+[\\s\\n]+)steps\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |follow| is preferred over |do|. -->"},
"448": {"find": "(\\bDo[\\s\\n]+(\\w+[\\s\\n]+|\\w+[\\s\\n]+\\w+[\\s\\n]+)steps\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Follow| is preferred over |Do|. -->"},
"449": {"find": "(\\bdo[\\s\\n]+manual\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |manually| might be better. -->"},
"450": {"find": "(\\bDo[\\s\\n]+manual\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Manually might be better. -->"},
"451": {"find": "(\\bdo[\\s\\n]+operations\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |perform operations| or just |operate| might read better. -->"},
"452": {"find": "(\\bdoc\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |documentation| is preferred. -->"},
"453": {"find": "(\\bDocker[\\s\\n]+trusted[\\s\\n]+registry\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Docker Registry| is preferred. -->"},
"454": {"find": "(\\bdocker\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Docker| is preferred. -->"},
"455": {"find": "(\\bdocs(?!\\.\\w)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |documentation| is preferred. -->"},
"456": {"find": "(\\bDocs\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Documentation| is preferred. -->"},
"457": {"find": "(\\bdoesn't\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"458": {"find": "(\\bdon't\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"459": {"find": "(\\bDon't\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"460": {"find": "(\\bDoppler[\\s\\n]+server\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Doppler| is preferred. -->"},
"461": {"find": "(\\bDoppler[\\s\\n]+VM\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Doppler| is preferred. -->"},
"462": {"find": "(\\bdoppler\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Doppler| is preferred. -->"},
"463": {"find": "(\\bdouble-parens[\\s\\n]+expression\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |double-parentheses expression| is preferred. -->"},
"464": {"find": "(\\bdouble[\\s\\n]+click\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |double-click| is preferred. -->"},
"465": {"find": "(\\bdown[\\s\\n]+time\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |downtime| is preferred. -->"},
"466": {"find": "(\\bdownscale\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |scale down| is preferred. -->"},
"467": {"find": "(\\bdrop-down\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |dropdown| is preferred -- without a hyphen and without |list| or |menu| -->"},
"468": {"find": "(\\bdropdown[\\s\\n]+list\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |dropdown| is preferred -- without a hyphen and without |list| or |menu| -->"},
"469": {"find": "(\\bdropdown[\\s\\n]+menu\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |dropdown| is preferred -- without a hyphen and without |list| or |menu| -->"},
"470": {"find": "(\\bdropdown[\\s\\n]+menus\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |dropdowns| is preferred. -->"},
"471": {"find": "(\\bDropdown[\\s\\n]+menus\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Dropdowns| is preferred. -->"},
"472": {"find": "(\\bdue[\\s\\n]+to[\\s\\n]+the[\\s\\n]+fact[\\s\\n]+that\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |because| might be better. -->"},
"473": {"find": "(\\bduring[\\s\\n]+the[\\s\\n]+boot[\\s\\n]+sequence\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |during startup| is preferred. -->"},
"474": {"find": "(\\be-mail\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |email| is preferred. -->"},
"475": {"find": "(\\beasily\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Avoid when describing an instruction. -->"},
"476": {"find": "(\\beasy\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Avoid when describing an instruction. -->"},
"477": {"find": "(\\beighty\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Use numerals for numbers greater than nine. -->"},
"478": {"find": "(\\beither\\b[^:]*:[\\s\\n]*\\*.*[\\s\\n]*\\*.*[\\s\\n]*\\*(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |either| applies to two items only. If the list exceeds two, use |any|. -->"},
"479": {"find": "(\\beither\\b[^:]*:[\\s\\n]*\\<.l\\>.*[\\s\\n]*\\<li\\>.*[\\s\\n]*\\<li\\>.*[\\s\\n]*\\<li\\>(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |either| applies to two items only. If the list exceeds two, use |any|. -->"},
"480": {"find": "(\\beligible\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Might the plainer |able| be better? -->"},
"481": {"find": "(\\benter[\\s\\n]+in\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Consider shortening to just |enter|. -->"},
"482": {"find": "(\\benter[\\s\\n]+the[\\s\\n]+following\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |To X, run:| and |X by running:| are preferred. -->"},
"483": {"find": "(\\benv\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |environment| is preferred -->"},
"484": {"find": "(\\bephemeral[\\s\\n]+disk\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- There are two kinds of disk: ephemeral and persistent. You do not need to modify |disk| with |ephemeral| unless there is discussion of persistent disks in the same topic. Always define persistent disks as persistent. -->"},
"485": {"find": "(\\beventing(?![\\s\\n]+component)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Knative Eventing| is preferred. -->"},
"486": {"find": "(\\bEventing[\\s\\n]+component\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- In Knative docs, |Knative Eventing| is preferred, sans |component|. -->"},
"487": {"find": "(\\beventing\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Knative Eventing| is preferred. -->"},
"488": {"find": "(\\beveryone's\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"489": {"find": "(\\bEveryone's\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"490": {"find": "(\\bevict\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |remove| or |eject| is preferred. -->"},
"491": {"find": "(\\bEvict\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Remove| or |Eject| is preferred. -->"},
"492": {"find": "(\\beviction\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |removal| or |ejection| is preferred. -->"},
"493": {"find": "(\\bEviction\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Removal| or |Ejection| is preferred. -->"},
"494": {"find": "(\\bexecute[\\s\\n]+(\\w+[\\s\\n]+|\\w+[\\s\\n]+\\w+[\\s\\n]+)procedure\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |follow| is preferred over |execute|. -->"},
"495": {"find": "(\\bExecute[\\s\\n]+(\\w+[\\s\\n]+|\\w+[\\s\\n]+\\w+[\\s\\n]+)procedure\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Follow| is preferred over |Execute|. -->"},
"496": {"find": "(\\bexecute[\\s\\n]+(\\w+[\\s\\n]+|\\w+[\\s\\n]+\\w+[\\s\\n]+)procedures\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |follow| is preferred over |execute|. -->"},
"497": {"find": "(\\bExecute[\\s\\n]+(\\w+[\\s\\n]+|\\w+[\\s\\n]+\\w+[\\s\\n]+)procedures\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Follow| is preferred over |Execute|. -->"},
"498": {"find": "(\\bexecute[\\s\\n]+(\\w+[\\s\\n]+|\\w+[\\s\\n]+\\w+[\\s\\n]+)steps\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |follow| is preferred over |execute|. -->"},
"499": {"find": "(\\bExecute[\\s\\n]+(\\w+[\\s\\n]+|\\w+[\\s\\n]+\\w+[\\s\\n]+)steps\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Follow| is preferred over |Execute|. -->"},
"500": {"find": "(\\bexecuting\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |running| is preferred. -->"},
"501": {"find": "(\\bExecuting\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Running| is preferred. -->"},
"502": {"find": "(\\bexpected\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Consider replacing with |in most cases| to sound more confident. -->"},
"503": {"find": "(\\bexperimental\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The terms |experimental| and |beta| have different meanings only in VMware. Otherwise, use |beta| and never |experimental|. -->"},
"504": {"find": "(\\bexport[\\s\\n]+from\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |export to| makes more sense if writing from the perspective of the exporter. -->"},
"505": {"find": "(\\bexport[\\s\\n]+out[\\s\\n]+of\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |export to| makes more sense if writing from the perspective of the exporter. -->"},
"506": {"find": "(\\bexported[\\s\\n]+from\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |export to| makes more sense if writing from the perspective of the exporter. -->"},
"507": {"find": "(\\bexported[\\s\\n]+out[\\s\\n]+of\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |export to| makes more sense if writing from the perspective of the exporter. -->"},
"508": {"find": "(\\bFAQ\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use FAQs unless absolutely necessary. Fold into other appropriate locations in the doc. -->"},
"509": {"find": "(\\bFeature\\b(?=\\n+[^:]+\\.)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Add a stem to introduce the new feature. -->"},
"510": {"find": "(\\bFeatures\\b(?=\\n+[^:]+\\.)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Add a stem to introduce the new features. -->"},
"511": {"find": "(\\bFeb\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |February| is preferred. -->"},
"512": {"find": "(\\bfemale\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |jack| or |socket| is preferred. -->"},
"513": {"find": "(\\bFemale\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Jack| or |Socket| is preferred. -->"},
"514": {"find": "(\\bfifty\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Use numerals for numbers greater than nine. -->"},
"515": {"find": "(\\bfile[\\s\\n]+name\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |filename| is preferred. -->"},
"516": {"find": "(\\bfile[\\s\\n]+store\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |filestore| is preferred. -->"},
"517": {"find": "(\\bfilestorage\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |file storage| is preferred. -->"},
"518": {"find": "(\\bfilesystem\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |file system| is preferred. -->"},
"519": {"find": "(\\bfirehose\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Firehose| is capitalized. -->"},
"520": {"find": "(\\bfolder\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |directory| is preferred. -->"},
"521": {"find": "(\\bfolders\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |directories| is preferred. -->"},
"522": {"find": "(\\bfollowing[\\s\\n]+command\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Maybe shorten to just |run:| -->"},
"523": {"find": "(\\bFor[\\s\\n]+example\\b[^,:](?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Consider adding a comma or colon after |For example|. -->"},
"524": {"find": "(\\bfor[\\s\\n]+example\\b[^,:](?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Consider adding a comma or colon after |for example|. -->"},
"525": {"find": "(\\bfor[\\s\\n]+instance\\b[,:\\.](?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |for example| is preferred. -->"},
"526": {"find": "(\\bFor[\\s\\n]+instance\\b[,:\\.](?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |For example| is preferred. -->"},
"527": {"find": "(\\bfor[\\s\\n]+more[\\s\\n]+information\\.(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The x-ref format is |For more information, see...| -->"},
"528": {"find": "(\\bfor[\\s\\n]+the[\\s\\n]+sake[\\s\\n]+of\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |to| might be better here. -->"},
"529": {"find": "(\\bFor[\\s\\n]+the[\\s\\n]+sake[\\s\\n]+of\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |To| might be better here. -->"},
"530": {"find": "(\\bforty\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Use numerals for numbers greater than nine. -->"},
"531": {"find": "(\\bFrequently[\\s\\n]+Asked[\\s\\n]+Questions\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use FAQs unless absolutely necessary. Fold into other appropriate locations in the doc. -->"},
"532": {"find": "(\\bfully[\\s\\n]+qualified[\\s\\n]+domain[\\s\\n]+name[\\s\\n]+(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |FQDN| after the first use. -->"},
"533": {"find": "(\\bFully[\\s\\n]+qualified[\\s\\n]+domain[\\s\\n]+name[\\s\\n]+(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |FQDN| after the first use. -->"},
"534": {"find": "(\\bfuture\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Only document what exists. There are legal ramifications to making promises. -->"},
"535": {"find": "(\\bGarbage[\\s\\n]+Collector\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |garbage collector| is preferred. -->"},
"536": {"find": "(\\bgarden-runc\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Garden-runC| is preferred. -->"},
"537": {"find": "(\\bGarden-RunC\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Garden-runC| is preferred. -->"},
"538": {"find": "(\\bGemfire\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |GemFire| is preferred. -->"},
"539": {"find": "(\\bget[\\s\\n]+in[\\s\\n]+touch\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Use a specific communication verb instead, such as |email|. -->"},
"540": {"find": "(\\bGet[\\s\\n]+in[\\s\\n]+touch\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Use a specific communication verb instead, such as |email|. -->"},
"541": {"find": "(\\bgif\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |GIF| is preferred. -->"},
"542": {"find": "(\\bGit[\\s\\n]+lab\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |GitLab| is preferred. -->"},
"543": {"find": "(\\bGit[\\s\\n]+Lab\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |GitLab| is preferred. -->"},
"544": {"find": "(\\bgit\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Git| is the preferred casing. -->"},
"545": {"find": "(\\bGithub\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The brand name is |GitHub|. -->"},
"546": {"find": "(\\bGitlab\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |GitLab| is preferred. -->"},
"547": {"find": "(\\bGlobal[\\s\\n]+Support[\\s\\n]+Services\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |VMware Tanzu Support| is preferred. -->"},
"548": {"find": "(\\bgo[\\s\\n]+router\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Gorouter| is preferred. -->"},
"549": {"find": "(\\bGo[\\s\\n]+Router\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Gorouter| is preferred. -->"},
"550": {"find": "(\\bGo[\\s\\n]+routine\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |goroutine| is preferred. -->"},
"551": {"find": "(\\bGolang\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |golang| is preferred. -->"},
"552": {"find": "(\\bgonna\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"553": {"find": "(\\bgood[\\s\\n]+chance\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |likely| is shorter, less colloquial, and easier to translate than |good chance|. -->"},
"554": {"find": "(\\bGoogle[\\s\\n]+Cloud[\\s\\n]+Platform[\\s\\n]+(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |GCP| after the first use. -->"},
"555": {"find": "(\\bgorouter\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Gorouter| is preferred. -->"},
"556": {"find": "(\\bGoRouter\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Gorouter| is preferred. -->"},
"557": {"find": "(\\bGoroutine\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |goroutine| is preferred. -->"},
"558": {"find": "(\\bgotta\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"559": {"find": "(\\bgrandfather\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |legacy| is preferred. -->"},
"560": {"find": "(\\bGrandfather\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Legacy| is preferred. -->"},
"561": {"find": "(\\bgrandfathered\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |legacy| is preferred. -->"},
"562": {"find": "(\\bGrandfathered\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Legacy| is preferred. -->"},
"563": {"find": "(\\bgraphical[\\s\\n]+interface\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |UI| is preferred. -->"},
"564": {"find": "(\\bGreenPlum\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Greenplum| is preferred. -->"},
"565": {"find": "(\\bGSS\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |VMware Tanzu Support| is preferred. -->"},
"566": {"find": "(\\bguarantee\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Maybe replace with |ensure| to avoid the sense of legalese. -->"},
"567": {"find": "(\\bGuarantee\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Maybe replace with |Ensure| to avoid the sense of legalese. -->"},
"568": {"find": "(\\bguid\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |GUID| is preferred. -->"},
"569": {"find": "(\\bHAC\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |HA cluster| is preferred. -->"},
"570": {"find": "(\\bhad[\\s\\n]+been\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Consider replacing with |was| or shifting to present tense. -->"},
"571": {"find": "(\\bhadn't\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"572": {"find": "(\\bhandicap\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |obstacle|, |restrict|, or |impede| are preferred. -->"},
"573": {"find": "(\\bHandicap\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |obstacle|, |restrict|, or |impede| are preferred. -->"},
"574": {"find": "(\\bhandicapped\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |restricted| or |impeded| are preferred. -->"},
"575": {"find": "(\\bHandicapped\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |restricted| or |impeded| are preferred. -->"},
"576": {"find": "(\\bhankering\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |want| is preferred. -->"},
"577": {"find": "(\\bHAproxy\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |HAProxy| is preferred. -->"},
"578": {"find": "(\\bHaproxy\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |HAProxy| is preferred. -->"},
"579": {"find": "(\\bhas[\\s\\n]+been\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Consider changing to |is| or |has| or rewrite for active voice. -->"},
"580": {"find": "(\\bhas[\\s\\n]+finished[\\s\\n]+[a-z-]*ing\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Possibly inelegant grammar. |has verbed| is better than |has finished verbing|. -->"},
"581": {"find": "(\\bhas[\\s\\n]+the[\\s\\n]+power[\\s\\n]+to\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |can| is shorter. -->"},
"582": {"find": "(\\bhasn't\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"583": {"find": "(\\bhave[\\s\\n]+been\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Consider replacing with |were| or shifting to present tense. -->"},
"584": {"find": "(\\bhave[\\s\\n]+the[\\s\\n]+power[\\s\\n]+to\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |can| is shorter. -->"},
"585": {"find": "(\\bhaven't\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. Also, |they| is preferred. -->"},
"586": {"find": "(\\bhe'd\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. Also, |they| is preferred. -->"},
"587": {"find": "(\\bHe'd\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. Also, |They| is preferred. -->"},
"588": {"find": "(\\bhe'll\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. Also, |they| is preferred. -->"},
"589": {"find": "(\\bHe'll\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. Also, |They| is preferred. -->"},
"590": {"find": "(\\bhe's\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. Also, |they| is preferred. -->"},
"591": {"find": "(\\bHe's\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. Also, |They| is preferred. -->"},
"592": {"find": "(\\bhe\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |they| is preferred. -->"},
"593": {"find": "(\\bHe\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |They| is preferred. -->"},
"594": {"find": "(\\bhealth-check\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |health check| is preferred. -->"},
"595": {"find": "(\\bhealthcheck\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |health check| is preferred. -->"},
"596": {"find": "(\\bHelm-Chart\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Helm chart| is preferred. -->"},
"597": {"find": "(\\bhelm-chart\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Helm chart| is preferred. -->"},
"598": {"find": "(\\bHelm-chart\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Helm chart| is preferred. -->"},
"599": {"find": "(\\bhelm[\\s\\n]+(?!chart)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Helm| is preferred. -->"},
"600": {"find": "(\\bhelm[\\s\\n]+chart\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Helm chart| is preferred. -->"},
"601": {"find": "(\\bhigh[\\s\\n]+availability[\\s\\n]+cluster\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |HA cluster| is preferred. -->"},
"602": {"find": "(\\bHigh[\\s\\n]+availability[\\s\\n]+cluster\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |HA cluster| is preferred. -->"},
"603": {"find": "(\\bHigh[\\s\\n]+Availability\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |high availability| is preferred. -->"},
"604": {"find": "(\\bhighly[\\s\\n]+recommend\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Just |recommend| is preferred. -->"},
"605": {"find": "(\\bhighly[\\s\\n]+recommends\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Just |recommends| is preferred. -->"},
"606": {"find": "(\\bhis[\\s\\n]+or[\\s\\n]+her\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |they| is preferred. -->"},
"607": {"find": "(\\bhis\\/her\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |they| is preferred. -->"},
"608": {"find": "(\\bhit\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |click| is preferred. -->"},
"609": {"find": "(\\bHit\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Click| is preferred. -->"},
"610": {"find": "(\\bhonor\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Be less anthropomorphic and more precise. -->"},
"611": {"find": "(\\bhonored\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Be less anthropomorphic and more precise. -->"},
"612": {"find": "(\\bhonors\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Be less anthropomorphic and more precise. -->"},
"613": {"find": "(\\bhonour\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Be less anthropomorphic and more precise. -->"},
"614": {"find": "(\\bhonoured\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Be less anthropomorphic and more precise. -->"},
"615": {"find": "(\\bhonours\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Be less anthropomorphic and more precise. -->"},
"616": {"find": "(\\bhost[\\s\\n]+name\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |hostname| is preferred. -->"},
"617": {"find": "(\\bHTTP[\\s\\n]+Router\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Gorouter| is preferred. -->"},
"618": {"find": "(\\bHttp\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |HTTP| is preferred. -->"},
"619": {"find": "(\\bhuman[\\s\\n]+readable[\\s\\n]+description\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The compound adjective is missing a hyphen. -->"},
"620": {"find": "(\\bHuman[\\s\\n]+readable[\\s\\n]+description\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The compound adjective is missing a hyphen. -->"},
"621": {"find": "(\\bhuman[\\s\\n]+readable[\\s\\n]+identifier\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The compound adjective is missing a hyphen. -->"},
"622": {"find": "(\\bHuman[\\s\\n]+readable[\\s\\n]+identifier\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The compound adjective is missing a hyphen. -->"},
"623": {"find": "(\\bhuman[\\s\\n]+readable[\\s\\n]+name\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The compound adjective is missing a hyphen. -->"},
"624": {"find": "(\\bHuman[\\s\\n]+readable[\\s\\n]+name\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The compound adjective is missing a hyphen. -->"},
"625": {"find": "(\\bhuman[\\s\\n]+readable[\\s\\n]+text\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The compound adjective is missing a hyphen. -->"},
"626": {"find": "(\\bHuman[\\s\\n]+readable[\\s\\n]+text\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The compound adjective is missing a hyphen. -->"},
"627": {"find": "(\\bHyperloglog\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |HyperLogLog| is preferred. -->"},
"628": {"find": "(\\bhyperloglog\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |HyperLogLog| is preferred. -->"},
"629": {"find": "(\\bHyperloglogs\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |HyperLogLogs| is preferred. -->"},
"630": {"find": "(\\bhyperloglogs\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |HyperLogLogs| is preferred. -->"},
"631": {"find": "(\\bI'd\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"632": {"find": "(\\bI'll\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"633": {"find": "(\\bI'm\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"634": {"find": "(\\bI've\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"635": {"find": "(\\bIAAS\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |IaaS| is preferred. -->"},
"636": {"find": "(\\bIaaSes\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Avoid the plural form of |IaaS| if possible. -->"},
"637": {"find": "(\\bid[\\s\\n]+(?!=)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The abbreviation for |identity| is |ID|. -->"},
"638": {"find": "(\\bId\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The abbreviation for |identity| is |ID|. -->"},
"639": {"find": "(\\biD\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The abbreviation for |identity| is |ID|. -->"},
"640": {"find": "(\\bIDP\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |IdP (identity provider)| is preferred. -->"},
"641": {"find": "(\\bIDPs\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |identity providers| is preferred. A single identity provider can be shortened to |IdP|. -->"},
"642": {"find": "(\\bIf[\\s\\n]+you[\\s\\n]+want[\\s\\n]+to\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Maybe replace with just |To|. -->"},
"643": {"find": "(\\bif[\\s\\n]+you[\\s\\n]+want[\\s\\n]+to\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Maybe replace with just |to|. -->"},
"644": {"find": "(\\bimport[\\s\\n]+into\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |import from| makes more sense if writing from the perspective of the importer. -->"},
"645": {"find": "(\\bimport[\\s\\n]+to\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |import from| makes more sense if writing from the perspective of the importer. -->"},
"646": {"find": "(\\bimported[\\s\\n]+into\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |import from| makes more sense if writing from the perspective of the importer. -->"},
"647": {"find": "(\\bimported[\\s\\n]+to\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |import from| makes more sense if writing from the perspective of the importer. -->"},
"648": {"find": "(\\bin[\\s\\n]+a[\\s\\n]+[a-z]*[\\s\\n]+manner\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Consider replacing with an adverb. -->"},
"649": {"find": "(\\bin[\\s\\n]+CredHub\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- There are two CredHubs in PCF v2.0: BOSH CredHub and runtime CredHub. -->"},
"650": {"find": "(\\bin[\\s\\n]+go\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |in Go| is preferred. -->"},
"651": {"find": "(\\bin[\\s\\n]+order[\\s\\n]+to\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |to| is preferred. -->"},
"652": {"find": "(\\bin[\\s\\n]+preparation[\\s\\n]+for\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |to prepare for| might be better. Verbs are punchier than abstract nouns. -->"},
"653": {"find": "(\\bin[\\s\\n]+real-time\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Stuff happens in |real time|. -->"},
"654": {"find": "(\\bin[\\s\\n]+the[\\s\\n]+case[\\s\\n]+that\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |when| or |where| might be better here. -->"},
"655": {"find": "(\\bIn[\\s\\n]+the[\\s\\n]+case[\\s\\n]+that\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |When| or |Where| might be better here. -->"},
"656": {"find": "(\\bin[\\s\\n]+the[\\s\\n]+terminal[\\s\\n]+window\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |on the command line| is preferred. -->"},
"657": {"find": "(\\bin[\\s\\n]+unexpected[\\s\\n]+ways\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |unexpectedly| is more concise. -->"},
"658": {"find": "(\\bincluded[\\s\\n]+in\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Consider deleting |included|. -->"},
"659": {"find": "(\\bindependent[\\s\\n]+service[\\s\\n]+vendor[\\s\\n]+(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |ISV| after the first use. -->"},
"660": {"find": "(\\bIndependent[\\s\\n]+service[\\s\\n]+vendor[\\s\\n]+(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |ISV| after the first use. -->"},
"661": {"find": "(\\bIndependent[\\s\\n]+Service[\\s\\n]+Vendor[\\s\\n]+(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |ISV| after the first use. -->"},
"662": {"find": "(\\bindependent[\\s\\n]+service[\\s\\n]+vendors[\\s\\n]+(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |ISV| after the first use. -->"},
"663": {"find": "(\\bIndependent[\\s\\n]+service[\\s\\n]+vendors[\\s\\n]+(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |ISV| after the first use. -->"},
"664": {"find": "(\\bIndependent[\\s\\n]+Service[\\s\\n]+Vendors[\\s\\n]+(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |ISV| after the first use. -->"},
"665": {"find": "(\\bindices\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |indexes| is preferred. -->"},
"666": {"find": "(\\bineligible\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Might the plainer |unable| be better? -->"},
"667": {"find": "(\\binfo\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |information| is preferred. -->"},
"668": {"find": "(\\bInfo\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Information| is preferred. -->"},
"669": {"find": "(\\binformation[\\s\\n]+on\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |information about| is preferred. -->"},
"670": {"find": "(\\binput[\\s\\n]+that\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The verb |enter| is preferred. -->"},
"671": {"find": "(\\binput[\\s\\n]+the\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The verb |enter| is preferred. -->"},
"672": {"find": "(\\bInput\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The verb |Enter| is preferred. -->"},
"673": {"find": "(\\binsecure\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |not secure| is preferred. -->"},
"674": {"find": "(\\bInsecure\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Not secure| is preferred. -->"},
"675": {"find": "(\\binstallation[\\s\\n]+dashboard(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Installation Dashboard| is preferred if this is a VMware product feature. -->"},
"676": {"find": "(\\bInstallation[\\s\\n]+dashboard(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Installation Dashboard| is preferred if this is a VMware product feature. -->"},
"677": {"find": "(\\binstallation[\\s\\n]+Dashboard(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Installation Dashboard| is preferred if this is a VMware product feature. -->"},
"678": {"find": "(\\binstructions[\\s\\n]+on[\\s\\n]+[a-z]*ing\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |instructions for doing x| is more natural English than |instructions on doing x| -->"},
"679": {"find": "(\\bInstructions[\\s\\n]+on[\\s\\n]+[a-z]*ing\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Instructions for doing x| is more natural English than |Instructions on doing x| -->"},
"680": {"find": "(\\binteractivity\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- There is probably a better alternative, such as |input|. -->"},
"681": {"find": "(\\bInternet[\\s\\n]+(?![Pp]rotocol)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Only capitalize |internet| when it is part of a title. -->"},
"682": {"find": "(\\bInternet[\\s\\n]+Protocol\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |IP address| is preferred. -->"},
"683": {"find": "(\\bIP\\b(?!([\\s\\n]+[Aa]ddress|[\\s\\n]+or[\\s\\n]+[A-Z]*[\\s\\n]+[Aa]ddress))(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not omit |address| from |IP address|. -->"},
"684": {"find": "(\\bis[\\s\\n]+[a-z-]*ed[\\s\\n]+by\\b(?![\\s\\n]+default)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Active voice is preferred. -->"},
"685": {"find": "(\\bis[\\s\\n]+\\w+[\\s\\n]+based(?!([\\s\\n]+\\wn|[\\s\\n]+off|[\\s\\n]+out))(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Compound adjectives require hyphens, as in |time-based|. -->"},
"686": {"find": "(\\bis[\\s\\n]+a[\\s\\n]+sign[\\s\\n]+that\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |suggests| is shorter and simplifies the syntax. -->"},
"687": {"find": "(\\bis[\\s\\n]+finished[\\s\\n]+[a-z-]*ing\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Possibly inelegant grammar. |has verbed| is better than |has finished verbing|. -->"},
"688": {"find": "(\\bis[\\s\\n]+necessary[\\s\\n]+to\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Consider deleting this or replacing it with the shorter |you must|. -->"},
"689": {"find": "(\\bis[\\s\\n]+possible[\\s\\n]+to\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Active voice |you can| might be better. -->"},
"690": {"find": "(\\bis[\\s\\n]+used[\\s\\n]+to\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Redundant? -->"},
"691": {"find": "(\\bisn't\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"692": {"find": "(\\bIsolation[\\s\\n]+Segments\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Isolation Segment| is the official title so do not make it plural. It is fine to talk of |isolation segments| though. -->"},
"693": {"find": "(\\bit'll\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"694": {"find": "(\\bit's\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"695": {"find": "(\\bit's\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"696": {"find": "(\\bIt's\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"697": {"find": "(\\bit[\\s\\n]+is[\\s\\n]+possible\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |might| might be better. -->"},
"698": {"find": "(\\bIt[\\s\\n]+is[\\s\\n]+possible\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |might| might be better. -->"},
"699": {"find": "(\\bit[\\s\\n]+is[\\s\\n]+recommended\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Specify the party that recommends (VMware, Cloud Foundry, etc). -->"},
"700": {"find": "(\\bIt[\\s\\n]+is[\\s\\n]+recommended\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Specify the party that recommends (VMware, Cloud Foundry, etc). -->"},
"701": {"find": "(\\bJan\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |January| is preferred. -->"},
"702": {"find": "(\\bjar\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |JAR| is preferred. -->"},
"703": {"find": "(\\bjavascript\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |JavaScript| is preferred. -->"},
"704": {"find": "(\\bJavascript\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |JavaScript| is preferred. -->"},
"705": {"find": "(\\bjson\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |JSON| is preferred. -->"},
"706": {"find": "(\\bjsonpath\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |JSONPath| is the preferred casing. -->"},
"707": {"find": "(\\bJSONpath\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |JSONPath| is the preferred casing. -->"},
"708": {"find": "(\\bjust[\\s\\n]+so[\\s\\n]+happened\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Redundant? -->"},
"709": {"find": "(\\bjust[\\s\\n]+so[\\s\\n]+happens\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Redundant? -->"},
"710": {"find": "(\\bK8s\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Kubernetes| is preferred. -->"},
"711": {"find": "(\\bk8s\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Kubernetes| is preferred. -->"},
"712": {"find": "(\\bK8S\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Kubernetes| is preferred. -->"},
"713": {"find": "(\\bkeep-alive\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |keepalive| is preferred. -->"},
"714": {"find": "(\\bkeep[\\s\\n]+in[\\s\\n]+mind\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Redundant? -->"},
"715": {"find": "(\\bKeep[\\s\\n]+in[\\s\\n]+mind\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Redundant? -->"},
"716": {"find": "(\\bkey[\\s\\n]+pair\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |keypair| is preferred. -->"},
"717": {"find": "(\\bkey\\/value[\\s\\n]+pair\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |key-value pair| is preferred. -->"},
"718": {"find": "(\\bKey\\/value[\\s\\n]+pair\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Key-value pair| is preferred. -->"},
"719": {"find": "(\\bkey\\/value[\\s\\n]+pairs\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |key-value pairs| is preferred. -->"},
"720": {"find": "(\\bKey\\/value[\\s\\n]+pairs\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Key-value pairs| is preferred. -->"},
"721": {"find": "(\\bkill\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Where practical, |stop| or |halt| is preferred. -->"},
"722": {"find": "(\\bKill\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Where practical, |stop| or |halt| is preferred. -->"},
"723": {"find": "(\\bKnown\\b[\\s\\n]+\\bIssue\\b(?=\\n+[^:]+\\.\\n+\\*)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Add a stem to introduce the known issue. -->"},
"724": {"find": "(\\bKnown\\b[\\s\\n]+\\bIssues\\b(?=\\n+[^:]+\\.\\n+\\*)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Add a stem to introduce the known issues. -->"},
"725": {"find": "(\\bkubectl[\\s\\n]+CLI\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- First use: |Kubernetes command line tool (kubectl)|. Subsequent uses: |kubectl|. -->"},
"726": {"find": "(\\bkubectl[\\s\\n]+command[\\s\\n]+line[\\s\\n]+tool\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- First use: |Kubernetes command line tool (kubectl)|. Subsequent uses: |kubectl|. -->"},
"727": {"find": "(\\bkubectl[\\s\\n]+tool\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- First use: |Kubernetes command line tool (kubectl)|. Subsequent uses: |kubectl|. -->"},
"728": {"find": "(\\bKubectl\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- First use: |Kubernetes command line tool (kubectl)|. Subsequent uses: |kubectl|. -->"},
"729": {"find": "(\\bKubernetes[\\s\\n]+operator\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Kubernetes Operator| is preferred. -->"},
"730": {"find": "(\\bkubernetes\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Kubernetes| is preferred. -->"},
"731": {"find": "(\\bkubo\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Container Runtime| is preferred. -->"},
"732": {"find": "(\\bKubo\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Container Runtime| is preferred. -->"},
"733": {"find": "(\\bKuBo\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Container Runtime| is preferred. -->"},
"734": {"find": "(\\blabelled\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |labeled| is the American English spelling. -->"},
"735": {"find": "(\\bLabelled\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |labeled| is the American English spelling. -->"},
"736": {"find": "(\\blater[\\s\\n]+release\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Never state something is coming in a future release. It could create a legal problem. -->"},
"737": {"find": "(\\bleft[\\s\\n]+hand\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |left-hand| is preferred if modifying a noun, as in |left-hand pane|. -->"},
"738": {"find": "(\\blet's\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"739": {"find": "(\\bLet's\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"740": {"find": "(\\bLightweight[\\s\\n]+Directory[\\s\\n]+Access[\\s\\n]+Protocol(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |LDAP| is preferred. -->"},
"741": {"find": "(\\blives\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not anthropomorphize: code does not live anywhere. -->"},
"742": {"find": "(\\bliving\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not anthropomorphize: code does not live anywhere. -->"},
"743": {"find": "(\\blog-in\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Use |login| (n) or |log in| (v) -->"},
"744": {"find": "(\\blog[\\s\\n]+into\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |log in to| is preferred. -->"},
"745": {"find": "(\\blog[\\s\\n]+line\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |log entry| is preferred. -->"},
"746": {"find": "(\\bLog[\\s\\n]+line\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Log entry| is preferred. -->"},
"747": {"find": "(\\blog[\\s\\n]+lines\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |log entries| is preferred. -->"},
"748": {"find": "(\\bLog[\\s\\n]+lines\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Log entries| is preferred. -->"},
"749": {"find": "(\\blog[\\s\\n]+message\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |log entry| is preferred. -->"},
"750": {"find": "(\\bLog[\\s\\n]+message\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Log entry| is preferred. -->"},
"751": {"find": "(\\blog[\\s\\n]+messages\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |log entries| is preferred. -->"},
"752": {"find": "(\\bLog[\\s\\n]+messages\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Log entries| is preferred. -->"},
"753": {"find": "(\\blog[\\s\\n]+on[\\s\\n]+to\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |log in to| is preferred. -->"},
"754": {"find": "(\\bloggregator(?!\\-)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Call it |Loggregator| -- capitalized and without a preceding |the|. -->"},
"755": {"find": "(\\blogin[\\s\\n]+to\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |log in to| is preferred. -->"},
"756": {"find": "(\\bLogin[\\s\\n]+to\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Log in to| is preferred. -->"},
"757": {"find": "(\\bLong[\\s\\n]+term\\b[^\\.:;,](?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Long term| is missing a hyphen here if it is a compound adjective. -->"},
"758": {"find": "(\\blong[\\s\\n]+term\\b[^\\.:;,](?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |long term| is missing a hyphen here if it is a compound adjective. -->"},
"759": {"find": "(\\blower[\\s\\n]+case\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |lowercase| is preferred. -->"},
"760": {"find": "(\\bmake[\\s\\n]+sure\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Consider rephrasing as a command. -->"},
"761": {"find": "(\\bMake[\\s\\n]+sure\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Consider rephrasing as a command. -->"},
"762": {"find": "(\\bmale\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |plug| is preferred. -->"},
"763": {"find": "(\\bMale\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Plug| is preferred. -->"},
"764": {"find": "(\\bMar\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |March| is preferred. -->"},
"765": {"find": "(\\bmaster\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Preferred alternatives: |primary|, |controller|. Other alternatives: |main|, |original|, |reference|, |control plane|, |control plane node|. -->"},
"766": {"find": "(\\bMaster\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Preferred alternatives: |Primary|, |Controller|. Other alternatives: |Main|, |Original|, |Reference|, |Control plane|, |Control plane node|. -->"},
"767": {"find": "(\\bMaterial[\\s\\n]+data\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |consumption data| is preferred. -->"},
"768": {"find": "(\\bmax\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |maximum| is preferred. -->"},
"769": {"find": "(\\bMax\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Maximum| is preferred. -->"},
"770": {"find": "(\\bmay\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |can| usually works better. Use |might| to convey possibility. -->"},
"771": {"find": "(\\bMedium[\\s\\n]+term\\b[^\\.:;,](?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Medium term| is missing a hyphen here if it is a compound adjective. -->"},
"772": {"find": "(\\bmedium[\\s\\n]+term\\b[^\\.:;,](?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |medium term| is missing a hyphen here if it is a compound adjective. -->"},
"773": {"find": "(\\bmembers[\\s\\n]+of[\\s\\n]+a[\\s\\n]+[a-z]*(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |x members| is more succinct than |members of x|. -->"},
"774": {"find": "(\\bmerge[\\s\\n]+to\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |merge with| might be better here. -->"},
"775": {"find": "(\\bmerged[\\s\\n]+to\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |merged with| might be better here. -->"},
"776": {"find": "(\\bmicro-services\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |microservices| is preferred. -->"},
"777": {"find": "(\\bmight've\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"778": {"find": "(\\bmin\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |minimum| is preferred. -->"},
"779": {"find": "(\\bMin\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Minimum| is preferred. -->"},
"780": {"find": "(\\bMinIO\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Minio| is preferred. -->"},
"781": {"find": "(\\bminio\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Minio| is preferred. -->"},
"782": {"find": "(\\bmodal\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |dialog box| is preferred. -->"},
"783": {"find": "(\\bMore[\\s\\n]+information[\\s\\n]+(can|is)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The xref style is |For more information, see...|. -->"},
"784": {"find": "(\\bmore[\\s\\n]+information[\\s\\n]+(can|is)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The xref style is |For more information, see...|. -->"},
"785": {"find": "(\\bmulti az\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Multi-AZ| is Amazon style. -->"},
"786": {"find": "(\\bmulti AZ\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Multi-AZ| is Amazon style. -->"},
"787": {"find": "(\\bMulti az\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Multi-AZ| is Amazon style. -->"},
"788": {"find": "(\\bMulti AZ\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Multi-AZ| is Amazon style. -->"},
"789": {"find": "(\\bmulti-az\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Multi-AZ| is Amazon style. -->"},
"790": {"find": "(\\bmulti-AZ\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Multi-AZ| is Amazon style. -->"},
"791": {"find": "(\\bMulti-az\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Multi-AZ| is Amazon style. -->"},
"792": {"find": "(\\bmustn't\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"793": {"find": "(\\bnameserver\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |name server| is preferred. -->"},
"794": {"find": "(\\bnavigate[\\s\\n]+to[\\s\\n]+the[\\s\\n]+[A-Z](?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Embolden the names of UI elements. -->"},
"795": {"find": "(\\bNavigate[\\s\\n]+to[\\s\\n]+the[\\s\\n]+[A-Z](?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Embolden the names of UI elements. -->"},
"796": {"find": "(\\bneedn't\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"797": {"find": "(\\bnext[\\s\\n]+release\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Never state something is coming in a future release. It could create a legal problem. -->"},
"798": {"find": "(\\bNGINX\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |NGINX| for the brand. |nginx| for files and code. -->"},
"799": {"find": "(\\bNginx\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |NGINX| for the brand. |nginx| for files and code. -->"},
"800": {"find": "(\\bninety\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Use numerals for numbers greater than nine. -->"},
"801": {"find": "(\\bnot[\\s\\n]+already[\\s\\n]+done[\\s\\n]+so\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Consider if this should be listed as a prerequisite. -->"},
"802": {"find": "(\\bnot[\\s\\n]+recommend\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |VMware discourages| is preferred for closed source. |Cloud Foundry discourages| for open source. -->"},
"803": {"find": "(\\bnot[\\s\\n]+recommended\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |VMware discourages| is preferred for closed source. |Cloud Foundry discourages| for open source. -->"},
"804": {"find": "(\\bnot[\\s\\n]+yet\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- 1st preference: delete. 2nd preference: replace these words with |currently|. -->"},
"805": {"find": "(\\bnote[\\s\\n]+down\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |record| is preferred. -->"},
"806": {"find": "(\\bNote[\\s\\n]+that\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Notes must be in Note boxes and start with |Note: |. -->"},
"807": {"find": "(\\bnote[\\s\\n]+that\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Notes must be in Note boxes and start with |Note: |. -->"},
"808": {"find": "(\\bNotice[\\s\\n]+that\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Notes must be in Note boxes and start with |Note: |. -->"},
"809": {"find": "(\\bnotice[\\s\\n]+that\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Notes must be in Note boxes and start with |Note: |. -->"},
"810": {"find": "(\\bnoting[\\s\\n]+that\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Notes must be in Note boxes and start with |Note: |. -->"},
"811": {"find": "(\\bNov\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |November| is preferred. -->"},
"812": {"find": "(\\bnow[\\s\\n]+[a-z-]*ed[\\s\\n]+by\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Active voice is preferred. -->"},
"813": {"find": "(\\bnow[\\s\\n]+should\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Favour certainty and agency: |the app now works| over |the app should now work|, and |VMware recommends| over |you should|.  -->"},
"814": {"find": "(\\bNozzle\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Only capitalize |nozzle| when it is part of a title -->"},
"815": {"find": "(\\bNSX[\\s\\n]+Edge\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |NSX Edge Services Gateway (ESG)| is preferred. -->"},
"816": {"find": "(\\boAuth\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |OAuth| is preferred. -->"},
"817": {"find": "(\\bOauth\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |OAuth| is preferred. -->"},
"818": {"find": "(\\bOct\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |October| is preferred. -->"},
"819": {"find": "(\\bof[\\s\\n]+your[\\s\\n]+choosing\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |you choose| is snappier and easier for machine translation. -->"},
"820": {"find": "(\\boidc\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |OIDC| is the preferred styling for the OpenID Connect abbreviation. -->"},
"821": {"find": "(\\bOidc\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |OIDC| is the preferred styling for the OpenID Connect abbreviation. -->"},
"822": {"find": "(\\bon-board\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |onboard| (v) is preferred. -->"},
"823": {"find": "(\\bOn-board\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Onboard| (v) is preferred. -->"},
"824": {"find": "(\\bOn-Demand[\\s\\n]+Broker(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Full product title: |on-demand service broker|, short version: |on-demand broker|, initialism: |ODB| -->"},
"825": {"find": "(\\bOn-demand[\\s\\n]+Broker(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Full product title: |on-demand service broker|, short version: |on-demand broker|, initialism: |ODB| -->"},
"826": {"find": "(\\bon[\\s\\n]+demand[\\s\\n]+broker(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Full product title: |on-demand service broker|, short version: |on-demand broker|, initialism: |ODB| -->"},
"827": {"find": "(\\bOn[\\s\\n]+demand[\\s\\n]+broker(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Full product title: |on-demand service broker|, short version: |on-demand broker|, initialism: |ODB| -->"},
"828": {"find": "(\\bOn[\\s\\n]+Demand[\\s\\n]+Broker(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Full product title: |on-demand service broker|, short version: |on-demand broker|, initialism: |ODB| -->"},
"829": {"find": "(\\bOn[\\s\\n]+Demand[\\s\\n]+broker(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Full product title: |on-demand service broker|, short version: |on-demand broker|, initialism: |ODB| -->"},
"830": {"find": "(\\bon[\\s\\n]+demand[\\s\\n]+plan\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |on-demand plan| is preferred. -->"},
"831": {"find": "(\\bOn[\\s\\n]+demand[\\s\\n]+plan\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |on-demand plan| is preferred. -->"},
"832": {"find": "(\\bOn[\\s\\n]+Demand[\\s\\n]+Plan\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |on-demand plan| is preferred. -->"},
"833": {"find": "(\\bOn[\\s\\n]+Demand[\\s\\n]+plan\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |on-demand plan| is preferred. -->"},
"834": {"find": "(\\bonce[\\s\\n]+it\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Only use |once| when you mean |one time|, not when you mean |after|. -->"},
"835": {"find": "(\\bonce[\\s\\n]+the\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Only use |once| when you mean |one time|, not when you mean |after|. -->"},
"836": {"find": "(\\bonce[\\s\\n]+they\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Only use |once| when you mean |one time|, not when you mean |after|. -->"},
"837": {"find": "(\\bonce[\\s\\n]+you\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Only use |once| when you mean |one time|, not when you mean |after|. -->"},
"838": {"find": "(\\bOnce\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Only use |once| when you mean |one time|, not when you mean |after|. -->"},
"839": {"find": "(\\bonsite\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Needs a space or a hyphen. The on-site interview is the last of the three interviews. The training was held on site. -->"},
"840": {"find": "(\\bOperations[\\s\\n]+Manager(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Ops Manager| is preferred. -->"},
"841": {"find": "(\\bOps[\\s\\n]+Man\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Ops Manager| is preferred. -->"},
"842": {"find": "(\\bops[\\s\\n]+manager(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Ops Manager| is preferred. -->"},
"843": {"find": "(\\bOps[\\s\\n]+Manager[\\s\\n]+Director\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |BOSH Director| is preferred. -->"},
"844": {"find": "(\\bOpsMan\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Ops Manager| is preferred. -->"},
"845": {"find": "(\\bOpsManager\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Ops Manager| is preferred. -->"},
"846": {"find": "(\\bopsmanager\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Ops Manager| is preferred. -->"},
"847": {"find": "(\\bOptional[\\s\\n]+[^\\)\\*\\<](?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Our style is (Optional) INSTRUCTION -- as a procedure header or a step. -->"},
"848": {"find": "(\\boptionally\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Our style is (Optional) INSTRUCTION -- as a procedure header or a step. -->"},
"849": {"find": "(\\bOptionally\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Our style is (Optional) INSTRUCTION -- as a procedure header or a step. -->"},
"850": {"find": "(\\borg[\\s\\n]+manager\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Org Manager| is preferred. -->"},
"851": {"find": "(\\bOSBAPI[\\s\\n]+compliant\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |OSBAPI-compliant| is preferred. -->"},
"852": {"find": "(\\bout[\\s\\n]+of[\\s\\n]+memory[\\s\\n]+error\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |out-of-memory error| is preferred. -->"},
"853": {"find": "(\\bOut[\\s\\n]+Of[\\s\\n]+Memory[\\s\\n]+error\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |out-of-memory error| is preferred. -->"},
"854": {"find": "(\\bPAAS\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |PaaS| is preferred. -->"},
"855": {"find": "(\\bparam\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |parameter| is preferred. -->"},
"856": {"find": "(\\bparams\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |parameters| is preferred. -->"},
"857": {"find": "(\\bParams\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Parameters| is preferred. -->"},
"858": {"find": "(\\bPCF[\\s\\n]+dev\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |PCF Dev| is preferred. -->"},
"859": {"find": "(\\bPCF[\\s\\n]+DEV\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |PCF Dev| is preferred. -->"},
"860": {"find": "(\\bPCF[\\s\\n]+Solutions\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The brand name is |Platform Ops|. -->"},
"861": {"find": "(\\bPCFdev\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |PCF Dev| is preferred. -->"},
"862": {"find": "(\\bPCFS\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The brand name is |Platform Ops|. -->"},
"863": {"find": "(\\bperform[\\s\\n]+(\\w+[\\s\\n]+|\\w+[\\s\\n]+\\w+[\\s\\n]+)procedure\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |follow| is preferred over |perform|. -->"},
"864": {"find": "(\\bPerform[\\s\\n]+(\\w+[\\s\\n]+|\\w+[\\s\\n]+\\w+[\\s\\n]+)procedure\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Follow| is preferred over |Perform|. -->"},
"865": {"find": "(\\bperform[\\s\\n]+(\\w+[\\s\\n]+|\\w+[\\s\\n]+\\w+[\\s\\n]+)procedures\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |follow| is preferred over |perform|. -->"},
"866": {"find": "(\\bPerform[\\s\\n]+(\\w+[\\s\\n]+|\\w+[\\s\\n]+\\w+[\\s\\n]+)procedures\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Follow| is preferred over |Perform|. -->"},
"867": {"find": "(\\bperform[\\s\\n]+(\\w+[\\s\\n]+|\\w+[\\s\\n]+\\w+[\\s\\n]+)steps\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |follow| is preferred over |perform|. -->"},
"868": {"find": "(\\bPerform[\\s\\n]+(\\w+[\\s\\n]+|\\w+[\\s\\n]+\\w+[\\s\\n]+)steps\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Follow| is preferred over |Perform|. -->"},
"869": {"find": "(\\bPersistent[\\s\\n]+Volume[\\s\\n]+Claim\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |PersistentVolumeClaim| is preferred. -->"},
"870": {"find": "(\\bPersistent[\\s\\n]+Volume\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |PersistentVolume| is preferred. -->"},
"871": {"find": "(\\bpick[\\s\\n]+and[\\s\\n]+choose\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |choose| alone is fine. -->"},
"872": {"find": "(\\bpicking[\\s\\n]+and[\\s\\n]+choosing\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |choose| alone is fine. -->"},
"873": {"find": "(\\bPID[\\s\\n]+file\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Just |PID| is preferred. -->"},
"874": {"find": "(\\bpid[\\s\\n]+file\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Just |PID| is preferred. -->"},
"875": {"find": "(\\bpidfile\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Just |PID| is preferred. -->"},
"876": {"find": "(\\bPIDfile\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Just |PID| is preferred. -->"},
"877": {"find": "(\\bPivotal,[\\s\\n]+Inc\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Replace with |VMware|. -->"},
"878": {"find": "(\\bPivotal[\\s\\n]+Cloud[\\s\\n]+Foundry[\\s\\n]+Dev\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |PCF Dev| is preferred. -->"},
"879": {"find": "(\\bPivotal[\\s\\n]+Cloud[\\s\\n]+Foundry[\\s\\n]+Solutions\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The brand name is |Platform Ops|. -->"},
"880": {"find": "(\\bPivotal[\\s\\n]+Labs[\\s\\n]+and[\\s\\n]+Services\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The brand name is |VMware Pivotal Labs|. -->"},
"881": {"find": "(\\bPivotal[\\s\\n]+Labs[\\s\\n]+and[\\s\\n]+Strategic[\\s\\n]+Services\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The brand name is |VMware Pivotal Labs|. -->"},
"882": {"find": "(\\bPivotal[\\s\\n]+Services[\\s\\n]+(?!Marketplace)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The brand name is |VMware Pivotal Labs|. -->"},
"883": {"find": "(\\bPivotal[\\s\\n]+Software\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Replace with |VMware|. -->"},
"884": {"find": "(\\bPivotalTracker\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Write |Pivotal Tracker| (first use on page in body text) and then |Tracker| (subsequent uses). -->"},
"885": {"find": "(\\bplain-text\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Replace the hyphen with a space if referring to unformatted text. Delete the hyphen if referring to non-encrypted text. -->"},
"886": {"find": "(\\bplatform[\\s\\n]+control[\\s\\n]+plane\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |CI/CD plane| is preferred. -->"},
"887": {"find": "(\\bplease(?![\\s\\n]+email|[\\s\\n]+contact|[\\s\\n]+send|[\\s\\n]+speak|[\\s\\n]+\\w*[\\s\\n]+\\w*[\\s\\n]+issue|[\\s\\n]+\\w*[\\s\\n]+\\w*[\\s\\n]+ticket)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use unless asking the reader to do you a favor, such as giving feedback. -->"},
"888": {"find": "(\\bPlease(?![\\s\\n]+email|[\\s\\n]+contact|[\\s\\n]+send|[\\s\\n]+speak|[\\s\\n]+\\w*[\\s\\n]+\\w*[\\s\\n]+issue|[\\s\\n]+\\w*[\\s\\n]+\\w*[\\s\\n]+ticket)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use unless asking the reader to do you a favor, such as giving feedback. -->"},
"889": {"find": "(\\bplug-in\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |plugin| is preferred, even though Merriam-Webster prefers the hyphen. -->"},
"890": {"find": "(\\bpod\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Pod| is capitalized per the K8s docs style. -->"},
"891": {"find": "(\\bpods\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Pods| is capitalized per the K8s docs style. -->"},
"892": {"find": "(\\bpoint[\\s\\n]+in[\\s\\n]+time[\\s\\n]+snapshot\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |point-in-time snapshot| is preferred. -->"},
"893": {"find": "(\\bpoint[\\s\\n]+release\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use. v#.## is a |minor release|. v#.#.# is a |patch release|. -->"},
"894": {"find": "(\\bpop-up\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- If referring to a menu that pops up, just write |pop-up| without |menu|. If referring to a dialog box, write |dialog box|. -->"},
"895": {"find": "(\\bpopup\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- If referring to a menu that pops up, just write |pop-up| without |menu|. If referring to a dialog box, write |dialog box|. -->"},
"896": {"find": "(\\bpost[^-](?!res)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Check if a hyphen is missing. -->"},
"897": {"find": "(\\bpostgresSQL\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |PostgreSQL| is preferred. -->"},
"898": {"find": "(\\bPP\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use this acronym for the brand name. -->"},
"899": {"find": "(\\bpp\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use this acronym for the brand name. -->"},
"900": {"find": "(\\bpre-requisite\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |prerequisite| is preferred. -->"},
"901": {"find": "(\\bPre-requisite\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Prerequisite| is preferred. -->"},
"902": {"find": "(\\bpre-requisites\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |prerequisites| is preferred. -->"},
"903": {"find": "(\\bPre-requisites\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Prerequisites| is preferred. -->"},
"904": {"find": "(\\bpre[\\s\\n]+\\w(?!lass)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Check if a hyphen is missing. -->"},
"905": {"find": "(\\bpreprovision\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |pre-provision| is preferred. -->"},
"906": {"find": "(\\bPreprovision\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Pre-provision| is preferred. -->"},
"907": {"find": "(\\bPreprovisioned\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Pre-provisioned| is preferred. -->"},
"908": {"find": "(\\bpreprovisioned\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |pre-provisioned| is preferred. -->"},
"909": {"find": "(\\bprerequisite\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Requirements are things needed to install and run the product. We list them on the product index page. Prerequisites are things needed for a given procedure beyond the product requirements. We list those on the procedure page. -->"},
"910": {"find": "(\\bpresent[\\s\\n]+itself\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |appear| might be better. -->"},
"911": {"find": "(\\bpresented[\\s\\n]+itself\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |appeared| might be better. -->"},
"912": {"find": "(\\bpresents[\\s\\n]+itself\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |appears| might be better. -->"},
"913": {"find": "(\\bprevious[\\s\\n]+step\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Write |earlier in this procedure| or, if referring to a separate procedure, link to it. -->"},
"914": {"find": "(\\bprior[\\s\\n]+to\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |before| is preferred. -->"},
"915": {"find": "(\\bprocfile\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Procfile| is preferred. -->"},
"916": {"find": "(\\bprod\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |production| is preferred. -->"},
"917": {"find": "(\\bProduct[\\s\\n]+Version[\\s\\n]+Matrix\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Product Compatibility Matrix| is preferred. -->"},
"918": {"find": "(\\bprompt\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |dialog box| is preferred. -->"},
"919": {"find": "(\\bQuorum[\\s\\n]+Queue\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |quorum queue| is preferred. -->"},
"920": {"find": "(\\bQuorum[\\s\\n]+Queues\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |quorum queues| is preferred. -->"},
"921": {"find": "(\\bRabbit[\\s\\n]+MQ\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |RabbitMQ| is preferred. -->"},
"922": {"find": "(\\bRabbitMQ[\\s\\n]+dashboard\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |RabbitMQ Management UI| is preferred. -->"},
"923": {"find": "(\\bRabbitMQ[\\s\\n]+Dashboard\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |RabbitMQ Management UI| is preferred. -->"},
"924": {"find": "(\\bRabbitMQ[\\s\\n]+Management[\\s\\n]+Interface\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |RabbitMQ Management UI| is preferred. -->"},
"925": {"find": "(\\bRabbitMq\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |RabbitMQ| is preferred. -->"},
"926": {"find": "(\\bRabbitMQCluster\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |RabbitmqCluster| is preferred. -->"},
"927": {"find": "(\\bRabbitMQcluster\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |RabbitmqCluster| is preferred. -->"},
"928": {"find": "(\\bRabbitmqcluster\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |RabbitmqCluster| is preferred. -->"},
"929": {"find": "(\\bRabbitmqClusters\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The plural form is |`RabbitmqCluster` resources|. -->"},
"930": {"find": "(\\bRam\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |RAM| is preferred. -->"},
"931": {"find": "(\\bram\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |RAM| is preferred. -->"},
"932": {"find": "(\\bre-generate\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |regenerate| is preferred. -->"},
"933": {"find": "(\\bRe-generate\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Re-generate| is preferred. -->"},
"934": {"find": "(\\bre-stage\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |restage| is preferred. -->"},
"935": {"find": "(\\bRe-stage\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Restage| is preferred. -->"},
"936": {"find": "(\\bre-subscribe\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |resubscribe| is preferred. -->"},
"937": {"find": "(\\bRe-subscribe\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Re-subscribe| is preferred. -->"},
"938": {"find": "(\\bread[\\s\\n]+more[\\s\\n]+on\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |read more about| is preferred. -->"},
"939": {"find": "(\\breboot\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |restart| is preferred. -->"},
"940": {"find": "(\\brecommend[\\s\\n]+against\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |VMware discourages| is preferred for closed source. |Cloud Foundry discourages| for open source. -->"},
"941": {"find": "(\\brecommendation[\\s\\n]+on\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- recommendation for -->"},
"942": {"find": "(\\brecommendations[\\s\\n]+on\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- recommendations for -->"},
"943": {"find": "(\\brecommends[\\s\\n]+against\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |VMware discourages| is preferred for closed source. |Cloud Foundry discourages| for open source. -->"},
"944": {"find": "(\\bRecreate(?![\\s\\n]+[A-Z])(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |re-create| is preferred. -->"},
"945": {"find": "(\\brecreate\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |re-create| is preferred. -->"},
"946": {"find": "(\\brecreated\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |re-created| is preferred. -->"},
"947": {"find": "(\\bRecreated\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Re-created| is preferred. -->"},
"948": {"find": "(\\brecreates\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |re-creates| is preferred. -->"},
"949": {"find": "(\\brecreating\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |re-creating| is preferred -->"},
"950": {"find": "(\\bRecreating\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Re-creating| is preferred. -->"},
"951": {"find": "(\\brefarch\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The directory name |plan| is preferred over |refarch|. -->"},
"952": {"find": "(\\brefer[\\s\\n]+to\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- If telling the reader to read something else, use |see|. -->"},
"953": {"find": "(\\bRefer[\\s\\n]+to\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- If telling the reader to read somewhere else, use |See|. -->"},
"954": {"find": "(\\bremove[\\s\\n]+and[\\s\\n]+replace\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Use just |replace|. -->"},
"955": {"find": "(\\bRemove[\\s\\n]+and[\\s\\n]+replace\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Use just |replace|. -->"},
"956": {"find": "(\\bremoved[\\s\\n]+and[\\s\\n]+replaced\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Use just |replaced|. -->"},
"957": {"find": "(\\bRemoved[\\s\\n]+and[\\s\\n]+replaced\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Use just |replaced|. -->"},
"958": {"find": "(\\brepo\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |repository| is preferred. -->"},
"959": {"find": "(\\brequirement\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Requirements are things needed to install and run the product. We list them on the product index page. Prerequisites are things needed for a given procedure beyond the product requirements. We list those on the procedure page. -->"},
"960": {"find": "(\\bResolved\\b[\\s\\n]+\\bIssue\\b(?=\\n+[^:]+\\.)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Add a stem to introduce the resolved issue. -->"},
"961": {"find": "(\\bResolved\\b[\\s\\n]+\\bIssues\\b(?=\\n+[^:]+\\.)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Add a stem to introduce the resolved issues. -->"},
"962": {"find": "(\\brestoration\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Use |restore| as both a verb and a noun. -->"},
"963": {"find": "(\\bresults[\\s\\n]+in\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Consider replacing with |causes|. -->"},
"964": {"find": "(\\bresurrector\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Resurrector| is preferred. -->"},
"965": {"find": "(\\bright[\\s\\n]+hand\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |right-hand| is preferred if modifying a noun, as in |right-hand pane|. -->"},
"966": {"find": "(\\bRMQ[\\s\\n]+dashboard\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |RabbitMQ Management UI| is preferred. -->"},
"967": {"find": "(\\bRMQ[\\s\\n]+Dashboard\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |RabbitMQ Management UI| is preferred. -->"},
"968": {"find": "(\\bRMQ[\\s\\n]+for[\\s\\n]+VMs\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |RabbitMQ for VMs| is preferred. -->"},
"969": {"find": "(\\bRMQ[\\s\\n]+Management[\\s\\n]+Interface\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |RabbitMQ Management UI| is preferred. -->"},
"970": {"find": "(\\broll-out\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |rollout| is preferred. -->"},
"971": {"find": "(\\bRoll-out\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Rollout| is preferred. -->"},
"972": {"find": "(\\brule[\\s\\n]+of[\\s\\n]+thumb\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |rule| or |guideline| is preferred. -->"},
"973": {"find": "(\\bRule[\\s\\n]+of[\\s\\n]+thumb\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Rule| or |Guideline| is preferred. -->"},
"974": {"find": "(\\bRule[\\s\\n]+of[\\s\\n]+Thumb\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Rule| or |Guideline| is preferred. -->"},
"975": {"find": "(\\brun[\\s\\n]+time\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |runtime| is preferred unless referring to the time it takes a program to run. -->"},
"976": {"find": "(\\bRunner[\\s\\n]+VM\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |host VM| is preferred. -->"},
"977": {"find": "(\\bRuntime[\\s\\n]+CredHub\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |runtime CredHub| is preferred. -->"},
"978": {"find": "(\\bruntimes\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |runtime durations| or |runtime environments| is preferred, depending on meaning. -->"},
"979": {"find": "(\\bsanity[\\s\\n]+check\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |confidence test| or |confidence check| is preferred. -->"},
"980": {"find": "(\\bSanity[\\s\\n]+check\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Confidence test| or |Confidence check| is preferred. -->"},
"981": {"find": "(\\bSanity[\\s\\n]+Check\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Confidence Test| or |Confidence Check| is preferred. -->"},
"982": {"find": "(\\bsanity[\\s\\n]+test\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |confidence test| or |confidence check| is preferred. -->"},
"983": {"find": "(\\bSanity[\\s\\n]+test\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Confidence test| or |Confidence check| is preferred. -->"},
"984": {"find": "(\\bSanity[\\s\\n]+Test\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Confidence Test| or |Confidence Check| is preferred. -->"},
"985": {"find": "(\\bsection[\\s\\n]+of[\\s\\n]+the[\\s\\n]+documentation\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Consider deleting |of the documentation|. -->"},
"986": {"find": "(\\bSecure[\\s\\n]+Shell\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |SSH| is preferred. -->"},
"987": {"find": "(\\bSecurity[\\s\\n]+Assertion[\\s\\n]+Markup[\\s\\n]+Language\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Never spell out SAML. -->"},
"988": {"find": "(\\bsecurity[\\s\\n]+assertion[\\s\\n]+markup[\\s\\n]+language\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Never spell out SAML. -->"},
"989": {"find": "(\\bsegregate\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |separate| is preferred. -->"},
"990": {"find": "(\\bSegregate\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Separate| is preferred. -->"},
"991": {"find": "(\\bsegregation\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |separation| is preferred. -->"},
"992": {"find": "(\\bSegregation\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Separation| is preferred. -->"},
"993": {"find": "(\\bselect[\\s\\n]+[A-Z](?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Embolden the names of UI elements that you instruct the reader to interact with. -->"},
"994": {"find": "(\\bSelect[\\s\\n]+[A-Z](?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Embolden the names of UI elements that you instruct the reader to interact with. -->"},
"995": {"find": "(\\bService-Gateway[\\s\\n]+access\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The RabbitMQ feature is |Service-gateway access|. -->"},
"996": {"find": "(\\bService-gateway[\\s\\n]+Access\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The RabbitMQ feature is |Service-gateway access|. -->"},
"997": {"find": "(\\bService-Gateway[\\s\\n]+Access\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The RabbitMQ feature is |Service-gateway access|. -->"},
"998": {"find": "(\\bservice[\\s\\n]+broker[\\s\\n]+API\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Service Broker API| is preferred. -->"},
"999": {"find": "(\\bService[\\s\\n]+Gateway[\\s\\n]+Access\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The RabbitMQ feature is |Service-gateway access|. -->"},
"1000": {"find": "(\\bservice[\\s\\n]+instance[\\s\\n]+credentials\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |binding credentials| is preferred. -->"},
"1001": {"find": "(\\bService[\\s\\n]+Key\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Only capitalize |service key| when it is part of a title -->"},
"1002": {"find": "(\\bservice[\\s\\n]+principle\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- This is likely a misspelling of |service principal|. -->"},
"1003": {"find": "(\\bService[\\s\\n]+principle\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- This is likely a misspelling of |Service principal|. -->"},
"1004": {"find": "(\\bService[\\s\\n]+Principle\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- This is likely a misspelling of |Service Principal|. -->"},
"1005": {"find": "(\\bServices[\\s\\n]+Marketplace\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Marketplace| is preferred. -->"},
"1006": {"find": "(\\bServing[\\s\\n]+component\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- In Knative docs, |Knative Serving| is preferred, sans |component|. -->"},
"1007": {"find": "(\\bserving\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- In Knative docs, |Knative Serving| is preferred. -->"},
"1008": {"find": "(\\bset[\\s\\n]+to[\\s\\n]+off\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |deactivated| might be better. -->"},
"1009": {"find": "(\\bset[\\s\\n]+to[\\s\\n]+on\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |enabled| might be better. -->"},
"1010": {"find": "(\\bsettings[\\s\\n]+data\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |configuration data| is preferred. -->"},
"1011": {"find": "(\\bseventy\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Use numerals for numbers greater than nine. -->"},
"1012": {"find": "(\\bsha\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |SHA| is preferred. -->"},
"1013": {"find": "(\\bshan't\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1014": {"find": "(\\bshared[\\s\\n]+VM[\\s\\n]+plan\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |shared-VM plan| is preferred. -->"},
"1015": {"find": "(\\bShared[\\s\\n]+VM[\\s\\n]+plan\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |shared-VM plan| is preferred. -->"},
"1016": {"find": "(\\bShared[\\s\\n]+VM[\\s\\n]+Plan\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |shared-VM plan| is preferred. -->"},
"1017": {"find": "(\\bshared[\\s\\n]+VM[\\s\\n]+Plan\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |shared-VM plan| is preferred. -->"},
"1018": {"find": "(\\bshe'd\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. Also, |they| is preferred. -->"},
"1019": {"find": "(\\bShe'd\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. Also, |They| is preferred. -->"},
"1020": {"find": "(\\bshe'll\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. Also, |they| is preferred. -->"},
"1021": {"find": "(\\bShe'll\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. Also, |They| is preferred. -->"},
"1022": {"find": "(\\bshe's\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. Also, |they| is preferred. -->"},
"1023": {"find": "(\\bShe's\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. Also, |They| is preferred. -->"},
"1024": {"find": "(\\bshe\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |they| is preferred. -->"},
"1025": {"find": "(\\bShe\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |They| is preferred. -->"},
"1026": {"find": "(\\bShort[\\s\\n]+term\\b[^\\.:;,](?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Short term| is missing a hyphen here if it is a compound adjective. -->"},
"1027": {"find": "(\\bshort[\\s\\n]+term\\b[^\\.:;,](?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |short term| is missing a hyphen here if it is a compound adjective. -->"},
"1028": {"find": "(\\bshould've\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1029": {"find": "(\\bshould[\\s\\n]+now\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Favour certainty and agency: |the app now works| over |the app should now work|. |VMware recommends| over |you should|.  -->"},
"1030": {"find": "(\\bshouldn't\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1031": {"find": "(\\bsimple\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Avoid suggesting an instruction is |simple| or |easy|. -->"},
"1032": {"find": "(\\bsimply\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Avoid suggesting an instruction is |simple| or |easy|. -->"},
"1033": {"find": "(\\bsince\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use |since| where you can use |because|. -->"},
"1034": {"find": "(\\bSince\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use |Since| where you can use |Because|. -->"},
"1035": {"find": "(\\bsingle-sign-on\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- SSO stands for |single sign-on|. Note the casing and hyphen placement. -->"},
"1036": {"find": "(\\bSingle-sign-on\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- SSO stands for |single sign-on|. Note the casing and hyphen placement. -->"},
"1037": {"find": "(\\bSingle-Sign-on\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- SSO stands for |single sign-on|. Note the casing and hyphen placement. -->"},
"1038": {"find": "(\\bSingle-Sign-On\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- SSO stands for |single sign-on|. Note the casing and hyphen placement. -->"},
"1039": {"find": "(\\bSingle[\\s\\n]+sign-on\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- SSO stands for |single sign-on|. Note the casing and hyphen placement. -->"},
"1040": {"find": "(\\bSingle[\\s\\n]+Sign-on\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- SSO stands for |single sign-on|. Note the casing and hyphen placement. -->"},
"1041": {"find": "(\\bSingle[\\s\\n]+Sign-On\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- SSO stands for |single sign-on|. Note the casing and hyphen placement. -->"},
"1042": {"find": "(\\bsixty\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Use numerals for numbers greater than nine. -->"},
"1043": {"find": "(\\bslave\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Preferred alternatives: |secondary|, |worker|. Other alternative: |replica|. -->"},
"1044": {"find": "(\\bSlave\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Preferred alternatives: |Secondary|, |Worker|. Other alternative: |Replica|. -->"},
"1045": {"find": "(\\bslave\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |follower| is preferred. -->"},
"1046": {"find": "(\\bsmoketest\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |smoke test| (n.) or |smoke-test| (adj.) is preferred. -->"},
"1047": {"find": "(\\bSmoketest\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |smoke tests| (n.) or |smoke-tests| (adj.) is preferred. -->"},
"1048": {"find": "(\\bsmoketests\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |smoke tests| (n.) or |smoke-tests| (adj.) is preferred. -->"},
"1049": {"find": "(\\bSmoketests\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |smoke tests| (n.) or |smoke-tests| (adj.) is preferred. -->"},
"1050": {"find": "(\\bsocks\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |SOCKS| is preferred. Do not spell it out, even on first use. -->"},
"1051": {"find": "(\\bSocks\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |SOCKS| is preferred. Do not spell it out, even on first use. -->"},
"1052": {"find": "(\\bsomebody's\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1053": {"find": "(\\bSomebody's\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1054": {"find": "(\\bsomeone's\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1055": {"find": "(\\bSomeone's\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1056": {"find": "(\\bspec\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |specifications| is preferred. -->"},
"1057": {"find": "(\\bspecs\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |specifications| is preferred. -->"},
"1058": {"find": "(\\bSpring[\\s\\n]+\\d\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Spring Framework #| is preferred. -->"},
"1059": {"find": "(\\bSpring[\\s\\n]+Cloud[\\s\\n]+DataFlow\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Spring Cloud Data Flow| is preferred. -->"},
"1060": {"find": "(\\bSpring[\\s\\n]+framework[\\s\\n]+\\d(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Spring Framework #| is preferred. -->"},
"1061": {"find": "(\\bspringboot\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Spring Boot| is preferred. -->"},
"1062": {"find": "(\\bSpringBoot\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Spring Boot| is preferred. -->"},
"1063": {"find": "(\\bssh\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |SSH| is preferred. -->"},
"1064": {"find": "(\\bstandard[\\s\\n]+error\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |stderr| is preferred. -->"},
"1065": {"find": "(\\bstandard[\\s\\n]+input\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |stdin| is preferred. -->"},
"1066": {"find": "(\\bstandard[\\s\\n]+output\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |stdout| is preferred. -->"},
"1067": {"find": "(\\bstanza\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |section| is preferred. -->"},
"1068": {"find": "(\\bstatefulset\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |StatefulSet| is the K8s docs style. -->"},
"1069": {"find": "(\\bStatefulset\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |StatefulSet| is the K8s docs style. -->"},
"1070": {"find": "(\\bstatefulsets\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |StatefulSet| is the K8s docs style. -->"},
"1071": {"find": "(\\bStatefulsets\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |StatefulSet| is the K8s docs style. -->"},
"1072": {"find": "(\\bSTDERR\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |stderr| is preferred. -->"},
"1073": {"find": "(\\bSTDIN\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |stdin| is preferred. -->"},
"1074": {"find": "(\\bSTDOUT\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |stdout| is preferred. -->"},
"1075": {"find": "(\\bstem-cell\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |stemcell| is preferred. -->"},
"1076": {"find": "(\\bstem[\\s\\n]+cell\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |stemcell| is preferred. -->"},
"1077": {"find": "(\\bStemCell\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |stemcell| is preferred. -->"},
"1078": {"find": "(\\bsteps[\\s\\n]+\\w*:(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- To introduce steps just write |To do x:| -->"},
"1079": {"find": "(\\bsteps[\\s\\n]+on[\\s\\n]+[a-z]*ing\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |steps for doing x| is more natural English than |steps on doing x| -->"},
"1080": {"find": "(\\bSteps[\\s\\n]+on[\\s\\n]+[a-z]*ing\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Steps for doing x| is more natural English than |Steps on doing x| -->"},
"1081": {"find": "(\\bstorageClass\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |StorageClass| is the K8s docs style. -->"},
"1082": {"find": "(\\bStorageClasses\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |storage classes| is preferred. Although, for k8s, the singular is |StorageClass|. -->"},
"1083": {"find": "(\\bstorageclasses\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |storage classes| is preferred. Although, for k8s, the singular is |StorageClass|. -->"},
"1084": {"find": "(\\bstrongly\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Consider deleting, especially if it precedes |recommend|. -->"},
"1085": {"find": "(\\bsub-directory\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |subdirectory| is preferred. -->"},
"1086": {"find": "(\\bsub-property\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |subproperty| is preferred. -->"},
"1087": {"find": "(\\bsuffer\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Preferred alternatives are |decrease|, |lessen|, |shrink|, |increase|, and |grow|. -->"},
"1088": {"find": "(\\bSuffer\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Preferred alternatives are |Decrease|, |Lessen|, |Shrink|, |Increase|, and |Grow|. -->"},
"1089": {"find": "(\\bsuite\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Only use |suite| when describing a bundle of products sold together under a single SKU. -->"},
"1090": {"find": "(\\bsuper[\\s\\n]+user\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |superuser| is preferred. -->"},
"1091": {"find": "(\\bSuper[\\s\\n]+user\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Superuser| is preferred. -->"},
"1092": {"find": "(\\bsynch\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |sync| is preferred. -->"},
"1093": {"find": "(\\bsynchronize\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |sync| is preferred. -->"},
"1094": {"find": "(\\bsynchronized\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |synced| is preferred. -->"},
"1095": {"find": "(\\btable\\>[\\s\\n]*\\*(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Put the asterisk in superscript tags. -->"},
"1096": {"find": "(\\bTanzu[\\s\\n]+Net\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |VMware Tanzu Network| is preferred. -->"},
"1097": {"find": "(\\btanzu\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The brand is |Tanzu|. -->"},
"1098": {"find": "(\\bTanzuNet\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |VMware Tanzu Network| is preferred. -->"},
"1099": {"find": "(\\bTAP\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Tanzu Application Platform| is preferred. -->"},
"1100": {"find": "(\\btar\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |TAR| is preferred. -->"},
"1101": {"find": "(\\bTasks\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |tasks| is preferred. -->"},
"1102": {"find": "(\\bterminal[\\s\\n]+emulator\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |shell| is preferred. -->"},
"1103": {"find": "(\\btext[\\s\\n]+area\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |field| is preferred. -->"},
"1104": {"find": "(\\btextbox\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |field| is preferred. -->"},
"1105": {"find": "(\\bthat'll\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1106": {"find": "(\\bThat'll\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1107": {"find": "(\\bthat's\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1108": {"find": "(\\bThat's\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1109": {"find": "(\\bthat[\\s\\n]+are[\\s\\n]+in[\\s\\n]+effect\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Redundant? -->"},
"1110": {"find": "(\\bthat[\\s\\n]+is[\\s\\n]+in[\\s\\n]+effect\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Redundant? -->"},
"1111": {"find": "(\\bthat[\\s\\n]+know\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Avoid anthropomorphizing: |that can| or |that detects| might be better here. -->"},
"1112": {"find": "(\\bthat[\\s\\n]+knows\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Avoid anthropomorphizing: |that can| or |that detects| might be better here. -->"},
"1113": {"find": "(\\bthe[\\s\\n]+(?!above|below|first|following|last|next|previous|same)[a-z-]*(?=[\\s\\n]+command\\b)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Missing code tags? -->"},
"1114": {"find": "(\\bThe[\\s\\n]+(?!above|below|first|following|last|next|previous|same)[a-z-]*(?=[\\s\\n]+command\\b)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Missing code tags? -->"},
"1115": {"find": "(\\bthe[\\s\\n]+[A-Za-z-]+[\\s\\n]+process\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Avoid nominalization: |while deleting| is better than |during the deletion process|. -->"},
"1116": {"find": "(\\bThe[\\s\\n]+[A-Za-z-]+[\\s\\n]+process\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Avoid nominalization: |while deleting| is better than |during the deletion process|. -->"},
"1117": {"find": "(\\bthe[\\s\\n]+ability[\\s\\n]+to\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |can| is shorter. Avoid nounification of verbs where possible. -->"},
"1118": {"find": "(\\bthe[\\s\\n]+Apps[\\s\\n]+Manager\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Just |Apps Manager| is preferred -- there is no preceding |the|. -->"},
"1119": {"find": "(\\bthe[\\s\\n]+deploy\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |the deployment| is preferred. -->"},
"1120": {"find": "(\\bThe[\\s\\n]+deploy\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |The deployment| is preferred. -->"},
"1121": {"find": "(\\bthe[\\s\\n]+following[\\s\\n]+commands\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |these commands| is preferred -->"},
"1122": {"find": "(\\bthe[\\s\\n]+GUI\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |UI| is preferred. -->"},
"1123": {"find": "(\\bThe[\\s\\n]+GUI\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |UI| is preferred. -->"},
"1124": {"find": "(\\bthe[\\s\\n]+install\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |the installation| is preferred. -->"},
"1125": {"find": "(\\bthe[\\s\\n]+machine\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |the local machine| is preferred. -->"},
"1126": {"find": "(\\bthe[\\s\\n]+toggle\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use |toggle|. Do not use |Option button|. You may use |radio button|; but, in general, try to avoid referring to the button and instead write |Click BUTTON-TEXT|. -->"},
"1127": {"find": "(\\bthere's\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1128": {"find": "(\\bThere's\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1129": {"find": "(\\bthey'd\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1130": {"find": "(\\bThey'd\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1131": {"find": "(\\bthey'll\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1132": {"find": "(\\bThey'll\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1133": {"find": "(\\bthey're\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1134": {"find": "(\\bThey're\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1135": {"find": "(\\bthey've\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1136": {"find": "(\\bThey've\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1137": {"find": "(\\bthey've\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1138": {"find": "(\\bThey've\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1139": {"find": "(\\bthirty\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Use numerals for numbers greater than nine. -->"},
"1140": {"find": "(\\bthrice\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |three times| is preferred. -->"},
"1141": {"find": "(\\bthus\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Re-write the sentence to drop |thus| or, if that is not possible, replace with |therefore|. -->"},
"1142": {"find": "(\\bThus\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Re-write the sentence to drop |Thus| or, if that is not possible, replace with |therefore|. -->"},
"1143": {"find": "(\\bTick\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- For checkboxes, |Enable| or |Select| is preferred. -->"},
"1144": {"find": "(\\btime[\\s\\n]+out\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |timeout| is preferred, both as a noun and a verb. -->"},
"1145": {"find": "(\\btime[\\s\\n]+to[\\s\\n]+live[\\s\\n]+(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |TTL| after first use. -->"},
"1146": {"find": "(\\bTKGm\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |TKG| is preferred. -->"},
"1147": {"find": "(\\bto[\\s\\n]+login\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Use |login| (n) and |log in| (v). -->"},
"1148": {"find": "(\\bto[\\s\\n]+setup\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |set up| is the action. |setup| is a noun. -->"},
"1149": {"find": "(\\bTo[\\s\\n]+setup\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |set up| is the action. |setup| is a noun. -->"},
"1150": {"find": "(\\bTraffic-controller\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Traffic Controller| is preferred. -->"},
"1151": {"find": "(\\bTraffic-Controller\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Traffic Controller| is preferred. -->"},
"1152": {"find": "(\\bTrafficController\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Traffic Controller| is preferred. -->"},
"1153": {"find": "(\\bTransmission[\\s\\n]+Control[\\s\\n]+Protocol\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |TCP| is preferred. -->"},
"1154": {"find": "(\\bTransport[\\s\\n]+layer[\\s\\n]+security(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |TLS| after the first use. -->"},
"1155": {"find": "(\\bTransport[\\s\\n]+Layer[\\s\\n]+Security(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |TLS| after the first use. -->"},
"1156": {"find": "(\\btransport[\\s\\n]+layer[\\s\\n]+security(?!\\s\\()(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Shorten to |TLS| after the first use. -->"},
"1157": {"find": "(\\btriple-parens[\\s\\n]+expression\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |triple-parentheses expression| is preferred. -->"},
"1158": {"find": "(\\bTurn[\\s\\n]+off\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |record| is preferred. -->"},
"1159": {"find": "(\\bturn[\\s\\n]+off\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |deactivate| is preferred. -->"},
"1160": {"find": "(\\bTurn[\\s\\n]+on\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |record| is preferred. -->"},
"1161": {"find": "(\\bturn[\\s\\n]+on\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |enable| is preferred. -->"},
"1162": {"find": "(\\btwenty\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Use numerals for numbers greater than nine. -->"},
"1163": {"find": "(\\btwo[\\s\\n]+times\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |twice| is preferred. -->"},
"1164": {"find": "(\\btype:(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |run:| is preferred. -->"},
"1165": {"find": "(\\btype[\\s\\n]+the[\\s\\n]+following\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |To X, run:| and |X by running:| are preferred. -->"},
"1166": {"find": "(\\bUAA[\\s\\n]+Client\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |UAA Command Line Client (UAAC)| is preferred for use. |UAAC| thereafter. -->"},
"1167": {"find": "(\\bUAA[\\s\\n]+Command[\\s\\n]+Client\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |UAA Command Line Client (UAAC)| is preferred for use. |UAAC| thereafter. -->"},
"1168": {"find": "(\\bUAA[\\s\\n]+command[\\s\\n]+line\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |UAA Command Line Client (UAAC)| is preferred for use. |UAAC| thereafter. -->"},
"1169": {"find": "(\\buaac\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |UAAC| is preferred. -->"},
"1170": {"find": "(\\bun-check\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Deactivate the LABEL-NAME checkbox| is preferred. Likewise for |Enable the LABEL-NAME checkbox|. -->"},
"1171": {"find": "(\\bun-register\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- deregister -->"},
"1172": {"find": "(\\bun-tick\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Deactivate the LABEL-NAME checkbox| is preferred. Likewise for |Enable the LABEL-NAME checkbox|. -->"},
"1173": {"find": "(\\buncheck\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Deactivate the LABEL-NAME checkbox| is preferred. Likewise for |Enable the LABEL-NAME checkbox|. -->"},
"1174": {"find": "(\\bUnderstanding\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- If a procedural topic title, go with |How to...|. If a conceptual title, go with |About...| or |Overview of...| or nothing at all. -->"},
"1175": {"find": "(\\bUniform[\\s\\n]+Resource[\\s\\n]+Locator\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |URL| is preferred. -->"},
"1176": {"find": "(\\bunix\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Unix| is preferred. -->"},
"1177": {"find": "(\\bUNIX\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Unix| is preferred. -->"},
"1178": {"find": "(\\bunregister\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |deregister| is preferred. -->"},
"1179": {"find": "(\\bunsecure\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |not secure| is preferred. -->"},
"1180": {"find": "(\\bUnsecure\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Not secure| is preferred. -->"},
"1181": {"find": "(\\buntick\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Deactivate the LABEL-NAME checkbox| is preferred. Likewise for |Enable the LABEL-NAME checkbox|. -->"},
"1182": {"find": "(\\bupgradeable\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |upgradable| is preferred. -->"},
"1183": {"find": "(\\bupper[\\s\\n]+case\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |uppercase| is preferred. -->"},
"1184": {"find": "(\\bupscale\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |scale up| is preferred. -->"},
"1185": {"find": "(\\bUrl\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |URL| is preferred. -->"},
"1186": {"find": "(\\bURl\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |URL| is preferred. -->"},
"1187": {"find": "(\\burl\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |URL| is preferred. -->"},
"1188": {"find": "(\\bus\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Specify the party (VMware, Cloud Foundry, etc). -->"},
"1189": {"find": "(\\busage[\\s\\n]+data\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |consumption data| is preferred. -->"},
"1190": {"find": "(\\busage[\\s\\n]+service\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Usage service| is preferred. -->"},
"1191": {"find": "(\\bUsage[\\s\\n]+Service\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Usage service| is preferred. -->"},
"1192": {"find": "(\\buse[\\s\\n]+the[\\s\\n]+command[\\s\\n]+line\\b(?![\\s\\n]+interface)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |command line interface| on first use. |CLI| thereafter. -->"},
"1193": {"find": "(\\buse[\\s\\n]+the[\\s\\n]+command\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |run| is preferred. -->"},
"1194": {"find": "(\\buser[\\s\\n]+interface\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |UI| is preferred. -->"},
"1195": {"find": "(\\buser[\\s\\n]+name\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |username| is preferred. -->"},
"1196": {"find": "(\\bUser[\\s\\n]+name\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Username| is preferred. -->"},
"1197": {"find": "(\\busername\\/password[\\s\\n]+pair\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |username-password pair| is preferred. -->"},
"1198": {"find": "(\\bUsername\\/password[\\s\\n]+pair\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Username-password pair| is preferred. -->"},
"1199": {"find": "(\\busername\\/password[\\s\\n]+pairs\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |username-password pairs| is preferred. -->"},
"1200": {"find": "(\\bUsername\\/password[\\s\\n]+pairs\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Username-password pairs| is preferred. -->"},
"1201": {"find": "(\\busing[\\s\\n]+the[\\s\\n]+command[\\s\\n]+line\\b(?![\\s\\n]+interface)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |command line interface| on first use. |CLI| thereafter. -->"},
"1202": {"find": "(\\busing[\\s\\n]+the[\\s\\n]+command\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |running| is preferred. -->"},
"1203": {"find": "(\\butili[zs]\\w*(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- To |utilize| is to use an item beyond its intended purpose. Otherwise you simply |use| it. -->"},
"1204": {"find": "(\\bUtili[zs]\\w*(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- To |utilize| is to use an item beyond its intended purpose. Otherwise you simply |use| it. -->"},
"1205": {"find": "(\\buuid\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |UUID| is preferred. -->"},
"1206": {"find": "(\\bValidate[\\s\\n]+that\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Verify that| is plainer English. -->"},
"1207": {"find": "(\\bvalidate[\\s\\n]+that\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |verify that| is plainer English. -->"},
"1208": {"find": "(\\bVerify[\\s\\n]+if\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Verify that| is better. -->"},
"1209": {"find": "(\\bverify[\\s\\n]+if\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |verify that| is better. -->"},
"1210": {"find": "(\\bversion[\\s\\n]+[\\d\\.]+(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |v#| is the preferred style. -->"},
"1211": {"find": "(\\bVersion[\\s\\n]+[\\d\\.]+(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |v#| is the preferred style. -->"},
"1212": {"find": "(\\bversions[\\s\\n]+[\\d\\.]+(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |v#| is the preferred style. -->"},
"1213": {"find": "(\\bVersions[\\s\\n]+[\\d\\.]+(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |v#| is the preferred style. -->"},
"1214": {"find": "(\\bVersions[\\s\\n]+\\<\\= [\\d\\.]+(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |v#| is the preferred style. -->"},
"1215": {"find": "(\\bversions[\\s\\n]+\\<\\= [\\d\\.]+(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |v# or earlier| is the preferred style. -->"},
"1216": {"find": "(\\bVersions[\\s\\n]+\\>\\=[\\s\\n]+[\\d\\.]+(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |v#| is the preferred style. -->"},
"1217": {"find": "(\\bversions[\\s\\n]+\\>\\=[\\s\\n]+[\\d\\.]+(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |v# or earlier| is the preferred style. -->"},
"1218": {"find": "(\\bvhost\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |virtual host| is preferred. -->"},
"1219": {"find": "(\\bVhost\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |virtual host| is preferred. -->"},
"1220": {"find": "(\\bvia\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |through|, |using| and |by means of| are preferred. -->"},
"1221": {"find": "(\\bvim\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The text editor is called |Vim|. -->"},
"1222": {"find": "(\\bVIM\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The text editor is called |Vim|. -->"},
"1223": {"find": "(\\bVirtual[\\s\\n]+Machine[\\s\\n]+Metrics\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |BOSH health metrics| is preferred. -->"},
"1224": {"find": "(\\bvirtual[\\s\\n]+machine\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |VM| is preferred. -->"},
"1225": {"find": "(\\bvm\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |VM| is preferred. -->"},
"1226": {"find": "(\\bVMT[\\s\\n]+network(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |VMware Tanzu Network| is preferred. -->"},
"1227": {"find": "(\\bVMT[\\s\\n]+Network(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |VMware Tanzu Network| is preferred. -->"},
"1228": {"find": "(\\bVMTN(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |VMware Tanzu Network| is preferred. -->"},
"1229": {"find": "(\\bVMware[\\s\\n]+Network(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |VMware Tanzu Network| is preferred. -->"},
"1230": {"find": "(\\bVMware[\\s\\n]+network(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |VMware Tanzu Network| is preferred. -->"},
"1231": {"find": "(\\bVMware[\\s\\n]+Tanzu[\\s\\n]+network(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |VMware Tanzu Network| is preferred. -->"},
"1232": {"find": "(\\bVMWare\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |VMware| is preferred. -->"},
"1233": {"find": "(\\bVmware\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |VMware| is preferred. -->"},
"1234": {"find": "(\\bVmWare\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |VMware| is preferred. -->"},
"1235": {"find": "(\\bvmware\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |VMware| is preferred. -->"},
"1236": {"find": "(\\bVoluminous\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Very long| and |Very large| are plainer alternatives. -->"},
"1237": {"find": "(\\bvoluminous\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |very long| and |very large| are plainer alternatives. -->"},
"1238": {"find": "(\\bwalk[\\s\\n]+you[\\s\\n]+through\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |is about| is shorter and less colloquial. -->"},
"1239": {"find": "(\\bwalks[\\s\\n]+you[\\s\\n]+through\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |is about| is shorter and less colloquial. -->"},
"1240": {"find": "(\\bwar[\\s\\n]+room\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |operations room| or |ops room| is preferred. -->"},
"1241": {"find": "(\\bWar[\\s\\n]+room\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Operations room| or |ops room| is preferred. -->"},
"1242": {"find": "(\\bWar[\\s\\n]+Room\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Operations Room| or |Ops Room| is preferred. -->"},
"1243": {"find": "(\\bwarning[\\s\\n]+box\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |dialog box| is preferred. -->"},
"1244": {"find": "(\\bWarning[\\s\\n]+box\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |dialog box| is preferred. -->"},
"1245": {"find": "(\\bWarning[\\s\\n]+window\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |dialog box| is preferred. -->"},
"1246": {"find": "(\\bwarning[\\s\\n]+window\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |dialog box| is preferred. -->"},
"1247": {"find": "(\\bWARNING\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Warning| is preferred. -->"},
"1248": {"find": "(\\bwasn't\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1249": {"find": "(\\bwe'd\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Specify the party (VMware, Cloud Foundry, etc) and do not use contractions. -->"},
"1250": {"find": "(\\bWe'd\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Specify the party (VMware, Cloud Foundry, etc) and do not use contractions. -->"},
"1251": {"find": "(\\bwe'll\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Specify the party (VMware, Cloud Foundry, etc) and do not use contractions. -->"},
"1252": {"find": "(\\bWe'll\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Specify the party (VMware, Cloud Foundry, etc) and do not use contractions. -->"},
"1253": {"find": "(\\bwe're\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Specify the party (VMware, Cloud Foundry, etc) and do not use contractions. -->"},
"1254": {"find": "(\\bWe're\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Specify the party (VMware, Cloud Foundry, etc) and do not use contractions. -->"},
"1255": {"find": "(\\bwe've\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Specify the party (VMware, Cloud Foundry, etc) and do not use contractions. -->"},
"1256": {"find": "(\\bWe've\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Specify the party (VMware, Cloud Foundry, etc) and do not use contractions. -->"},
"1257": {"find": "(\\bwe\\b[^'](?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Specify the party (VMware, Cloud Foundry, etc). -->"},
"1258": {"find": "(\\bWe\\b[^'](?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Specify the party (VMware, Cloud Foundry, etc). -->"},
"1259": {"find": "(\\bweb[\\s\\n]+site\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |website| is preferred. -->"},
"1260": {"find": "(\\bwebdav\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |WebDAV| is preferred. -->"},
"1261": {"find": "(\\bWebDav\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |WebDAV| is preferred. -->"},
"1262": {"find": "(\\bWebSockets\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |WebSocket| is preferred: there is a WebSocket protocol, not multiple WebSockets. -->"},
"1263": {"find": "(\\bweren't\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1264": {"find": "(\\bwhat's\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1265": {"find": "(\\bWhat's\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1266": {"find": "(\\bwhen[\\s\\n]+satisfied\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Redundant? -->"},
"1267": {"find": "(\\bWhen[\\s\\n]+satisfied\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Redundant? -->"},
"1268": {"find": "(\\bwhen[\\s\\n]+you[\\s\\n]+are[\\s\\n]+satisfied\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Redundant? -->"},
"1269": {"find": "(\\bWhen[\\s\\n]+you[\\s\\n]+are[\\s\\n]+satisfied\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Redundant? -->"},
"1270": {"find": "(\\bWhere[\\s\\n]+[A-Z\\-\\_]+[\\s\\n]+is\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Place backticks or code tags around the placeholder. -->"},
"1271": {"find": "(\\bwhether[\\s\\n]+or[\\s\\n]+not\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |whether| is more succinct. -->"},
"1272": {"find": "(\\bwhile[\\s\\n]+concurrently\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Redundant use of |concurrently|? -->"},
"1273": {"find": "(\\bwhile[\\s\\n]+simultaneously\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Redundant use of |simultaneously|? -->"},
"1274": {"find": "(\\bWhile\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Replace with |Although| if it makes sense to do so. -->"},
"1275": {"find": "(\\bwhite-list\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Preferred noun: |allowlist|. Other alternatives: |safelist|, |acceptlist|, |approved list|. Preferred verb: |allow|. Other alternative: |approve|. -->"},
"1276": {"find": "(\\bWhite-list\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Preferred noun: |Allowlist|. Other alternatives: |Safelist|, |Acceptlist|, |Approved list|. Preferred verb: |Allow|. Other alternative: |Approve|. -->"},
"1277": {"find": "(\\bwhite[\\s\\n]+hat\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |ethical| is preferred. -->"},
"1278": {"find": "(\\bWhite[\\s\\n]+hat\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Ethical| is preferred. -->"},
"1279": {"find": "(\\bWhite[\\s\\n]+Hat\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Ethical| is preferred. -->"},
"1280": {"find": "(\\bwhite[\\s\\n]+list\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Preferred noun: |allowlist|. Other alternatives: |safelist|, |acceptlist|, |approved list|. Preferred verb: |allow|. Other alternative: |approve|. -->"},
"1281": {"find": "(\\bWhite[\\s\\n]+list\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Preferred noun: |Allowlist|. Other alternatives: |Safelist|, |Acceptlist|, |Approved list|. Preferred verb: |Allow|. Other alternative: |Approve|. -->"},
"1282": {"find": "(\\bwhitelist\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Preferred noun: |allowlist|. Other alternatives: |safelist|, |acceptlist|, |approved list|. Preferred verb: |allow|. Other alternative: |approve|. -->"},
"1283": {"find": "(\\bWhitelist\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Preferred noun: |Allowlist|. Other alternatives: |Safelist|, |Acceptlist|, |Approved list|. Preferred verb: |Allow|. Other alternative: |Approve|. -->"},
"1284": {"find": "(\\bwho'll\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1285": {"find": "(\\bwho's\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1286": {"find": "(\\bwill\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Avoid |will|: present tense is preferred. -->"},
"1287": {"find": "(\\bWire\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |sync| is preferred. -->"},
"1288": {"find": "(\\bwire\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |sync| is preferred. -->"},
"1289": {"find": "(\\bWiring\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |sync| is preferred. -->"},
"1290": {"find": "(\\bwiring\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |sync| is preferred. -->"},
"1291": {"find": "(\\bwish\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |want| is preferred. -->"},
"1292": {"find": "(\\bwon't\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1293": {"find": "(\\bwould[\\s\\n]+like\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |want| is preferred. -->"},
"1294": {"find": "(\\bwould\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Re-phrase for present tense if possible. -->"},
"1295": {"find": "(\\bwouldn't\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1296": {"find": "(\\bwrite[\\s\\n]+down\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |record| is preferred. -->"},
"1297": {"find": "(\\by'all\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1298": {"find": "(\\bY'all\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1299": {"find": "(\\bYaml\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |YAML| is preferred. -->"},
"1300": {"find": "(\\bYML[\\s\\n]+file\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |YAML file| is preferred. -->"},
"1301": {"find": "(\\byou'd\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1302": {"find": "(\\bYou'd\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1303": {"find": "(\\byou'll\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1304": {"find": "(\\bYou'll\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1305": {"find": "(\\byou're\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1306": {"find": "(\\bYou're\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1307": {"find": "(\\byou've\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1308": {"find": "(\\bYou've\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Do not use contractions. -->"},
"1309": {"find": "(\\byou[\\s\\n]+can[\\s\\n]+run\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Maybe replace with just |run|. -->"},
"1310": {"find": "(\\byou[\\s\\n]+choose[\\s\\n]+to\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Consider if |choose| is redundant. -->"},
"1311": {"find": "(\\byou[\\s\\n]+like\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Translation engines might struggle with this. -->"},
"1312": {"find": "(\\byou[\\s\\n]+might[\\s\\n]+want\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- If possible, replace with |VMware recommends| (or |Cloud Foundry recommends| if open source) or re-phrase as a mandate. -->"},
"1313": {"find": "(\\byou[\\s\\n]+need[\\s\\n]+to\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Consider replacing with just |To|. -->"},
"1314": {"find": "(\\bYou[\\s\\n]+need[\\s\\n]+to\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Consider replacing with just |To|. -->"},
"1315": {"find": "(\\byour[\\s\\n]+machine\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |your local machine| is preferred. -->"},
"1316": {"find": "(\\byoutube\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The brand name is |YouTube|. -->"},
"1317": {"find": "(\\bYoutube\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The brand name is |YouTube|. -->"},
"1318": {"find": "(\\d.[\\s\\n]First(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |First| is redundant if following a numbered step. -->"},
"1319": {"find": "(\\d.[\\s\\n]Next(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Next| is redundant if following a numbered step. -->"},
"1320": {"find": "(\\d.[\\s\\n]Now(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Now| is redundant if following a numbered step. -->"},
"1321": {"find": "(\\d.[\\s\\n]Then(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Then| is redundant if following a numbered step. -->"},
"1322": {"find": "(\\d[\\s\\n]+and[\\s\\n]+above\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |# and later| is preferred. -->"},
"1323": {"find": "(\\d[\\s\\n]+and[\\s\\n]+below\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |# and earlier| is preferred. -->"},
"1324": {"find": "(\\d[\\s\\n]+and[\\s\\n]+greater\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |# and later| is preferred. -->"},
"1325": {"find": "(\\d[\\s\\n]+and[\\s\\n]+higher\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |# and later| is preferred. -->"},
"1326": {"find": "(\\d[\\s\\n]+and[\\s\\n]+lower\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |# and earlier| is preferred. -->"},
"1327": {"find": "(\\d[\\s\\n]+bit\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Missing the dash: 128-bit is grammatically correct; 128 bit is not. -->"},
"1328": {"find": "(\\d[\\s\\n]+CPUs\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |&nbsp;CPUs| is preferred. -->"},
"1329": {"find": "(\\d[\\s\\n]+GB\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |&nbsp;GB| is preferred. -->"},
"1330": {"find": "(\\d[\\s\\n]+KB\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |&nbsp;KB| is preferred. -->"},
"1331": {"find": "(\\d[\\s\\n]+MB\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |&nbsp;MB| is preferred. -->"},
"1332": {"find": "(\\d[\\s\\n]+or[\\s\\n]+above\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |# or later| is preferred. -->"},
"1333": {"find": "(\\d[\\s\\n]+or[\\s\\n]+below\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |# or earlier| is preferred. -->"},
"1334": {"find": "(\\d[\\s\\n]+or[\\s\\n]+greater\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |# or later| is preferred. -->"},
"1335": {"find": "(\\d[\\s\\n]+or[\\s\\n]+higher\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |# or later| is preferred. -->"},
"1336": {"find": "(\\d[\\s\\n]+or[\\s\\n]+lower\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |# or earlier| is preferred. -->"},
"1337": {"find": "(\\d\\.\\*(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |v1.2.x| is preferred for describing multiple patches for a given minor. -->"},
"1338": {"find": "(\\d&nbsp;bit\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Missing the dash: 128-bit is grammatically correct; 128 bit is not. -->"},
"1339": {"find": "(\\d+(st|nd|rd|th|)[\\s\\n]+April\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The date format is |MONTH DD, YYYY| -->"},
"1340": {"find": "(\\d+(st|nd|rd|th|)[\\s\\n]+August\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The date format is |MONTH DD, YYYY| -->"},
"1341": {"find": "(\\d+(st|nd|rd|th|)[\\s\\n]+December\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The date format is |MONTH DD, YYYY| -->"},
"1342": {"find": "(\\d+(st|nd|rd|th|)[\\s\\n]+February\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The date format is |MONTH DD, YYYY| -->"},
"1343": {"find": "(\\d+(st|nd|rd|th|)[\\s\\n]+January\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The date format is |MONTH DD, YYYY| -->"},
"1344": {"find": "(\\d+(st|nd|rd|th|)[\\s\\n]+July\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The date format is |MONTH DD, YYYY| -->"},
"1345": {"find": "(\\d+(st|nd|rd|th|)[\\s\\n]+June\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The date format is |MONTH DD, YYYY| -->"},
"1346": {"find": "(\\d+(st|nd|rd|th|)[\\s\\n]+March\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The date format is |MONTH DD, YYYY| -->"},
"1347": {"find": "(\\d+(st|nd|rd|th|)[\\s\\n]+May\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The date format is |MONTH DD, YYYY| -->"},
"1348": {"find": "(\\d+(st|nd|rd|th|)[\\s\\n]+November\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The date format is |MONTH DD, YYYY| -->"},
"1349": {"find": "(\\d+(st|nd|rd|th|)[\\s\\n]+October\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The date format is |MONTH DD, YYYY| -->"},
"1350": {"find": "(\\d+(st|nd|rd|th|)[\\s\\n]+September\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- The date format is |MONTH DD, YYYY| -->"},
"1351": {"find": "(\\dGB\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |&nbsp;GB| is preferred. -->"},
"1352": {"find": "(\\dKB\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |&nbsp;KB| is preferred. -->"},
"1353": {"find": "(\\w.*\\n+#[^#](?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Only the topic title should be header level 1. -->"},
"1354": {"find": "(#[\\s\\n]+Prerequisites[\\s\\n]+[-\\*+](?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Add a stem sentence: |To install x you must have installed:| -->"},
"1355": {"find": "(#[\\s\\n]+Requirements[\\s\\n]+[-\\*+](?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Add a stem sentence: |To install x you must have installed:| -->"},
"1356": {"find": "(^(?!\\n)[\\*\\+\\-]\\s[A-Z-]{2,}(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Enclose placeholders in code tags. -->"},
"1357": {"find": "(^(?!\\n)\\*\\s(?!(\\*\\*|\\<strong|\\<b))[^:`\\n]*:(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Embolden run-in headings. -->"},
"1358": {"find": "(^(?!\\n|#).*\\bCloud[\\s\\n]+Controller[\\s\\n]+Database\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |Cloud Controller database| is preferred. -->"},
"1359": {"find": "(^[^\\n\\W]+[^\\n#\\<\\d\\(]*[^\\.].\\bComponent\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |component| is the preferred casing. -->"},
"1360": {"find": "(^[^\\n\\W]+[^\\n#\\<\\d\\(]*[^\\.].\\bComponents\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |components| is the preferred casing. -->"},
"1361": {"find": "(^[^\\n\\W]+[^\\n#\\<\\d\\(]*[^\\.].\\bJumpbox\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |jumpbox| is preferred. -->"},
"1362": {"find": "(^[^\\n\\W]+[^\\n#\\<\\d\\(]*[^\\.].\\bStemcell\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Lowercase is preferred unless |stemcell| starts a sentence or is in a title. -->"},
"1363": {"find": "(^[^\\n\\W]+[^\\n#\\<\\d\\(]*[^\\.].\\bStemcells\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Lowercase is preferred unless |stemcells| starts a sentence or is in a title. -->"},
"1364": {"find": "(^[^\\n\\W]+[^\\n#\\<\\d\\(]*[^\\.].\\bSyslog\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Lowercase is preferred unless |syslog| starts a sentence or is in a title. -->"},
"1365": {"find": "(^\\*\\s[^\\*][^#]*###\\s(Resolved[\\s\\n]+Issues|Known[\\s\\n]+Issues|Features)(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- In release notes, each feature, KI, and resolved issue needs a run-in heading. -->"},
"1366": {"find": "(^\\s*`.{81,}`\\.(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Maybe delete the period -- it probably looks odd on the page after this code. -->"},
"1367": {"find": "(^##+.*(?=\\n[^\\n\\s])(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- A header must have 1 newline beneath it and 0 newlines within it. -->"},
"1368": {"find": "(^##+.*\\s[a-z]+$(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Per Chicago, capitalize the last word in the header. -->"},
"1369": {"find": "(^##+.*<\\/a>\\s*[a-z][a-z]+(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Per Chicago, capitalize the first word in the header. -->"},
"1370": {"find": "(^##+[^\\n]*\\n+[^\\n]*[^:]\\n\\n+(?=\\s*(\\<ol\\>|\\d\\.\\s))(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- A procedure requires a stem ending with a colon, as in |To do x:|. -->"},
"1371": {"find": "(^Note\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Put notes in Note box formatting per the wiki. -->"},
"1372": {"find": "(^Release[\\s\\n]+Date:(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |**Release Date:**| is house style. -->"},
"1373": {"find": "(^Release[\\s\\n]+date:(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- |**Release Date:**| is house style. -->"},
"1374": {"find": "(<code>[^\\w]<\\/code>[\\s\\n]+character\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Write the word for the special character so that screen readers can read it. -->"},
"1375": {"find": "(<code>[^\\w]<\\/code>[\\s\\n]+characters\\b(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Write the word for the special character so that screen readers can read it. -->"},
"1376": {"find": "(<p[\\s\\n]+class=.note.>(?!([\\s\\n]*<strong>Note:<\\/strong>\\s([A-Z]|<)))(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Format the note properly -- https://docs-wiki.cfapps.io/wiki/style/html-classes.html#note-class -->"},
"1377": {"find": "(<p[\\s\\n]+class=.warning>(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Format the note properly -- https://docs-wiki.cfapps.io/wiki/style/html-classes.html#note-class -->"},
"1378": {"find": "(<td[^\\>]*>\\s*-\\s*\\<\\/td\\>(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Use n/a, in italics, to mark an empty table cell. -->"},
"1379": {"find": "(<td[^\\>]*>\\s*–\\s*\\<\\/td\\>(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Use n/a, in italics, to mark an empty table cell. -->"},
"1380": {"find": "(<td[^\\>]*>\\s*—\\s*\\<\\/td\\>(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Use n/a, in italics, to mark an empty table cell. -->"},
"1381": {"find": "(<td[^\\>]*>\\s*\\(none\\)\\s*\\<\\/td\\>(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Use n/a, in italics, to mark an empty table cell. -->"},
"1382": {"find": "(<td[^\\>]*>\\s*&mdash;\\s*\\<\\/td\\>(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Use n/a, in italics, to mark an empty table cell. -->"},
"1383": {"find": "(<td[^\\>]*>\\s*&ndash;\\s*\\<\\/td\\>(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Use n/a, in italics, to mark an empty table cell. -->"},
"1384": {"find": "(<td[^\\>]*>\\s*n\\/a\\s*\\<\\/td\\>(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Use n/a, in italics, to mark an empty table cell. -->"},
"1385": {"find": "(<td[^\\>]*>\\s*N\\/A\\s*\\<\\/td\\>(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Use n/a, in italics, to mark an empty table cell. -->"},
"1386": {"find": "(<td[^\\>]*>\\s*NA\\s*\\<\\/td\\>(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Use n/a, in italics, to mark an empty table cell. -->"},
"1387": {"find": "(<td[^\\>]*>\\s*none\\s*\\<\\/td\\>(?![^`]*`[\\s\\.,:]|[^`]*```\\s|[^\\*:]*\\*\\*[\\s\\n-\\.,]|[^!]*[^\\)]\\s-->|[^\\{]*\\}\\s-->|[^\\[]*\\]|\\S*\\)|[^\\.\\s]*\\.png))", "replace": "\\1<!-- Use n/a, in italics, to mark an empty table cell. -->"},

// Delete duplicate comments.

"1391": {"find": "(<!-- .* -->)\\1", "replace": "\\1"}

   }
}
